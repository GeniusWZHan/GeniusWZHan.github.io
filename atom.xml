<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戒修-沉迷技术的小沙弥</title>
  <subtitle>我喜欢GO</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leokongwq.github.io/"/>
  <updated>2018-11-17T03:44:26.752Z</updated>
  <id>https://leokongwq.github.io/</id>
  
  <author>
    <name>kongwenqiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot 之 Servlet3 web组件</title>
    <link href="https://leokongwq.github.io/2018/11/17/springboot-servlet3-component.html"/>
    <id>https://leokongwq.github.io/2018/11/17/springboot-servlet3-component.html</id>
    <published>2018-11-17T03:32:28.000Z</published>
    <updated>2018-11-17T03:44:26.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://jcp.org/en/jsr/detail?id=315" target="_blank" rel="external">Servlet3.0</a> 规范新增了很多注解，例如：<code>@WebFilter</code>, <code>@WebServlet</code>, <code>@WebListener</code>, 可以帮助我们简化Web应用的开发，不在使用繁琐的xml配置。</p>
<p>但是在SpringBoot环境和支持Servlet3.0规范的容器下使用有些许的区别。</p>
<a id="more"></a>
<h3 id="springboot环境下使用Servlet3-0注解"><a href="#springboot环境下使用Servlet3-0注解" class="headerlink" title="springboot环境下使用Servlet3.0注解"></a>springboot环境下使用Servlet3.0注解</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span> jiexiu</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"authServlet"</span>, urlPatterns = &#123;<span class="string">"/abc"</span>&#125;, loadOnStartup=<span class="number">1</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthServlet</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">super</span>();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"AuthServlet init"</span>);</span>
<span class="line">        <span class="keyword">super</span>.init();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            resp.getOutputStream().write(<span class="string">"hello"</span>.getBytes());</span>
<span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span>
<span class="line">            e.printStackTrace();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span> : jiexiu</span>
<span class="line"> * DateTime: 2018/3/7 下午10:32</span>
<span class="line"> * Mail:leokongwq@gmail.com   </span>
<span class="line"> * Description: desc</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"AuthFilter init"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span>
<span class="line">        System.out.println(request.getLocalName());</span>
<span class="line">        chain.doFilter(request, response);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="Application-启动类"><a href="#Application-启动类" class="headerlink" title="Application 启动类"></a>Application 启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span> jiexiu</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@EnableDiscoveryClient</span></span>
<span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="meta">@ServletComponentScan</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceApplication</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">		SpringApplication.run(BookServiceApplication.class, args);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="ServletComponentScan"><a href="#ServletComponentScan" class="headerlink" title="@ServletComponentScan"></a>@ServletComponentScan</h3><p><code>@ServletComponentScan</code>这个注解很重要，它告诉SpringBoot从哪里加载Servlet组件。</p>
<p>如果不加该注解，则在SpringBoot内置的Servlet容器中不能正常加载注解指定的组件。</p>
<p>原因参见：<a href="https://github.com/spring-projects/spring-boot/issues/2290" target="_blank" rel="external">https://github.com/spring-projects/spring-boot/issues/2290</a></p>
<h3 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h3><p><code>@ServletComponentScan</code>注解是被 <code>ServletComponentRegisteringPostProcessor</code>进行处理的。 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServletComponentRegisteringPostProcessor</span></span>
<span class="line">  <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span>
<span class="line">   </span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;ServletComponentHandler&gt; HANDLERS;</span>
<span class="line"> </span>
<span class="line">    <span class="keyword">static</span> &#123;</span>
<span class="line">        List&lt;ServletComponentHandler&gt; handlers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span>
<span class="line">        handlers.add(<span class="keyword">new</span> WebServletHandler());</span>
<span class="line">        handlers.add(<span class="keyword">new</span> WebFilterHandler());</span>
<span class="line">        handlers.add(<span class="keyword">new</span> WebListenerHandler());</span>
<span class="line">        HANDLERS = Collections.unmodifiableList(handlers);</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="comment">//...</span></span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scanPackage</span><span class="params">(</span>
<span class="line">      ClassPathScanningCandidateComponentProvider componentProvider, </span>
<span class="line">      String packageToScan)</span></span>&#123;</span>
<span class="line">        <span class="comment">//...</span></span>
<span class="line">        <span class="keyword">for</span> (ServletComponentHandler handler : HANDLERS) &#123;</span>
<span class="line">            handler.handle(((ScannedGenericBeanDefinition) candidate),</span>
<span class="line">              (BeanDefinitionRegistry) <span class="keyword">this</span>.applicationContext);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=315&quot;&gt;Servlet3.0&lt;/a&gt; 规范新增了很多注解，例如：&lt;code&gt;@WebFilter&lt;/code&gt;, &lt;code&gt;@WebServlet&lt;/code&gt;, &lt;code&gt;@WebListener&lt;/code&gt;, 可以帮助我们简化Web应用的开发，不在使用繁琐的xml配置。&lt;/p&gt;
&lt;p&gt;但是在SpringBoot环境和支持Servlet3.0规范的容器下使用有些许的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://leokongwq.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://leokongwq.github.io/tags/springboot/"/>
    
      <category term="servlet3" scheme="https://leokongwq.github.io/tags/servlet3/"/>
    
  </entry>
  
  <entry>
    <title>springboot 之 ConfigurationProperties</title>
    <link href="https://leokongwq.github.io/2018/11/16/springboot-ConfigurationProperties.html"/>
    <id>https://leokongwq.github.io/2018/11/16/springboot-ConfigurationProperties.html</id>
    <published>2018-11-16T14:49:59.000Z</published>
    <updated>2018-11-17T03:49:32.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>ConfigurationProperties</code> 是SpringBoot引入的一个和外部配置文件相关的注解类。它可以帮助我们更好的使用外置的配置文件属性。</p>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigurationProperties &#123;</span>
<span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"prefix"</span>)</span>
<span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span>
<span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span>
<span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span>
<span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">ignoreInvalidFields</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span>
<span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">ignoreNestedProperties</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span>
<span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">ignoreUnknownFields</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span>
<span class="line">    <span class="meta">@Deprecated</span></span>
<span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exceptionIfInvalid</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="prefix-amp-value"><a href="#prefix-amp-value" class="headerlink" title="prefix &amp; value"></a>prefix &amp; value</h4><p>prefix 属性可以指定配置文件中配置项的前缀，如此，相同前缀的配置项就可以统一解析。</p>
<h4 id="ignoreInvalidFields"><a href="#ignoreInvalidFields" class="headerlink" title="ignoreInvalidFields"></a>ignoreInvalidFields</h4><p>是否忽略不可用的字段，默认为<code>false</code>， 当配置项不能被正确转化为Java类的字段值时，会抛出异常。</p>
<h4 id="ignoreNestedProperties"><a href="#ignoreNestedProperties" class="headerlink" title="ignoreNestedProperties"></a>ignoreNestedProperties</h4><p>是否忽略嵌套属性，默认为<code>false</code>， </p>
<h4 id="ignoreUnknownFields"><a href="#ignoreUnknownFields" class="headerlink" title="ignoreUnknownFields"></a>ignoreUnknownFields</h4><p>是否忽略Java类不存在的字段，默认值为<code>true</code>。</p>
<h4 id="exceptionIfInvalid"><a href="#exceptionIfInvalid" class="headerlink" title="exceptionIfInvalid"></a>exceptionIfInvalid</h4><p>如果Java类加了注解<code>@Validated</code>，并且校验失败了，是否抛出异常。默认<code>true</code></p>
<h3 id="属性注入到Java类"><a href="#属性注入到Java类" class="headerlink" title="属性注入到Java类"></a>属性注入到Java类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@ConfigurationProperties</span></span>
<span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:configprops.properties"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigProperties</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Credentials</span> </span>&#123;</span>
<span class="line">        <span class="meta">@Length</span>(max = <span class="number">4</span>, min = <span class="number">1</span>)</span>
<span class="line">        <span class="keyword">private</span> String authMethod;</span>
<span class="line">        <span class="keyword">private</span> String username;</span>
<span class="line">        <span class="keyword">private</span> String password;</span>
<span class="line"> </span>
<span class="line">       <span class="comment">// standard getters and setters</span></span>
<span class="line">    &#125;</span>
<span class="line">    <span class="meta">@NotBlank</span></span>
<span class="line">    <span class="keyword">private</span> String host;</span>
<span class="line">    <span class="meta">@Min</span>(<span class="number">1025</span>)</span>
<span class="line">    <span class="meta">@Max</span>(<span class="number">65536</span>)</span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span>
<span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]&#123;2,6&#125;$"</span>)</span>
<span class="line">    <span class="keyword">private</span> String from;</span>
<span class="line">    <span class="keyword">private</span> Credentials credentials;</span>
<span class="line">    <span class="keyword">private</span> List&lt;String&gt; defaultRecipients;</span>
<span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; additionalHeaders;</span>
<span class="line">  </span>
<span class="line">    <span class="comment">// standard getters and setters</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>默认属性配置从<code>application.properties</code>文件中获取，也可以通过<code>@PropertySource</code>指定。</p>
<p><code>@Configuration</code>注解不可缺少。</p>
<p>资源文件内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">#Simple properties</span>
<span class="line">mail.host=mailer@mail.com</span>
<span class="line">mail.port=9000</span>
<span class="line">mail.from=mailer@mail.com</span>
<span class="line"> </span>
<span class="line">#List properties</span>
<span class="line">mail.defaultRecipients[0]=admin@mail.com</span>
<span class="line">mail.defaultRecipients[1]=owner@mail.com</span>
<span class="line"> </span>
<span class="line">#Map Properties</span>
<span class="line">mail.additionalHeaders.redelivery=true</span>
<span class="line">mail.additionalHeaders.secure=true</span>
<span class="line"> </span>
<span class="line">#Object properties</span>
<span class="line">mail.credentials.username=john</span>
<span class="line">mail.credentials.password=password</span>
<span class="line">mail.credentials.authMethod=SHA1</span>
</pre></td></tr></table></figure>
<h4 id="内嵌类属性"><a href="#内嵌类属性" class="headerlink" title="内嵌类属性"></a>内嵌类属性</h4><p><code>mail.credentials.username</code>可以注入到内嵌属性<code>credentials</code>中</p>
<h4 id="列表字段"><a href="#列表字段" class="headerlink" title="列表字段"></a>列表字段</h4><p><code>mail.defaultRecipients[0]</code> 可以注入到类的列表(数组页可以)属性中。</p>
<h4 id="map字段"><a href="#map字段" class="headerlink" title="map字段"></a>map字段</h4><p><code>mail.additionalHeaders.redelivery</code> 格式的配置项也可以注入到<code>Map</code>类型的属性中。</p>
<h3 id="通过-ConfigurationProperties-Bean注解在配置类的bean定义方法上"><a href="#通过-ConfigurationProperties-Bean注解在配置类的bean定义方法上" class="headerlink" title="通过@ConfigurationProperties + @Bean注解在配置类的bean定义方法上"></a>通过@ConfigurationProperties + @Bean注解在配置类的bean定义方法上</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span>
<span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"mail"</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> ConfigProperties <span class="title">mailConfig</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConfigProperties();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="ConfigurationProperties-EnableConfigurationProperties"><a href="#ConfigurationProperties-EnableConfigurationProperties" class="headerlink" title="@ConfigurationProperties + @EnableConfigurationProperties"></a>@ConfigurationProperties + @EnableConfigurationProperties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;ConfigProperties.class&#125;)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        SpringApplication.run(Application.class, args);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="属性校验"><a href="#属性校验" class="headerlink" title="属性校验"></a>属性校验</h3><p>可以给属性类上加入<code>javax.validation.constraints.*</code>中的注解，来对配置项进行校验。配合<code>exceptionIfInvalid</code>可以更早的发现问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ConfigurationProperties&lt;/code&gt; 是SpringBoot引入的一个和外部配置文件相关的注解类。它可以帮助我们更好的使用外置的配置文件属性。&lt;/p&gt;
&lt;h3 id=&quot;源码解析&quot;&gt;&lt;a href=&quot;#源码解析&quot; class=&quot;headerlink&quot; title=&quot;源码解析&quot;&gt;&lt;/a&gt;源码解析&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(&amp;#123; ElementType.TYPE, ElementType.METHOD &amp;#125;)&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Documented&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; ConfigurationProperties &amp;#123;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@AliasFor&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;prefix&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@AliasFor&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;&quot;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ignoreInvalidFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ignoreNestedProperties&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ignoreUnknownFields&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Deprecated&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exceptionIfInvalid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://leokongwq.github.io/categories/springboot/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
      <category term="springboot" scheme="https://leokongwq.github.io/tags/springboot/"/>
    
      <category term="译" scheme="https://leokongwq.github.io/tags/%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>JDK8环境下使用struts2</title>
    <link href="https://leokongwq.github.io/2018/11/07/struts2-with-jdk8.html"/>
    <id>https://leokongwq.github.io/2018/11/07/struts2-with-jdk8.html</id>
    <published>2018-11-07T14:07:54.000Z</published>
    <updated>2018-11-07T15:02:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近将组内项目的部署环境进行了一次升级。将JDK1.7S升级为1.8，Resin替换为Tomcat。在升级替换的过程中遇到了一些问题。特记录再次，希望能帮助有同样需求的朋友。</p>
<a id="more"></a>
<h3 id="Struts2-和-JDK8"><a href="#Struts2-和-JDK8" class="headerlink" title="Struts2 和 JDK8"></a>Struts2 和 JDK8</h3><p>项目中使用的<code>Struts2</code>版本是<code>2.3.35</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>Struts2里面依赖<code>xwork-core</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts.xwork<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xwork-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p><code>xwork-core</code>依赖<code>asm-*</code></p>
<p>问题来了!</p>
<p>低版本的<code>ASM</code>不能在JDK1.8环境中使用。如果强行使用，会导致一些奇怪的问题。</p>
<p>例如：</p>
<ol>
<li>只有一部分<code>Action</code>类可以正常被Struts2加载并处理http请求。某些在JDK1.7环境下可以正常工作的<code>Action</code>不能在JDK1.8下使用。原来可以访问的接口，现在是<code>404</code>。</li>
</ol>
<p>具体问题出在：</p>
<figure class="highlight java"><figcaption><span>DefaultClassFinder</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readClassDef</span><span class="params">(String className)</span> </span>&#123;</span>
<span class="line">   <span class="keyword">if</span> (!className.endsWith(<span class="string">".class"</span>)) &#123;</span>
<span class="line">       className = className.replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">".class"</span>;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">try</span> &#123;</span>
<span class="line">       URL resource = classLoaderInterface.getResource(className);</span>
<span class="line">       <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span>
<span class="line">           InputStream in = resource.openStream();</span>
<span class="line">           <span class="keyword">try</span> &#123;</span>
<span class="line">               ClassReader classReader = <span class="keyword">new</span> ClassReader(in);</span>
<span class="line">               classReader.accept(<span class="keyword">new</span> InfoBuildingVisitor(<span class="keyword">this</span>), ClassReader.SKIP_DEBUG);</span>
<span class="line">           &#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">               in.close();</span>
<span class="line">           &#125;</span>
<span class="line">       &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> XWorkException(<span class="string">"Could not load "</span> + className);</span>
<span class="line">       &#125;</span>
<span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span>
<span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> XWorkException(<span class="string">"Could not load "</span> + className, e);</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这部分代码就因为使用了低版本的<code>ASM</code>导致类解析失败(<code>IndexOutOfBoundsException</code>)。</p>
<h4 id="解决办法一"><a href="#解决办法一" class="headerlink" title="解决办法一"></a>解决办法一</h4><p>最简单方便的解决版本就是升级Struts2的版本到<code>2.5.x</code>。新版本将<code>xwork</code>依赖直接合并到<code>struts2-core</code>中了。而且使用了<code>ASM 5.X</code>版本，支持JDK8。</p>
<h4 id="解决办法二"><a href="#解决办法二" class="headerlink" title="解决办法二"></a>解决办法二</h4><p>使用Struts2官方提供的一个插件。具体用法如下：</p>
<hr>
<p>在项目中加入依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-java8-support-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>排除ASM依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts.xwork<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xwork-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="Struts2-版本升级问题"><a href="#Struts2-版本升级问题" class="headerlink" title="Struts2 版本升级问题"></a>Struts2 版本升级问题</h3><h4 id="标签库不兼容"><a href="#标签库不兼容" class="headerlink" title="标签库不兼容"></a>标签库不兼容</h4><p>众所周知，Struts2框架的安全问题很多，建议升级到最新版本<code>2.5.x</code>。</p>
<p>但是2.5.x版本的Struts2提供的<strong>标签库</strong>和低版本的不兼容。这就会导致原有的<strong>JSP页面不能正常渲染</strong>。</p>
<p>当然了，如果你的项目里面没有使用Struts2替换的标签，这个问题可以忽略了。</p>
<h4 id="核心类拦截器变化"><a href="#核心类拦截器变化" class="headerlink" title="核心类拦截器变化"></a>核心类拦截器变化</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span>
<span class="line"><span class="comment">&lt;!-- org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter </span>
<span class="line">之前的核心过滤器全类名会有个ng  ,struts2.5核心过滤器没有这个</span>
<span class="line">--&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="aspectjweaver"><a href="#aspectjweaver" class="headerlink" title="aspectjweaver"></a>aspectjweaver</h3><p>我们项目使用的版本是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>升级JDK1.8以后，需要同时升级该jar的版本到<code>1.8.13</code>。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/gh670011677/article/details/75019003" target="_blank" rel="external">Struts2.5配置</a></p>
<p><a href="https://struts.apache.org/plugins/java-8-support/" target="_blank" rel="external">Java 8 Support Plugin</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/WW/Struts+2.3+to+2.5+migration" target="_blank" rel="external">Struts+2.3+to+2.5+migration</a></p>
<p><a href="https://stackoverflow.com/questions/41307863/what-is-the-difference-between-struts-2-3-x-and-struts-2-5-x" target="_blank" rel="external">what-is-the-difference-between-struts-2-3-x-and-struts-2-5-x</a></p>
<p><a href="https://asm.ow2.io/versions.html" target="_blank" rel="external">ASM-VERSIONS</a></p>
<p><a href="https://nosec.org/home/detail/1755.html" target="_blank" rel="external">Struts2最新RCE漏洞S2-057</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近将组内项目的部署环境进行了一次升级。将JDK1.7S升级为1.8，Resin替换为Tomcat。在升级替换的过程中遇到了一些问题。特记录再次，希望能帮助有同样需求的朋友。&lt;/p&gt;
    
    </summary>
    
    
      <category term="struts2" scheme="https://leokongwq.github.io/tags/struts2/"/>
    
      <category term="JDK8" scheme="https://leokongwq.github.io/tags/JDK8/"/>
    
  </entry>
  
  <entry>
    <title>maven加速</title>
    <link href="https://leokongwq.github.io/2018/11/03/how-to-make-maven-faster.html"/>
    <id>https://leokongwq.github.io/2018/11/03/how-to-make-maven-faster.html</id>
    <published>2018-11-03T04:42:36.000Z</published>
    <updated>2018-11-03T04:58:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于网络原因，国内访问maven中央仓库速度很慢。编译大型Maven项目时速度很慢。此时可以通过公用的或私有的镜像站来进行加速。</p>
<a id="more"></a>
<h3 id="国内Maven镜像站点"><a href="#国内Maven镜像站点" class="headerlink" title="国内Maven镜像站点"></a>国内Maven镜像站点</h3><h4 id="aliyun"><a href="#aliyun" class="headerlink" title="aliyun"></a>aliyun</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;  </span>
<span class="line">      &lt;id&gt;alimaven&lt;/id&gt;  </span>
<span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;  </span>
<span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;  </span>
<span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    </span>
<span class="line">&lt;/mirror&gt;</span>
</pre></td></tr></table></figure>
<h4 id="oschina"><a href="#oschina" class="headerlink" title="oschina"></a>oschina</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;    </span>
<span class="line">    &lt;id&gt;CN&lt;/id&gt;  </span>
<span class="line">    &lt;name&gt;OSChina Central&lt;/name&gt;         </span>
<span class="line">    &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;  </span>
<span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    </span>
<span class="line">&lt;/mirror&gt;</span>
</pre></td></tr></table></figure>
<h3 id="setting-xml-配置"><a href="#setting-xml-配置" class="headerlink" title="setting.xml 配置"></a>setting.xml 配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span>
<span class="line">    &lt;!-- 作为中央仓库的镜像 --&gt;</span>
<span class="line">    &lt;mirror&gt;</span>
<span class="line">      &lt;id&gt;nexus-aliyun&lt;/id&gt;</span>
<span class="line">      &lt;name&gt;Nexus aliyun&lt;/name&gt;</span>
<span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span>
<span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span>
<span class="line">    &lt;/mirror&gt;</span>
<span class="line">    &lt;!-- 私有， 公司内部使用 --&gt;</span>
<span class="line">    &lt;mirror&gt;</span>
<span class="line">      &lt;id&gt;nexus-mine&lt;/id&gt;</span>
<span class="line">      &lt;name&gt;Nexus mine&lt;/name&gt;</span>
<span class="line">      &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span>
<span class="line">      &lt;url&gt;http://xx.xx.xx.xx/nexus/content/groups/public&lt;/url&gt;</span>
<span class="line">    &lt;/mirror&gt;</span>
<span class="line">  &lt;/mirrors&gt;</span>
</pre></td></tr></table></figure>
<h3 id="mirrorOf-配置"><a href="#mirrorOf-配置" class="headerlink" title="mirrorOf 配置"></a>mirrorOf 配置</h3><p><code>mirrorOf</code> 用来指定该镜像针对的仓库。用法如下：</p>
<ul>
<li><code>*</code> 匹配所有仓库</li>
<li><code>external:*</code> 匹配除了本机和基于文件的所有外部构建地址。</li>
<li><code>repo,repo1</code> 匹配仓库<code>repo</code>和<code>repo1</code></li>
<li><code>*,!repo1</code> 除了仓库<code>repo1</code>匹配所有</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://maven.apache.org/guides/mini/guide-mirror-settings.html" target="_blank" rel="external">guide-mirror-settings</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;由于网络原因，国内访问maven中央仓库速度很慢。编译大型Maven项目时速度很慢。此时可以通过公用的或私有的镜像站来进行加速。&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven" scheme="https://leokongwq.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>consul 命令介绍</title>
    <link href="https://leokongwq.github.io/2018/07/29/consul-command-intro.html"/>
    <id>https://leokongwq.github.io/2018/07/29/consul-command-intro.html</id>
    <published>2018-07-28T16:25:40.000Z</published>
    <updated>2018-07-29T07:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="consul-命令用法"><a href="#consul-命令用法" class="headerlink" title="consul 命令用法"></a>consul 命令用法</h2><p>安装完consul后，通过在控制台直接实现<code>consul</code>命令了解consul命令行的用法，输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line">Usage: consul [--version] [--help] &lt;command&gt; [&lt;args&gt;]</span>
<span class="line"></span>
<span class="line">Available commands are:</span>
<span class="line">agent          Runs a Consul agent</span>
<span class="line">catalog        Interact with the catalog</span>
<span class="line">event          Fire a new event</span>
<span class="line">exec           Executes a command on Consul nodes</span>
<span class="line">force-leave    Forces a member of the cluster to enter the &quot;left&quot; state</span>
<span class="line">info           Provides debugging information for operators.</span>
<span class="line">join           Tell Consul agent to join cluster</span>
<span class="line">keygen         Generates a new encryption key</span>
<span class="line">keyring        Manages gossip layer encryption keys</span>
<span class="line">kv             Interact with the key-value store</span>
<span class="line">leave          Gracefully leaves the Consul cluster and shuts down</span>
<span class="line">lock           Execute a command holding a lock</span>
<span class="line">maint          Controls node or service maintenance mode</span>
<span class="line">members        Lists the members of a Consul cluster</span>
<span class="line">monitor        Stream logs from a Consul agent</span>
<span class="line">operator       Provides cluster-level tools for Consul operators</span>
<span class="line">reload         Triggers the agent to reload configuration files</span>
<span class="line">rtt            Estimates network round trip time between nodes</span>
<span class="line">snapshot       Saves, restores and inspects snapshots of Consul server state</span>
<span class="line">validate       Validate config files/directories</span>
<span class="line">version        Prints the Consul version</span>
<span class="line">watch          Watch for changes in Consul</span>
</pre></td></tr></table></figure>
<p>如上所示， consul提供的命令很多，下面就逐个学习下每个命令的作用和用法。</p>
<a id="more"></a>
<h2 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h2><p><code>agent</code> 命令的作用是启动一个<code>consul</code> 进程， 该进程的具体作用和该命令的参数有关。</p>
<p>通过 <code>consul agent --help</code> 可以获取该命令的详细用法</p>
<h3 id="datacenter"><a href="#datacenter" class="headerlink" title="datacenter"></a>datacenter</h3><p>该参数指定该<code>agent</code>所在的数据中心名称。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-datacenter=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="advertise"><a href="#advertise" class="headerlink" title="advertise"></a>advertise</h3><p>该参数用来设置<code>advertise</code>所使用的地址。默认值和<code>-bind</code>指定的地址一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-advertise=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="advertise-wan"><a href="#advertise-wan" class="headerlink" title="advertise-wan"></a>advertise-wan</h3><p>设置广域网环境的的<code>advertise</code>地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-advertise-wan=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="bind"><a href="#bind" class="headerlink" title="-bind"></a>-bind</h3><p>设置集群通信所使用的IP地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-bind=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p>将Server设置为<code>boostrap</code>模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-bootstrap</span>
</pre></td></tr></table></figure>
<h3 id="bootstrap-expect"><a href="#bootstrap-expect" class="headerlink" title="bootstrap-expect"></a>bootstrap-expect</h3><p>将Server设置为<code>expect boostrap</code>模式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-bootstrap-expect=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p>设置客户端访问所使用的IP地址。 该地址可用于RPC, DNS,HTTP,HTTPS通信使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-client=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="config-dir"><a href="#config-dir" class="headerlink" title="config-dir"></a>config-dir</h3><p>设置配置文件所在的目录的路径。consul会读取该目录下所有以<code>.json</code>结尾的文件作为配置文件，并且以文件名字典序来应用这些配置文件。</p>
<p>该参数可以多次使用，来指定多个配置文件目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-config-dir=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="config-file"><a href="#config-file" class="headerlink" title="config-file"></a>config-file</h3><p>指定配置文件路径，可以多次多次使用，用来指定多个配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-config-file=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="config-format"><a href="#config-format" class="headerlink" title="config-format"></a>config-format</h3><p>设置配置文件的格式。 <code>json</code>或<code>hcl</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-config-format=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="data-dir"><a href="#data-dir" class="headerlink" title="data-dir"></a>data-dir</h3><p>设置保存<code>agent</code>状态数据的目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-data-dir=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="dev"><a href="#dev" class="headerlink" title="dev"></a>dev</h3><p>该<code>agent</code>以开发模式运行。会输出详细的日子信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-dev</span>
</pre></td></tr></table></figure>
<h3 id="disable-host-node-id"><a href="#disable-host-node-id" class="headerlink" title="disable-host-node-id"></a>disable-host-node-id</h3><p>该该选项设置为true, 则consul不会使用所在主机的信息生成集群结点id。 从而每次都生成一个随机值。<br>建议不要开始该选项。默认的结点id将会是主机名<code>hostname</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-disable-host-node-id</span>
</pre></td></tr></table></figure>
<h3 id="disable-keyring-file"><a href="#disable-keyring-file" class="headerlink" title="disable-keyring-file"></a>disable-keyring-file</h3><p>禁止将<code>keyring</code>备份到文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-disable-keyring-file</span>
</pre></td></tr></table></figure>
<h3 id="dns-port"><a href="#dns-port" class="headerlink" title="dns-port"></a>dns-port</h3><p>设置DNS 查询所使用的端口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-dns-port=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p>DNS 接口所使用的域名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-domain=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="enable-script-checks"><a href="#enable-script-checks" class="headerlink" title="enable-script-checks"></a>enable-script-checks</h3><p>启用健康检测脚本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-enable-script-checks</span>
</pre></td></tr></table></figure>
<h3 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h3><p>提供<code>gossip</code>广播加密数据所使用的key.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-encrypt=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="hcl"><a href="#hcl" class="headerlink" title="hcl"></a>hcl</h3><p><code>hcl</code> 配置片段。 可以多次使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-hcl=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="http-port"><a href="#http-port" class="headerlink" title="http-port"></a>http-port</h3><p>设置http API 服务监听的端口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-http-port=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>设置该<code>agent</code>启动时加入所在集群的成员IP地址。可以多次使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-join=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="join-wan"><a href="#join-wan" class="headerlink" title="join-wan"></a>join-wan</h3><p>设置该<code>agent</code>启动时加入所在跨IDC集群的成员IP地址。可以多次使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-join-wan=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="log-level"><a href="#log-level" class="headerlink" title="log-level"></a>log-level</h3><p>设置<code>agent</code>的日志输出级别。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-log-level=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>设置该结点在集群中的名称，必须唯一。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-node=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="node-id"><a href="#node-id" class="headerlink" title="node-id"></a>node-id</h3><p>设置该结点在集群中永恒的ID，默认是一个随机生成的值，并保存的数据目录中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-node-id=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="node-meta"><a href="#node-meta" class="headerlink" title="node-meta"></a>node-meta</h3><p>给该结点设置元数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-node-meta=&lt;key:value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="non-voting-server"><a href="#non-voting-server" class="headerlink" title="non-voting-server"></a>non-voting-server</h3><p>该选项使该Server不参于Raft协议的选举流程，仅仅进行数据同步。这样角色的结点主要用来扩展consul集群的读能力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-non-voting-server</span>
</pre></td></tr></table></figure>
<h3 id="pid-file"><a href="#pid-file" class="headerlink" title="pid-file"></a>pid-file</h3><p>指定保存pid的文件路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-pid-file=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h3><p>设置协议版本。默认使用最新版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-protocol=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="raft-protocol"><a href="#raft-protocol" class="headerlink" title="raft-protocol"></a>raft-protocol</h3><p>设置Raft协议的版本。默认使用最新版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-raft-protocol=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="recursor"><a href="#recursor" class="headerlink" title="recursor"></a>recursor</h3><p>上游DNS服务器的地址。可以多次使用，指定多个地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-recursor=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="rejoin"><a href="#rejoin" class="headerlink" title="rejoin"></a>rejoin</h3><p>忽略上次的离开，并尝试从新加入集群。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-rejoin</span>
</pre></td></tr></table></figure>
<h3 id="retry-interval"><a href="#retry-interval" class="headerlink" title="retry-interval"></a>retry-interval</h3><p>每次尝试重试加入集群的重试时间间隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-interval=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="retry-interval-wan"><a href="#retry-interval-wan" class="headerlink" title="retry-interval-wan"></a>retry-interval-wan</h3><p>同样用来指定加入集群的重试时间间隔，不过针对的广域网。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-interval-wan=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="retry-join"><a href="#retry-join" class="headerlink" title="retry-join"></a>retry-join</h3><p>Address of an agent to join at start time with retries enabled. Can<br>be specified multiple times.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-join=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="retry-join-wan"><a href="#retry-join-wan" class="headerlink" title="retry-join-wan"></a>retry-join-wan</h3><p>Address of an agent to join -wan at start time with retries<br>enabled. Can be specified multiple times.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-join-wan=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="retry-max"><a href="#retry-max" class="headerlink" title="retry-max"></a>retry-max</h3><p>设置重试的最大次数。默认值是<code>0</code>, 意味着一直进行尝试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-max=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="retry-max-wan"><a href="#retry-max-wan" class="headerlink" title="retry-max-wan"></a>retry-max-wan</h3><p>设置重试的最大次数。针对的是广域网。默认值是<code>0</code>, 意味着一直进行尝试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-retry-max-wan=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="segment"><a href="#segment" class="headerlink" title="segment"></a>segment</h3><p>(企业级版本才有的功能) 设置加入的网络段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-segment=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="serf-lan-bind"><a href="#serf-lan-bind" class="headerlink" title="serf-lan-bind"></a>serf-lan-bind</h3><p>Address to bind Serf LAN listeners to.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-serf-lan-bind=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="serf-wan-bind"><a href="#serf-wan-bind" class="headerlink" title="serf-wan-bind"></a>serf-wan-bind</h3><p>Address to bind Serf WAN listeners to.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-serf-wan-bind=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="server"><a href="#server" class="headerlink" title="-server"></a>-server</h3><p>以<code>server</code>模式启动，默认是<code>client</code></p>
<h3 id="syslog"><a href="#syslog" class="headerlink" title="syslog"></a>syslog</h3><p>将日志输出到syslog.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-syslog</span>
</pre></td></tr></table></figure>
<h3 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h3><p>启用consul内置的静态wei UI服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-ui</span>
</pre></td></tr></table></figure>
<h3 id="ui-dir"><a href="#ui-dir" class="headerlink" title="ui-dir"></a>ui-dir</h3><p>指定包含web界面的资源目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-ui-dir=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h2 id="catalog"><a href="#catalog" class="headerlink" title="catalog"></a>catalog</h2><p>此命令具有与Consul目录交互的子命令。该目录不应与代理混淆，尽管API和回应可能类似。</p>
<p>以下是一些简单示例，并提供了更详细的示例在子命令或文档中。</p>
<p>列出所有数据中心</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul catalog datacenters</span>
</pre></td></tr></table></figure>
<p>列出所有结点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul catalog nodes</span>
</pre></td></tr></table></figure>
<p>列出所有服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul catalog services</span>
</pre></td></tr></table></figure>
<h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><p>跨数据中心发布自定义用户事件。 必须提供事件名称，但事件的内容是可选的。 </p>
<p>支持通过正则表达式，节点名称，服务名称，或标签进行过滤。</p>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><p>事件的名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-name=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h3 id="node-1"><a href="#node-1" class="headerlink" title="node"></a>node</h3><p>用来指定通过正则表达式过滤的节点名称。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-node=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>用来指定通过正则表达式过滤的服务名称。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-service=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>用来指定通过正则表达式过滤的服务的标签名称。必须和<code>-service</code>选项一起使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-tag=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>在远程Consul节点上执行命令。 节点的响应内容可以通过正则表达式进行过滤。</p>
<p>可用的选项如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line">-node=&lt;string&gt;</span>
<span class="line"></span>
<span class="line">Regular expression to filter on node names.</span>
<span class="line"></span>
<span class="line">-prefix=&lt;string&gt;</span>
<span class="line"></span>
<span class="line">Prefix in the KV store to use for request data.</span>
<span class="line"></span>
<span class="line">-service=&lt;string&gt;</span>
<span class="line"></span>
<span class="line">Regular expression to filter on service instances.</span>
<span class="line"></span>
<span class="line">-shell</span>
<span class="line"></span>
<span class="line">Use a shell to run the command.</span>
<span class="line"></span>
<span class="line">-tag=&lt;string&gt;</span>
<span class="line"></span>
<span class="line">Regular expression to filter on service tags. Must be used with</span>
<span class="line">-service.</span>
<span class="line"></span>
<span class="line">-verbose</span>
<span class="line"></span>
<span class="line">Enables verbose output.</span>
<span class="line"></span>
<span class="line">-wait=&lt;duration&gt;</span>
<span class="line"></span>
<span class="line">Period to wait with no responses before terminating execution.</span>
<span class="line"></span>
<span class="line">-wait-repl=&lt;duration&gt;</span>
<span class="line"></span>
<span class="line">Period to wait for replication before firing event. This is an</span>
<span class="line">optimization to allow stale reads to be performed.</span>
</pre></td></tr></table></figure>
<h2 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h2><p>将一个结点优雅进入<code>leave</code>状态，并关闭。</p>
<h2 id="force-leave"><a href="#force-leave" class="headerlink" title="force-leave"></a>force-leave</h2><p>强制一个集群的节点进入<code>left</code>状态。</p>
<h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p>提供操作命令的调试信息。</p>
<h2 id="join-1"><a href="#join-1" class="headerlink" title="join"></a>join</h2><p>使一个运行中的agent加入到集群中。</p>
<h3 id="wan"><a href="#wan" class="headerlink" title="wan"></a>wan</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-wan</span>
</pre></td></tr></table></figure>
<h2 id="keygen"><a href="#keygen" class="headerlink" title="keygen"></a>keygen</h2><p>生成一个新的加密用的key，用来供agent对网络流量就行加密。  </p>
<h2 id="keyring"><a href="#keyring" class="headerlink" title="keyring"></a>keyring</h2><p>管理用来加密<code>gossip</code>消息的秘钥。<code>Gossip</code>加密是可以选的。当启用<code>Gossip</code>加密，该命令可以用来检查集群中处于激活状态下的加密key，添加新的key，删除老的key。把这些功能结合起来，就可以实现不破坏集群的前提下，更新加密秘钥的功能。</p>
<p>该命令提供的所有操作都只能在<code>Server</code>模式的结点上执行， 并且影响范围包括<code>LAN</code>和<code>WAN</code>。</p>
<p>当所有结点正确返回时，该命令输出:0, 否则其他任何情况都输出1。</p>
<p>该命令的选项如下：</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>安装一个新的秘钥，并广播到集群的所有结点中。秘钥的格式是base64的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-install=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列出所有正在集群中使用的秘钥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-list</span>
</pre></td></tr></table></figure>
<h3 id="relay-factor"><a href="#relay-factor" class="headerlink" title="relay-factor"></a>relay-factor</h3><p>Setting this to a non-zero value will cause nodes to relay their<br>response to the operation through this many randomly-chosen other<br>nodes in the cluster. The maximum allowed value is 5.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-relay-factor=&lt;int&gt;</span>
</pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>从集群中删除秘钥。 该操作只能针对哪些当前不是主秘钥的秘钥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-remove=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><p>Change the primary encryption key, which is used to encrypt<br>messages. The key must already be installed before this operation<br>can succeed.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-use=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h2 id="kv"><a href="#kv" class="headerlink" title="kv"></a>kv</h2><p>该命令包含一些操作Consul K-V 存储的子命令。</p>
<p>下面是一些简单的例子：</p>
<p>创建或更新一个名称为<code>redis/config/connections</code>，值为5的键值对。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul kv put redis/config/connections 5</span>
</pre></td></tr></table></figure>
<p>获取该键值对的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul kv get redis/config/connections</span>
</pre></td></tr></table></figure>
<p>获取该键值对的详细信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul kv get -detailed redis/config/connections</span>
</pre></td></tr></table></figure>
<p>删除该键值对</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">$ consul kv delete redis/config/connections</span>
</pre></td></tr></table></figure>
<h3 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h3><p>delete    Removes data from the KV store<br>export    Exports a tree from the KV store as JSON<br>get       Retrieves or lists data from the KV store<br>import    Imports a tree stored as JSON to the KV store<br>put       Sets or updates data in the KV store</p>
<h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p>Acquires a lock or semaphore at a given path, and invokes a child process<br>when successful. The child process can assume the lock is held while it<br>executes. If the lock is lost or communication is disrupted the child<br>process will be sent a SIGTERM signal and given time to gracefully exit.<br>After the grace period expires the process will be hard terminated.</p>
<p>For Consul agents on Windows, the child process is always hard terminated<br>with a SIGKILL, since Windows has no POSIX compatible notion for SIGTERM.</p>
<p>When -n=1, only a single lock holder or leader exists providing mutual<br>exclusion. Setting a higher value switches to a semaphore allowing multiple<br>holders to coordinate.</p>
<p>The prefix provided must have write privileges.</p>
<h2 id="maint"><a href="#maint" class="headerlink" title="maint"></a>maint</h2><p>该命令的作用是将节点或服务置于维护模式。在维护模式下，无论通过DNS查询还是HTTP接口，都不再返回节点或服务的信息。命令有效地将其从可用池中取出节点。该命令的执行原理是通过注册节点或服务的健康检查来完成的。</p>
<p>为节点或服务启用维护模式时，你可以选择指定一个字符串来表明原因。该字符串将出现在“Notes”字段中<br>对节点或注册的重要健康检查服务。如果没有提供原因，将使用默认值。</p>
<p>维护模式是持久的，并且会在agent重启启动的时候恢复。 因此，在将给定节点或服务将被放回可以池中之前需要禁用维护模式。</p>
<p>默认情况下，我们将一个节点作为一个整体进行操作。通过指定<code>-service</code>参数，可以操作具体的服务。</p>
<p>如果没有给出参数，将显示agent的维护状态。如果当前没有任何维护，则返回空白。</p>
<h3 id="disable"><a href="#disable" class="headerlink" title="disable"></a>disable</h3><p>禁用维护模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-disable</span>
</pre></td></tr></table></figure>
<h3 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h3><p>启用维护模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-enable</span>
</pre></td></tr></table></figure>
<h3 id="reason"><a href="#reason" class="headerlink" title="reason"></a>reason</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-reason=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<p>指定本次操作的原因描述信息</p>
<h3 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h3><p>指定操作的服务ID。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-service=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<h2 id="members"><a href="#members" class="headerlink" title="members"></a>members</h2><p>该命令的作用是：输出集群成员信息</p>
<p>可用的参数有：</p>
<h3 id="detailed"><a href="#detailed" class="headerlink" title="-detailed"></a>-detailed</h3><p>输出更详细的节点信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">consul members -detailed</span>
<span class="line">Node   Address         Status  Tags</span>
<span class="line">bogon  127.0.0.1:8301  alive   build=1.0.2:b55059f,dc=dc1,id=fc1742c4-d97b-8a5b-ff3c-ab11941e2fea,port=8300,raft_vsn=3,role=consul,segment=&lt;all&gt;,vsn=2,vsn_max=3,vsn_min=2,wan_join_port=8302</span>
</pre></td></tr></table></figure>
<h3 id="segment-1"><a href="#segment-1" class="headerlink" title="segment"></a>segment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-segment=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<p>企业级版本才有的功能。 可以只输出所属segment的结点信息。</p>
<h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-status=&lt;string&gt;</span>
</pre></td></tr></table></figure>
<p>根据状态进行过滤需要输出的结点。</p>
<h3 id="wan-1"><a href="#wan-1" class="headerlink" title="wan"></a>wan</h3><p>如果agent允许在server模式下，该选项可以输出其它在<code>WAN</code>广域网的节点信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-wan</span>
</pre></td></tr></table></figure>
<h2 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h2><p>显示Consul agent 的最近日志消息，并连接到agent，实时输出agent上日志消息。 而且可以通过参数来指定需要查看的日志级别。默认输出的是DEBUG级别的日志。</p>
<h2 id="operator"><a href="#operator" class="headerlink" title="operator"></a>operator</h2><p>该命令提供了Consul集群级别的操作能力， 在使用时需要非常小心。使用不当有可能造成，节点数据过期或数据丢失。</p>
<p>子命令如下：</p>
<h3 id="autopilot"><a href="#autopilot" class="headerlink" title="autopilot"></a>autopilot</h3><p><code>autopilot</code> 命令用于与Consul的<code>autopilot</code>子系统进行交互。 该命令可用于查看或修改当前配置。</p>
<h4 id="get-config"><a href="#get-config" class="headerlink" title="get-config"></a>get-config</h4><p>显示当前的自动驾驶仪配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">consul operator autopilot get-config</span>
<span class="line">CleanupDeadServers = true</span>
<span class="line">LastContactThreshold = 200ms</span>
<span class="line">MaxTrailingLogs = 250</span>
<span class="line">ServerStabilizationTime = 10s</span>
<span class="line">RedundancyZoneTag = &quot;&quot;</span>
<span class="line">DisableUpgradeMigration = false</span>
<span class="line">UpgradeVersionTag = &quot;&quot;</span>
</pre></td></tr></table></figure>
<h4 id="set-config"><a href="#set-config" class="headerlink" title="set-config"></a>set-config</h4><p>修改当前的自动驾驶仪配置</p>
<h3 id="raft"><a href="#raft" class="headerlink" title="raft"></a>raft</h3><h4 id="list-peers"><a href="#list-peers" class="headerlink" title="list-peers"></a>list-peers</h4><p>Display the current Raft peer configuration</p>
<h4 id="remove-peer"><a href="#remove-peer" class="headerlink" title="remove-peer"></a>remove-peer</h4><p>Remove a Consul server from the Raft configuration</p>
<h2 id="reload"><a href="#reload" class="headerlink" title="reload"></a>reload</h2><p>该命令的作用是重新加载配置文件，以此来替代<code>SIGHUP</code>信号。</p>
<h2 id="rtt"><a href="#rtt" class="headerlink" title="rtt"></a>rtt</h2><p><code>rtt</code>命令的用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Usage: consul rtt [options] node1 [node2]</span>
</pre></td></tr></table></figure>
<p>该命令的作用是：预估2个结点间一次通信的耗时状况的。至少需要提供一个节点名称。如果只提供了一个节点的名称，<br>则第二个结点的名称默认就是agent所在的结点名称。</p>
<blockquote>
<p>需要注意的是：这些节点名称和<code>consul members</code>输出中的结点名称相同，不是一个IP地址。</p>
</blockquote>
<p>默认情况下，都是假设2个节点在同一个数据中心内，并使用局域网的网络协调器。如果有<code>-wan</code>参数，那么使用格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">consul rtt -wan bogon.dc1</span>
<span class="line">Estimated bogon.dc1 &lt;-&gt; bogon.dc1 rtt: 0.020 ms (using WAN coordinates)</span>
</pre></td></tr></table></figure>
<p>节点的名称后面需要添加所属数据中心的名称。</p>
<p>该命令不能用来测量局域网和广域网2个节点间的网络通信耗时，因为他们位于不同的<code>gossip</code>域。</p>
<p>该命令可以使用的参数如下：</p>
<h3 id="ca-file"><a href="#ca-file" class="headerlink" title="ca-file"></a>ca-file</h3><p>指定TLS通信是使用的<code>CA</code>文件。 该选项的值也可以通过环境变量<code>CONSUL_CACERT</code>的值获取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-ca-file=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="ca-path"><a href="#ca-path" class="headerlink" title="ca-path"></a>ca-path</h3><p>指定TLS通信是使用的<code>CA</code>文件所在的目录。 该选项的值也可以通过环境变量<code>CONSUL_CAPATH</code>的值获取。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-ca-path=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="client-cert"><a href="#client-cert" class="headerlink" title="client-cert"></a>client-cert</h3><p>指定在使用TLS进行通信时，并且启用了<code>verify_incoming</code>功能时，客户端所使用的证书文件，<br>也可以通过环境变量<code>CONSUL_CLIENT_CERT</code> 来指定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-client-cert=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="client-key"><a href="#client-key" class="headerlink" title="client-key"></a>client-key</h3><p>指定在使用TLS进行通信时，并且启用了<code>verify_incoming</code>功能时，客户端所使用的key文件。也可以通过环境变量<code>CONSUL_CLIENT_KEY</code> 来指定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-client-key=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="http-addr"><a href="#http-addr" class="headerlink" title="http-addr"></a>http-addr</h3><p>指定提供http服务的Consul agent 的IP地址和端口号。也可以通过环境变量<code>CONSUL_HTTP_ADDR</code>的值来指定。</p>
<p>默认的值是：<code>http://127.0.0.1:8500</code>。 也可以通过设置环境变量<code>CONSUL_HTTP_SSL=true</code>来启用https进行通信。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-http-addr=&lt;address&gt;</span>
</pre></td></tr></table></figure>
<h3 id="tls-server-name"><a href="#tls-server-name" class="headerlink" title="tls-server-name"></a>tls-server-name</h3><p>指定当通过TLS进行通信时作为<code>SNI</code>主机的服务器名称。也可以通过<code>CONSUL_TLS_SERVER_NAME</code>环境变量来指定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-tls-server-name=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-token=&lt;value&gt;</span>
</pre></td></tr></table></figure>
<p>指定请求中使用的ACL token的值。也可以通过环境变量<code>CONSUL_HTTP_TOKEN</code>来指定。如果没有指定，则使用通过http 访问Consul agent 所使用的token值。</p>
<h3 id="wan-2"><a href="#wan-2" class="headerlink" title="wan"></a>wan</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">-wan</span>
</pre></td></tr></table></figure>
<p>使用广域网协调器来替代局域网协调器。</p>
<h2 id="snapshot"><a href="#snapshot" class="headerlink" title="snapshot"></a>snapshot</h2><p>该命令包含一些子命令，作用是保存，重新加载 或在故障恢复时检查 Consul Server 的状态。</p>
<p>这些操作都是原子性的，保存当前时间点 包括<code>键/值条目</code>，<code>服务目录</code>，<code>准备好的查询</code>，<code>会话和ACL</code>信息的快照。</p>
<p>如果启用了<code>ACLS</code>功能，那么在使用这些子命令时，需要提供管理token来进行快照的操作。</p>
<h3 id="创建一个快照"><a href="#创建一个快照" class="headerlink" title="创建一个快照"></a>创建一个快照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">$ consul snapshot save backup.snap</span>
<span class="line">```      </span>
<span class="line"></span>
<span class="line">### 从快照中恢复</span>
</pre></td></tr></table></figure>
<p>$ consul snapshot restore backup.snap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line">先启动一个没有任何数据的agent,然后执行该命令，加载指定的快照信息。</span>
<span class="line"></span>
<span class="line">### 检查快照信息</span>
</pre></td></tr></table></figure></p>
<p>$ consul snapshot inspect backup.snap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line">输出：</span>
</pre></td></tr></table></figure></p>
<p>leo@bogon consul snapshot inspect a.snap<br>ID           2-110-1532832078752<br>Size         1175<br>Index        110<br>Term         2<br>Version      1<br>```</p>
<p>可以允许一个Consul agent, 每小时保存一次快照信息。 不过该功能只有企业级版本才有。</p>
<h2 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h2><p>校验consul配置文件，或配置文件目录下配置文件的正确性</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>打印consul的版本</p>
<h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;consul-命令用法&quot;&gt;&lt;a href=&quot;#consul-命令用法&quot; class=&quot;headerlink&quot; title=&quot;consul 命令用法&quot;&gt;&lt;/a&gt;consul 命令用法&lt;/h2&gt;&lt;p&gt;安装完consul后，通过在控制台直接实现&lt;code&gt;consul&lt;/code&gt;命令了解consul命令行的用法，输出如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: consul [--version] [--help] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;Available commands are:&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;agent          Runs a Consul agent&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;catalog        Interact with the catalog&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;event          Fire a new event&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;exec           Executes a command on Consul nodes&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;force-leave    Forces a member of the cluster to enter the &amp;quot;left&amp;quot; state&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;info           Provides debugging information for operators.&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;join           Tell Consul agent to join cluster&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;keygen         Generates a new encryption key&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;keyring        Manages gossip layer encryption keys&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;kv             Interact with the key-value store&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;leave          Gracefully leaves the Consul cluster and shuts down&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;lock           Execute a command holding a lock&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;maint          Controls node or service maintenance mode&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;members        Lists the members of a Consul cluster&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;monitor        Stream logs from a Consul agent&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;operator       Provides cluster-level tools for Consul operators&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;reload         Triggers the agent to reload configuration files&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;rtt            Estimates network round trip time between nodes&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;snapshot       Saves, restores and inspects snapshots of Consul server state&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;validate       Validate config files/directories&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;version        Prints the Consul version&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;watch          Watch for changes in Consul&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上所示， consul提供的命令很多，下面就逐个学习下每个命令的作用和用法。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://leokongwq.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="consul" scheme="https://leokongwq.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>servlet如何正确处理302跳转</title>
    <link href="https://leokongwq.github.io/2018/07/15/how-to-process-302-in-j2ee-correctly.html"/>
    <id>https://leokongwq.github.io/2018/07/15/how-to-process-302-in-j2ee-correctly.html</id>
    <published>2018-07-15T02:08:31.000Z</published>
    <updated>2018-11-03T04:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>某天，将线上的resin容器替换为tomcat．　过了一段时间发现有个接口处理失败，提示异常．查看应用日志发现如下的日志：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed</span>
<span class="line">        at org.apache.jsp.WEB_002dINF.content.order.page.error_jsp._jspService(error_jsp.java:<span class="number">293</span>) ~[na:na]</span>
<span class="line">        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:<span class="number">70</span>) ~[jasper.jar:<span class="number">8.5</span>.12]</span>
<span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">742</span>) ~[servlet-api.jar:na]</span>
<span class="line">        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:<span class="number">443</span>) ~[jasper.jar:<span class="number">8.5</span>.12]</span>
<span class="line">        ... <span class="number">38</span> common frames omitted</span>
</pre></td></tr></table></figure>
<p>查询相关接口的代码发现，代码对<code>302</code>跳转的逻辑处理有问题，具体如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Actions</span>(value = &#123;</span>
<span class="line">            <span class="meta">@Action</span>(value = <span class="string">"dopay"</span>, results = &#123;<span class="meta">@Result</span>(name = ERROR, location = <span class="string">"/WEB-INF/content/order/page/error.jsp"</span>)&#125;),</span>
<span class="line">    &#125;)</span>
<span class="line">    <span class="meta">@ActionMonitor</span>(value = <span class="string">"pay.doPay"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPay</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="comment">// 省略代码</span></span>
<span class="line">        String _result = dealWapClient(params);</span>
<span class="line">        <span class="comment">// 问题之所在，　当dealWapClient处理成功时，返回值就是null</span></span>
<span class="line">        <span class="comment">// 此时，返回ERROR， Struts2会继续执行，渲染错误页面(客户端就能看到错误页面了)</span></span>
<span class="line">        <span class="comment">// tomcat 能看到，　resin下看不到，原因下面分析</span></span>
<span class="line">        <span class="keyword">if</span> (_result == <span class="keyword">null</span>) &#123;</span>
<span class="line">            <span class="keyword">return</span> ERROR;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="comment">// 省略代码</span></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dealWapClient</span><span class="params">(Map&lt;String, String&gt; params)</span> </span>&#123;</span>
<span class="line">        <span class="comment">// 省略代码</span></span>
<span class="line">        redirect(returnParams, returnUrl);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span>
<span class="line">        <span class="comment">// 省略代码</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="302跳转解释"><a href="#302跳转解释" class="headerlink" title="302跳转解释"></a>302跳转解释</h3><p>关于302临时跳转的详细解释可以参考<a href="https://zh.wikipedia.org/wiki/HTTP_302" target="_blank" rel="external">HTTP_302</a>.<br>也可以参考RFC规范<a href="http://www.ietf.org/rfc/rfc3986.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc3986.txt</a><br>再次就不再赘述．</p>
<h3 id="servlet-api对302处理的规定"><a href="#servlet-api对302处理的规定" class="headerlink" title="servlet　api对302处理的规定"></a>servlet　api对302处理的规定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line">* Sends a temporary redirect response to the client using the</span>
<span class="line">* specified redirect location URL and clears the buffer. The buffer will</span>
<span class="line">* be replaced with the data set by this method. Calling this method sets the</span>
<span class="line">* status code to &#123;<span class="doctag">@link</span> #SC_FOUND&#125; 302 (Found).</span>
<span class="line">* This method can accept relative URLs;the servlet container must convert</span>
<span class="line">* the relative URL to an absolute URL</span>
<span class="line">* before sending the response to the client. If the location is relative </span>
<span class="line">* without a leading '/' the container interprets it as relative to</span>
<span class="line">* the current request URI. If the location is relative with a leading</span>
<span class="line">* '/' the container interprets it as relative to the servlet container root.</span>
<span class="line">* If the location is relative with two leading '/' the container interprets</span>
<span class="line">* it as a network-path reference (see</span>
<span class="line">* &lt;a href="http://www.ietf.org/rfc/rfc3986.txt"&gt;</span>
<span class="line">* RFC 3986: Uniform Resource Identifier (URI): Generic Syntax&lt;/a&gt;, section 4.2</span>
<span class="line">* &amp;quot;Relative Reference&amp;quot;).</span>
<span class="line">*</span>
<span class="line">* &lt;p&gt;If the response has already been committed, this method throws </span>
<span class="line">* an IllegalStateException.</span>
<span class="line">* After using this method, the response should be considered</span>
<span class="line">* to be committed and should not be written to.</span>
<span class="line">*</span>
<span class="line">* <span class="doctag">@param</span>		location	the redirect location URL</span>
<span class="line">* <span class="doctag">@exception</span>	IOException	If an input or output exception occurs</span>
<span class="line">* <span class="doctag">@exception</span>	IllegalStateException	If the response was committed or</span>
<span class="line">*              if a partial URL is given and cannot be converted into a valid URL</span>
<span class="line">*/</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String location)</span> <span class="keyword">throws</span> IOException</span>;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>翻译过来意思就是： 通过该方法告诉客户端临时重定向到一个指定的URL，并且清空缓存区，之前还没有发送到客户端的数据．<br>并使用该方法设置的数据填充缓存区．<br>该方法设置http响应的状态码为302.<br>如果重定向的地址为相对地址，该方法内部会将相对地址转为绝对地址．　<br>如果response已经committed，再次调用该方法会抛出<code>IllegalStateException</code>异常.<br>调用该方法后，　response对象的状态应该是<code>committed</code>，并且不应该再写入数据．</p>
</blockquote>
<p>servlet-api已经详细说明了该方法的用法和需要注意的事项．但是不同的servlet容器在实现机制上可能不尽相同．<br>项目中发现的问题主要有两个原因：</p>
<ol>
<li>代码有bug．这个是主要原因．</li>
<li>servlet容器实现不同．</li>
</ol>
<p>下面就分析下该方法在resin和tomcat中实现的细节：</p>
<h3 id="resin对302的处理"><a href="#resin对302的处理" class="headerlink" title="resin对302的处理"></a>resin对302的处理</h3><p>在resin中，<code>HttpServletResponse</code>接口的实现类是<code>HttpServletResponseImpl</code>．代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
</pre></td><td class="code"><pre><span class="line">abstract public class AbstractCauchoResponse implements CauchoResponse &#123;</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">public interface CauchoResponse extends HttpServletResponse &#123;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">public final class HttpServletResponseImpl extends AbstractCauchoResponse</span>
<span class="line">  implements CauchoResponse</span>
<span class="line">&#123;</span>
<span class="line">    /**</span>
<span class="line">   * Sends a redirect to the browser.  If the URL is relative, it gets</span>
<span class="line">   * combined with the current url.</span>
<span class="line">   *</span>
<span class="line">   * @param url the possibly relative url to send to the browser</span>
<span class="line">   */</span>
<span class="line">  @Override</span>
<span class="line">  public void sendRedirect(String url)</span>
<span class="line">    throws IOException</span>
<span class="line">  &#123;</span>
<span class="line">    if (url == null)</span>
<span class="line">      throw new NullPointerException();</span>
<span class="line"></span>
<span class="line">    if (isCommitted())</span>
<span class="line">      throw new IllegalStateException(L.l("Can't sendRedirect() after data has committed to the client."));</span>
<span class="line"></span>
<span class="line">    _responseStream.clearBuffer();</span>
<span class="line"></span>
<span class="line">    // server/10c4</span>
<span class="line">    // reset();</span>
<span class="line">    resetBuffer();</span>
<span class="line"></span>
<span class="line">    setStatus(SC_MOVED_TEMPORARILY);</span>
<span class="line"></span>
<span class="line">    String encoding = getCharacterEncoding();</span>
<span class="line">    boolean isLatin1 = "iso-8859-1".equals(encoding);</span>
<span class="line">    </span>
<span class="line">    String path = encodeAbsoluteRedirect(url);</span>
<span class="line"></span>
<span class="line">    setHeader("Location", path);</span>
<span class="line">    </span>
<span class="line">    if (isLatin1)</span>
<span class="line">      setHeader("Content-Type", "text/html; charset=iso-8859-1");</span>
<span class="line">    else</span>
<span class="line">      setHeader("Content-Type", "text/html; charset=utf-8");</span>
<span class="line"></span>
<span class="line">    String msg = "The URL has moved &lt;a href=\"" + path + "\"&gt;here&lt;/a&gt;";</span>
<span class="line"></span>
<span class="line">    // The data is required for some WAP devices that can't handle an</span>
<span class="line">    // empty response.</span>
<span class="line">    if (_writer != null) &#123;</span>
<span class="line">      _writer.println(msg);</span>
<span class="line">    &#125;</span>
<span class="line">    else &#123;</span>
<span class="line">      ServletOutputStream out = getOutputStream();</span>
<span class="line">      out.println(msg);</span>
<span class="line">    &#125;</span>
<span class="line">    // closeConnection();</span>
<span class="line"></span>
<span class="line">    _request.saveSession(); // #503</span>
<span class="line">    // 非常重要，这个就是resion和tomcat的不同之处．</span>
<span class="line">    // 已经关闭了，肯定不能再写入数据．</span>
<span class="line">    close();</span>
<span class="line">  &#125;</span>
<span class="line">   @Override</span>
<span class="line">  public void close()</span>
<span class="line">    throws IOException</span>
<span class="line">  &#123;</span>
<span class="line">    // tck - jsp include</span>
<span class="line">    AbstractHttpResponse response = _response;</span>
<span class="line">    </span>
<span class="line">    if (response != null) &#123;</span>
<span class="line">      response.close();</span>
<span class="line">    &#125;</span>
<span class="line">  &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line">resin处理`302`方式其实非常简单，步骤如下：</span>
<span class="line"></span>
<span class="line">1. 清空缓存区内容并进行重置</span>
<span class="line">2. 设置302状态码</span>
<span class="line">3. 设置`Location`　和　`Content-Type` 响应头</span>
<span class="line">4. 写响应体数据</span>
<span class="line">5. 保存session</span>
<span class="line">6. 关闭连接</span>
<span class="line"></span>
<span class="line">整个处理流程非常简单明了．</span>
<span class="line"></span>
<span class="line">### tomcat对302的处理</span>
<span class="line"></span>
<span class="line">在tomcat中，`HttpServletResponse`接口的实现类是`ResponseFacade`．该类指示一个Facade,</span>
<span class="line">代码如下：</span>
<span class="line"></span>
<span class="line">```java ResponseFacade</span>
<span class="line">public class ResponseFacade implements HttpServletResponse &#123;</span>
<span class="line">    @Override</span>
<span class="line">    public void sendRedirect(String location)</span>
<span class="line">        throws IOException &#123;</span>
<span class="line"></span>
<span class="line">        if (isCommitted()) &#123;</span>
<span class="line">            throw new IllegalStateException</span>
<span class="line">                (sm.getString("coyoteResponse.sendRedirect.ise"));</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        response.setAppCommitted(true);</span>
<span class="line"></span>
<span class="line">        response.sendRedirect(location);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>真正的处理由<code>Response</code>来进行</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> <span class="keyword">implements</span> <span class="title">HttpServletResponse</span> </span>&#123;</span>
<span class="line">    <span class="comment">/**</span>
<span class="line">    * Send a temporary redirect to the specified redirect location URL.</span>
<span class="line">    *</span>
<span class="line">    * <span class="doctag">@param</span> location Location URL to redirect to</span>
<span class="line">    *</span>
<span class="line">    * <span class="doctag">@exception</span> IllegalStateException if this response has</span>
<span class="line">    *  already been committed</span>
<span class="line">    * <span class="doctag">@exception</span> IOException if an input/output error occurs</span>
<span class="line">    */</span></span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String location)</span> <span class="keyword">throws</span> IOException </span>&#123;</span>
<span class="line">        sendRedirect(location, SC_FOUND);</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * Internal method that allows a redirect to be sent with a status other</span>
<span class="line">     * than &#123;<span class="doctag">@link</span> HttpServletResponse#SC_FOUND&#125; (302). No attempt is made to</span>
<span class="line">     * validate the status code.</span>
<span class="line">     *</span>
<span class="line">     * <span class="doctag">@param</span> location Location URL to redirect to</span>
<span class="line">     * <span class="doctag">@param</span> status HTTP status code that will be sent</span>
<span class="line">     * <span class="doctag">@throws</span> IOException an IO exception occurred</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String location, <span class="keyword">int</span> status)</span> <span class="keyword">throws</span> IOException </span>&#123;</span>
<span class="line">        <span class="keyword">if</span> (isCommitted()) &#123;</span>
<span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">"coyoteResponse.sendRedirect.ise"</span>));</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Ignore any call from an included servlet</span></span>
<span class="line">        <span class="keyword">if</span> (included) &#123;</span>
<span class="line">            <span class="keyword">return</span>;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 清空缓存区内容并进行重置</span></span>
<span class="line">        resetBuffer(<span class="keyword">true</span>);</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Generate a temporary redirect to the specified location</span></span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            String locationUri;</span>
<span class="line">            <span class="comment">// Relative redirects require HTTP/1.1</span></span>
<span class="line">            <span class="keyword">if</span> (getRequest().getCoyoteRequest().getSupportsRelativeRedirects() &amp;&amp;</span>
<span class="line">                    getContext().getUseRelativeRedirects()) &#123;</span>
<span class="line">                locationUri = location;</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                locationUri = toAbsolute(location);</span>
<span class="line">            &#125;</span>
<span class="line">            setStatus(status);</span>
<span class="line">            setHeader(<span class="string">"Location"</span>, locationUri);</span>
<span class="line">            <span class="comment">//　这里有个小魔法</span></span>
<span class="line">            <span class="keyword">if</span> (getContext().getSendRedirectBody()) &#123;</span>
<span class="line">                PrintWriter writer = getWriter();</span>
<span class="line">                writer.print(sm.getString(<span class="string">"coyoteResponse.sendRedirect.note"</span>,</span>
<span class="line">                        Escape.htmlElementContent(locationUri)));</span>
<span class="line">                flushBuffer();</span>
<span class="line">            &#125;</span>
<span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span>
<span class="line">            log.warn(sm.getString(<span class="string">"response.sendRedirectFail"</span>, location), e);</span>
<span class="line">            setStatus(SC_NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// 设置缓存区的suspended标志位　</span></span>
<span class="line">        <span class="comment">// 从应用视图的角度看，该响应已经结束了． 但其实连接并没有关闭.</span></span>
<span class="line">        setSuspended(<span class="keyword">true</span>);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>tomcat处理<code>302</code>步骤如下：</p>
<ol>
<li>清空缓存区内容并进行重置</li>
<li>设置302状态码</li>
<li>设置<code>Location</code> 响应头</li>
<li>写响应体数据</li>
<li>保存session</li>
<li>关闭连接</li>
</ol>
<h4 id="tomcat-context配置"><a href="#tomcat-context配置" class="headerlink" title="tomcat context配置"></a>tomcat context配置</h4><p>详细配置项参考:<a href="https://tomcat.apache.org/tomcat-7.0-doc/config/context.html" target="_blank" rel="external">https://tomcat.apache.org/tomcat-7.0-doc/config/context.html</a></p>
<p>其中和302处理相关的一个配置项为:<code>sendRedirectBody</code>,文档解释如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">If <span class="keyword">true</span>, redirect responses will include a <span class="keyword">short</span> response body that includes details of the redirect as recommended by RFC <span class="number">2616</span>. This is disabled by <span class="keyword">default</span> since including a response body may cause problems <span class="keyword">for</span> some application component such as compression filters.</span>
</pre></td></tr></table></figure>
<p>根据<a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="external">RFC 2616</a>规范，302跳转是可以带有响应体数据的(resin就按规范进行了实现).　tomcat默认处理是不带的，原因是可能与其它组件冲突，例如压缩组件.</p>
<p>如果将<code>sendRedirectBody</code>的值设为true,则tomcat在处理302时，在写完响应体数据后，会执行缓存区的刷新，客户端能收到对应的响应头数据，完成跳转，且不会应为后续继续写数据导致客户端不能正常跳转.</p>
<p>因为默认是false,导致302响应头数据没有及时发送给客户端，在<code>sendRedirect</code>后如果应用发生了异常，则已经设置了的302响应码会被500所替代，客户端不能正常跳转．</p>
<p>###　tomcat　<code>sendRedirect</code>后不能跳转的逻辑分析</p>
<p>tomcat　处理请求的流程一部分流程如下：</p>
<p><code>StandardHostValve</code> -&gt; <code>StandardContextValve</code> -&gt; <code>StandardWrapperValve</code></p>
<p>请求入口由<code>StandardWrapperValve</code>处理，　结束还是需要<code>StandardHostValve</code>来处理．</p>
<figure class="highlight java"><figcaption><span>StandardWrapperValve</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span>
<span class="line">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">// Allocate a servlet instance to process this request</span></span>
<span class="line">    <span class="keyword">try</span> &#123;</span>
<span class="line">        <span class="keyword">if</span> (!unavailable) &#123;</span>
<span class="line">            servlet = wrapper.allocate();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125; <span class="keyword">catch</span> (UnavailableException e) &#123;</span>
<span class="line">       </span>
<span class="line">    &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span>
<span class="line">        </span>
<span class="line">        exception(request, response, e);</span>
<span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span>
<span class="line">        exception(request, response, e);</span>
<span class="line">        servlet = <span class="keyword">null</span>;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="comment">//　当请求发送异常时, 已经设置的302状态码此时变为500</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Request request, Response response,</span>
<span class="line">                           Throwable exception)</span> </span>&#123;</span>
<span class="line">        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, exception);</span>
<span class="line">        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);</span>
<span class="line">        response.setError();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>StandardHostValve　处理逻辑</p>
<figure class="highlight java"><figcaption><span>StandardHostValve</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span>
<span class="line">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">try</span> &#123;</span>
<span class="line">        <span class="comment">// 省略代码</span></span>
<span class="line">        <span class="keyword">try</span> &#123;</span>
<span class="line">            <span class="keyword">if</span> (!asyncAtStart || asyncDispatching) &#123;</span>
<span class="line">                context.getPipeline().getFirst().invoke(request, response);</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                <span class="comment">// Make sure this request/response is here because an error</span></span>
<span class="line">                <span class="comment">// report is required.</span></span>
<span class="line">                <span class="keyword">if</span> (!response.isErrorReportRequired()) &#123;</span>
<span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">"standardHost.asyncStateError"</span>));</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span>
<span class="line">            ExceptionUtils.handleThrowable(t);</span>
<span class="line">            container.getLogger().error(<span class="string">"Exception Processing "</span> + request.getRequestURI(), t);</span>
<span class="line">            <span class="comment">// If a new error occurred while trying to report a previous</span></span>
<span class="line">            <span class="comment">// error allow the original error to be reported.</span></span>
<span class="line">            <span class="keyword">if</span> (!response.isErrorReportRequired()) &#123;</span>
<span class="line">                request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span>
<span class="line">                throwable(request, response, t);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="comment">// 在sendRedirect方法设置的suspended标志位此时又被置为false</span></span>
<span class="line">        <span class="comment">// 也就是说　response由可以使用了．这就是resin和tomcat设计实现的不同        </span></span>
<span class="line">        <span class="comment">// Now that the request/response pair is back under container</span></span>
<span class="line">        <span class="comment">// control lift the suspension so that the error handling can</span></span>
<span class="line">        <span class="comment">// complete and/or the container can flush any remaining data</span></span>
<span class="line">        response.setSuspended(<span class="keyword">false</span>);</span>
<span class="line"></span>
<span class="line">        Throwable t = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Protect against NPEs if the context was destroyed during a</span></span>
<span class="line">        <span class="comment">// long running request.</span></span>
<span class="line">        <span class="keyword">if</span> (!context.getState().isAvailable()) &#123;</span>
<span class="line">            <span class="keyword">return</span>;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="comment">// Look for (and render if found) an application level error page</span></span>
<span class="line">        <span class="keyword">if</span> (response.isErrorReportRequired()) &#123;</span>
<span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span>
<span class="line">                throwable(request, response, t);</span>
<span class="line">            &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">                status(request, response);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        <span class="keyword">if</span> (!request.isAsync() &amp;&amp; !asyncAtStart) &#123;</span>
<span class="line">            context.fireRequestDestroyEvent(request.getRequest());</span>
<span class="line">        &#125;</span>
<span class="line">    &#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">        <span class="comment">// Access a session (if present) to update last accessed time, based</span></span>
<span class="line">        <span class="comment">// on a strict interpretation of the specification</span></span>
<span class="line">        <span class="keyword">if</span> (ACCESS_SESSION) &#123;</span>
<span class="line">            request.getSession(<span class="keyword">false</span>);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        context.unbind(Globals.IS_SECURITY_ENABLED, MY_CLASSLOADER);</span>
<span class="line">    &#125;        </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>线上替换应用组件，尤其是底层的应用软件需要非常注意．不可全量替换．一定要逐步替换．虽然已经在测试环境，线上灰度替换了一台机器，<br>但是因为访问量小，导致问题发现的比较晚，直至大批量替换才发现问题．　还有就是：同一个规范，但不同的实现细节还是有差异．</li>
<li>应用开发一定需要遵守API规范，否则会导致奇怪问题的发生．好多人总是说遇到的问题多，踩坑多，那是因为你从来不仔细阅读相关api规范文档或官方文档．不遵守规范导致的问题能叫坑吗？</li>
<li>在使用任何一项技术时，优先查询官方文档．不要随手google或baidu．　实话说，网上的文章质量参差不齐，难免找到理解错误的文档．</li>
<li>养成阅读源代码的习惯，好处不言而喻．如果３年前没有读过tomcat6的源代码，今天排查起来问题就非常困难了.</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zh.wikipedia.org/wiki/HTTP_302" target="_blank" rel="external">https://zh.wikipedia.org/wiki/HTTP_302</a><br><a href="https://tools.ietf.org/html/rfc2616#section-10.3.3" target="_blank" rel="external">https://tools.ietf.org/html/rfc2616#section-10.3.3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;某天，将线上的resin容器替换为tomcat．　过了一段时间发现有个接口处理失败，提示异常．查看应用日志发现如下的日志：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Caused by: javax.servlet.ServletException: java.lang.IllegalStateException: Cannot create a session after the response has been committed&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;        at org.apache.jsp.WEB_002dINF.content.order.page.error_jsp._jspService(error_jsp.java:&lt;span class=&quot;number&quot;&gt;293&lt;/span&gt;) ~[na:na]&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;        at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:&lt;span class=&quot;number&quot;&gt;70&lt;/span&gt;) ~[jasper.jar:&lt;span class=&quot;number&quot;&gt;8.5&lt;/span&gt;.12]&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;        at javax.servlet.http.HttpServlet.service(HttpServlet.java:&lt;span class=&quot;number&quot;&gt;742&lt;/span&gt;) ~[servlet-api.jar:na]&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;        at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:&lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;) ~[jasper.jar:&lt;span class=&quot;number&quot;&gt;8.5&lt;/span&gt;.12]&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;        ... &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt; common frames omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查询相关接口的代码发现，代码对&lt;code&gt;302&lt;/code&gt;跳转的逻辑处理有问题，具体如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="https://leokongwq.github.io/tags/web/"/>
    
      <category term="tomcat" scheme="https://leokongwq.github.io/tags/tomcat/"/>
    
      <category term="resin" scheme="https://leokongwq.github.io/tags/resin/"/>
    
  </entry>
  
  <entry>
    <title>consul之acl配置</title>
    <link href="https://leokongwq.github.io/2018/07/08/consul-acl.html"/>
    <id>https://leokongwq.github.io/2018/07/08/consul-acl.html</id>
    <published>2018-07-08T15:08:31.000Z</published>
    <updated>2018-11-03T04:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><h3 id="acl-datacenter"><a href="#acl-datacenter" class="headerlink" title="acl_datacenter"></a>acl_datacenter</h3><p>该配置项指定了对ACL信息具有权威性的数据中心。 必须提供它才能启用ACL。 所有Server实例和数据中心必须就ACL数据中心达成一致。<br>必须在整个集群的Server节点上设置该配置项。但是针对API来说，如果要使客户端的请求能被正确转发，那么也需要在客户端节点设置。<br>在Consul 0.8及更高版本中，还可以启用代理级别的ACL。 有关详细信息，请参阅<a href="https://www.consul.io/docs/guides/acl.html" target="_blank" rel="external">ACL指南</a>。</p>
<h3 id="acl-default-policy"><a href="#acl-default-policy" class="headerlink" title="acl_default_policy"></a>acl_default_policy</h3><p>该配置项可选的值为<code>allow</code>和<code>deny</code>。默认值为’allow’。默认的策略控制token在没有匹配的规则时的行为。<br>在<code>allow</code>模式下，ACL规则是一个黑名单：任何没有被禁止的操作都是可以执行的。<br>在<code>deny</code>模式下，ACL规则是一个白名单，任何没有明确指定的操作都是被禁止的。</p>
<blockquote>
<p>注意：该配置项只有在配置了<code>acl_datacenter</code>后才起作用</p>
</blockquote>
<a id="more"></a>
<h3 id="acl-down-policy"><a href="#acl-down-policy" class="headerlink" title="acl_down_policy"></a>acl_down_policy</h3><p>该配置项可选的值为<code>allow</code>，<code>deny</code>或<code>extend-cache</code>，　默认值是<code>extend-cache</code>。假如不能从<code>acl_datacenter</code>或<code>Leader</code>节点获取一个token的acl信息，则该配置项指定的策略被使用。</p>
<ul>
<li><code>allow</code>模式下，所有的操作都允许。 </li>
<li><code>deny</code>模式下，所有的操作都被禁止。 </li>
<li><code>extend-cache</code>模式下,使用缓存的 ACL规则并忽略这些规则的过期时间。如果一个不可缓存的ＡＣＬ的规则被使用，则当作<code>deny</code>策略来处理。</li>
</ul>
<h3 id="acl-master-token"><a href="#acl-master-token" class="headerlink" title="acl_master_token"></a>acl_master_token</h3><p>该配置项只能用在<code>acl_datacenter</code>中的Server节点上。 如果该令牌不存在，则将使用管理级权限创建该令牌。 它允许操作员使用众所周知的令牌ID来引导ACL系统。</p>
<p>仅当服务器获得集群领导时才安装acl_master_token。 如果要安装或更改acl_master_token，请在所有服务器的配置中为acl_master_token设置新值。 完成此操作后，重新启动当前领导者以强制进行领导者选举。 如果未提供acl_master_token，则服务器不会创建主令牌。 提供值时，它可以是任何字符串值。 使用UUID可以确保它看起来与其他令牌相同，但并不是绝对必要的。</p>
<h3 id="acl-agent-master-token"><a href="#acl-agent-master-token" class="headerlink" title="acl_agent_master_token"></a>acl_agent_master_token</h3><p>用作特殊访问 token，在配置它的每个 agent 上具有 agent ACL 策略 write 特权。 只有当 Consul server 不可用于解析 ACL token 时， 此 tokone 才应由运维人员在服务中断期间使用。 应用程序应在正常操作期间使用常规 ACL token。该配置项从版本<code>0.7.2</code>开始使用，并且只有当配置项<code>acl_enforce_version_8</code>设置为true时才起作用。更多信息参考<a href="https://www.consul.io/docs/guides/acl.html#acl-agent-master-token" target="_blank" rel="external"> ACL Agent Master Token </a></p>
<h3 id="acl-agent-token"><a href="#acl-agent-token" class="headerlink" title="acl_agent_token"></a>acl_agent_token</h3><p>由客户端和<code>Server</code>节点执行内部操作使用。如果没有设置该配置项的值，则<code>acl_token</code>配置项的被使用。该配置项从版本<code>0.7.2</code>开始使用。</p>
<p>此令牌必须至少具有对其将注册的节点名称的写访问权，以便设置目录中的任何节点级信息，例如元数据或节点的标记地址。 使用此令牌还有其他地方，请参阅<a href="https://www.consul.io/docs/guides/acl.html#acl-agent-token" target="_blank" rel="external">ACL代理令牌</a>以获取更多详细信息。</p>
<h3 id="acl-enforce-version-8"><a href="#acl-enforce-version-8" class="headerlink" title="acl_enforce_version_8"></a>acl_enforce_version_8</h3><p>用于客户端和服务器，以确定是否应在Consul 0.8之前预览新的ACL策略。 在Consul 0.7.2中添加，在0.8之前的Consul版本中默认为false，在Consul 0.8及更高版本中默认为true。 通过在实施开始之前允许策略到位，这有助于简化向新ACL功能的过渡。 有关详细信息，请参阅ACL指南。</p>
<h3 id="acl-replication-token"><a href="#acl-replication-token" class="headerlink" title="acl_replication_token"></a>acl_replication_token</h3><p>仅用于运行Consul 0.7或更高版本的<code>acl_datacenter</code>之外的服务器。 提供时，这将启用使用此令牌进行ACL复制，以检索ACL并将其复制到非权威的本地数据中心。 在Consul 0.9.1和更高版本中，您可以使用<code>enable_acl_replication</code>启用ACL复制，然后稍后使用每个服务器上的代理令牌API设置令牌。 如果在配置文件中设置了<code>acl_replication_token</code> ，它将自动将<code>enable_acl_replication</code>设置为true以实现向后兼容性。</p>
<p>如果存在影响权威数据中心的分区或其他中断，并且<code>acl_down_policy</code>设置为<code>extend-cache</code>，则可以在中断期间使用复制的ACL集解析不在缓存中的令牌。 有关更多详细信息，请参阅<a href="https://www.consul.io/docs/guides/acl.html#replication" target="_blank" rel="external">ACL指南复制部分</a>。</p>
<h3 id="acl-token"><a href="#acl-token" class="headerlink" title="acl_token"></a>acl_token</h3><p>如果设置了该配置项，代理将在向Consul服务器发出请求时使用此令牌。 客户端可以通过提供<code>？token</code>查询参数，基于每个请求覆盖此令牌。 如果未提供，则使用映射到“匿名”ACL策略的空标记。</p>
<h3 id="acl-ttl"><a href="#acl-ttl" class="headerlink" title="acl_ttl"></a>acl_ttl</h3><p>用于控制ACL缓存的过期时间。 默认是30秒。 此设置会对性能产生重大影响：减少它会导致更频繁的刷新，增加它会减少刷新次数。 但是，由于缓存未被主动失效，因此ACL策略可能会过时到TTL值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h2 id=&quot;配置项&quot;&gt;&lt;a href=&quot;#配置项&quot; class=&quot;headerlink&quot; title=&quot;配置项&quot;&gt;&lt;/a&gt;配置项&lt;/h2&gt;&lt;h3 id=&quot;acl-datacenter&quot;&gt;&lt;a href=&quot;#acl-datacenter&quot; class=&quot;headerlink&quot; title=&quot;acl_datacenter&quot;&gt;&lt;/a&gt;acl_datacenter&lt;/h3&gt;&lt;p&gt;该配置项指定了对ACL信息具有权威性的数据中心。 必须提供它才能启用ACL。 所有Server实例和数据中心必须就ACL数据中心达成一致。&lt;br&gt;必须在整个集群的Server节点上设置该配置项。但是针对API来说，如果要使客户端的请求能被正确转发，那么也需要在客户端节点设置。&lt;br&gt;在Consul 0.8及更高版本中，还可以启用代理级别的ACL。 有关详细信息，请参阅&lt;a href=&quot;https://www.consul.io/docs/guides/acl.html&quot;&gt;ACL指南&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;acl-default-policy&quot;&gt;&lt;a href=&quot;#acl-default-policy&quot; class=&quot;headerlink&quot; title=&quot;acl_default_policy&quot;&gt;&lt;/a&gt;acl_default_policy&lt;/h3&gt;&lt;p&gt;该配置项可选的值为&lt;code&gt;allow&lt;/code&gt;和&lt;code&gt;deny&lt;/code&gt;。默认值为’allow’。默认的策略控制token在没有匹配的规则时的行为。&lt;br&gt;在&lt;code&gt;allow&lt;/code&gt;模式下，ACL规则是一个黑名单：任何没有被禁止的操作都是可以执行的。&lt;br&gt;在&lt;code&gt;deny&lt;/code&gt;模式下，ACL规则是一个白名单，任何没有明确指定的操作都是被禁止的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：该配置项只有在配置了&lt;code&gt;acl_datacenter&lt;/code&gt;后才起作用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="consul" scheme="https://leokongwq.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>springcloud服务注册之consul</title>
    <link href="https://leokongwq.github.io/2018/07/08/spring-cloud-consul.html"/>
    <id>https://leokongwq.github.io/2018/07/08/spring-cloud-consul.html</id>
    <published>2018-07-08T05:28:16.000Z</published>
    <updated>2018-07-09T02:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用springcloud构建微服务，除了可以使用eureka来实现服务注册和发现外，springcloud对consul也提供了良好的支持。本文就简单介绍下使用springcloud和consul实现服务注册和发现。</p>
<h3 id="consul安装"><a href="#consul安装" class="headerlink" title="consul安装"></a>consul安装</h3><p>consul的安装非常简单，只需要在官网<a href="https://www.consul.io/downloads.html" target="_blank" rel="external">下载</a>对应平台的安装文件即可。</p>
<p>具体安装步骤参考<a href="https://www.consul.io/intro/getting-started/install.html" target="_blank" rel="external">install</a></p>
<a id="more"></a>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><h4 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span>
<span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h4 id="相关注解配置"><a href="#相关注解配置" class="headerlink" title="相关注解配置"></a>相关注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="meta">@EnableDiscoveryClient</span></span>
<span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">		SpringApplication.run(Application.class, args);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line">#默认就是true</span>
<span class="line">spring.cloud.consul.enabled=true</span>
<span class="line">spring.cloud.consul.host=127.0.0.1</span>
<span class="line">spring.cloud.consul.port=8500</span>
<span class="line">#默认就是true</span>
<span class="line">spring.cloud.consul.discovery.enabled=true</span>
<span class="line">#服务名</span>
<span class="line">spring.cloud.consul.discovery.serviceName=$&#123;spring.application.name&#125;</span>
<span class="line">#服务注册实例名</span>
<span class="line">spring.cloud.consul.discovery.instanceId=$&#123;spring.application.name&#125;-$&#123;spring.cloud.client.ipAddress&#125;-$&#123;server.port&#125;</span>
<span class="line">#服务所在的主机名</span>
<span class="line">spring.cloud.consul.discovery.hostname=$&#123;spring.cloud.client.ipAddress&#125;</span>
<span class="line">#服务所在的端口</span>
<span class="line">spring.cloud.consul.discovery.port=$&#123;server.port&#125;</span>
<span class="line">#服务的健康检查url</span>
<span class="line">spring.cloud.consul.discovery.healthCheckUrl=http://localhost:$&#123;server.port&#125;/</span>
<span class="line">spring.cloud.consul.discovery.healthCheckInterval=10s</span>
<span class="line">spring.cloud.consul.discovery.healthCheckTimeout=10s</span>
<span class="line">spring.cloud.consul.discovery.healthCheckPath=/</span>
<span class="line">spring.cloud.consul.discovery.tags=dev,dev1</span>
</pre></td></tr></table></figure>
<blockquote>
<p>healthCheckUrl 是consul检查应用健康状态的地址，可以选择一个自定义地址， 也可以使用<code>actuator</code>提供的<code>/health</code>地址。需要注意的是：如果你使用<code>actuator</code>提供的<code>/health</code>地址，则需要确保返回的json注解中的<code>status</code>字段为<code>UP</code>。也就是说<code>actuator</code>实施健康检查的所有组件的健康状态都必须是<code>UP</code>状态，有一个不是，则整个返回界都就是<code>DOWN</code>状态。</p>
</blockquote>
<h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>properties文件配置和服务注册端都是一致的。Spring的java Bean配置也基本相同。</p>
<h4 id="maven-配置-1"><a href="#maven-配置-1" class="headerlink" title="maven 配置"></a>maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h4 id="java-Bean-配置"><a href="#java-Bean-配置" class="headerlink" title="java Bean 配置"></a>java Bean 配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span>
<span class="line"><span class="meta">@EnableCircuitBreaker</span></span>
<span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span>
<span class="line">    </span>
<span class="line">    <span class="comment">//启动负载均衡功能</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@LoadBalanced</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        SpringApplication.run(Application.class, args);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>服务调用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Resource</span></span>
<span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"addServiceFallback"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span>
<span class="line">        <span class="comment">//url格式为服务名 + 请求的URI</span></span>
<span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://bookservice/add?a=10&amp;b=20"</span>, String.class).getBody();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addServiceFallback</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用springcloud构建微服务，除了可以使用eureka来实现服务注册和发现外，springcloud对consul也提供了良好的支持。本文就简单介绍下使用springcloud和consul实现服务注册和发现。&lt;/p&gt;
&lt;h3 id=&quot;consul安装&quot;&gt;&lt;a href=&quot;#consul安装&quot; class=&quot;headerlink&quot; title=&quot;consul安装&quot;&gt;&lt;/a&gt;consul安装&lt;/h3&gt;&lt;p&gt;consul的安装非常简单，只需要在官网&lt;a href=&quot;https://www.consul.io/downloads.html&quot;&gt;下载&lt;/a&gt;对应平台的安装文件即可。&lt;/p&gt;
&lt;p&gt;具体安装步骤参考&lt;a href=&quot;https://www.consul.io/intro/getting-started/install.html&quot;&gt;install&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
      <category term="springcloud" scheme="https://leokongwq.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ 延迟消息</title>
    <link href="https://leokongwq.github.io/2018/06/27/activemq-deleyQueue.html"/>
    <id>https://leokongwq.github.io/2018/06/27/activemq-deleyQueue.html</id>
    <published>2018-06-27T15:08:31.000Z</published>
    <updated>2018-11-03T04:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有非常多的业务场景需要用到延迟消息功能。例如：订单待支付提醒，订单超时取消等。但并不是所有的消息中间件都支持延迟消息的功能，为了实现延迟消息，各路大神也是创造了很多的方案。<br>我们的系统使用的是ActiveMQ，ActiveMQ从版本<code>5.4</code>开始提供了持久化的延迟消息功能。下文就ActiveMQ提供的延迟消息功能进行介绍。</p>
<h3 id="启用ActiveMQ定时消息功能"><a href="#启用ActiveMQ定时消息功能" class="headerlink" title="启用ActiveMQ定时消息功能"></a>启用ActiveMQ定时消息功能</h3><p>为了使用ActiveMQ的延迟消息功能，我们需要修改ActiveMQ的配置文件<code>activemq.xml</code>，<br>在broker节点上添加<code>schedulerSupport=&quot;true&quot;</code>，如下所示:</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">"http://activemq.apache.org/schema/core"</span> <span class="attr">schedulerSupport</span>=<span class="string">"true"</span> &gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="创建延迟消息并发送"><a href="#创建延迟消息并发送" class="headerlink" title="创建延迟消息并发送"></a>创建延迟消息并发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line">jmsTemplate.send(orderCreatedTopic, session -&gt; &#123;</span>
<span class="line">	MapMessage orderCreatedMsg = session.createMapMessage();</span>
<span class="line">	orderCreatedMsg.setString(<span class="string">"orderCode"</span>, orderCode);</span>
<span class="line">	<span class="comment">//延迟10分钟进行投递</span></span>
<span class="line">	<span class="keyword">long</span> time = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>;</span>
<span class="line">	orderCreatedMsg.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);</span>
<span class="line">	<span class="keyword">return</span> orderCreatedMsg;</span>
<span class="line">&#125;);</span>
</pre></td></tr></table></figure>
<h3 id="延时消息属性总结"><a href="#延时消息属性总结" class="headerlink" title="延时消息属性总结"></a>延时消息属性总结</h3><p>ActiveM提供了很多高级的延时消息配置属性，解释如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>　AMQ_SCHEDULED_DELAY</td>
<td>long</td>
<td>broker在投递该消息前等待的毫秒数</td>
</tr>
<tr>
<td>　AMQ_SCHEDULED_PERIOD</td>
<td>long</td>
<td>每次重新投递该消息的时间间隔</td>
</tr>
<tr>
<td>　AMQ_SCHEDULED_REPEAT</td>
<td>int</td>
<td>重复投递该消息的次数</td>
</tr>
<tr>
<td>　AMQ_SCHEDULED_CRON　</td>
<td>String</td>
<td>使用一个cron表达式来表示消息投递的策略</td>
</tr>
</tbody>
</table>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line">MessageProducer producer = session.createProducer(destination);</span>
<span class="line">TextMessage message = session.createTextMessage(<span class="string">"test msg"</span>);</span>
<span class="line">message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, <span class="string">"0 * * * *"</span>);</span>
<span class="line">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, <span class="number">1000</span>);</span>
<span class="line">message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, <span class="number">1000</span>);</span>
<span class="line">message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, <span class="number">9</span>);</span>
<span class="line">producer.send(message);</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://activemq.apache.org/delay-and-schedule-message-delivery.html" target="_blank" rel="external">http://activemq.apache.org/delay-and-schedule-message-delivery.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;有非常多的业务场景需要用到延迟消息功能。例如：订单待支付提醒，订单超时取消等。但并不是所有的消息中间件都支持延迟消息的功能，为了实现延迟消息，各路大神也是创造了很多的方案。&lt;br&gt;我们的系统使用的是ActiveMQ，ActiveMQ从版本&lt;code&gt;5.4&lt;/code&gt;开始提供了持久化的延迟消息功能。下文就ActiveMQ提供的延迟消息功能进行介绍。&lt;/p&gt;
&lt;h3 id=&quot;启用ActiveMQ定时消息功能&quot;&gt;&lt;a href=&quot;#启用ActiveMQ定时消息功能&quot; class=&quot;headerlink&quot; title=&quot;启用ActiveMQ定时消息功能&quot;&gt;&lt;/a&gt;启用ActiveMQ定时消息功能&lt;/h3&gt;&lt;p&gt;为了使用ActiveMQ的延迟消息功能，我们需要修改ActiveMQ的配置文件&lt;code&gt;activemq.xml&lt;/code&gt;，&lt;br&gt;在broker节点上添加&lt;code&gt;schedulerSupport=&amp;quot;true&amp;quot;&lt;/code&gt;，如下所示:&lt;/p&gt;
    
    </summary>
    
      <category term="消息中间件" scheme="https://leokongwq.github.io/categories/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="MQ" scheme="https://leokongwq.github.io/tags/MQ/"/>
    
      <category term="ActiveMQ" scheme="https://leokongwq.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper使用之curator</title>
    <link href="https://leokongwq.github.io/2018/06/17/zookeeper-curator.html"/>
    <id>https://leokongwq.github.io/2018/06/17/zookeeper-curator.html</id>
    <published>2018-06-17T10:26:10.000Z</published>
    <updated>2018-06-24T13:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apache <a href="http://curator.apache.org/" target="_blank" rel="external">Curator</a>是Netflix开源的操作Zookeeper的，功能非常强大的客户端。提供了很多非常好用的功能来帮助我们构建分布式应用。</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>Curator 提供的分布式锁分为以下三类：</p>
<ul>
<li>可重入公平锁 InterProcessMutex</li>
<li>不可重入的非公平锁 InterProcessSemaphoreMutex</li>
<li>可重入的读写锁 InterProcessReadWriteLock</li>
<li>锁集合 InterProcessMultiLock</li>
</ul>
<a id="more"></a>
<h3 id="InterProcessMutex"><a href="#InterProcessMutex" class="headerlink" title="InterProcessMutex"></a>InterProcessMutex</h3><p>Curator提供了<code>InterProcessMutex</code>来实现该功能。样例代码如下：</p>
<figure class="highlight java"><figcaption><span>InterProcessMutex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//创建锁</span></span>
<span class="line">InterProcessLock lock = <span class="keyword">new</span> InterProcessMutex(client, lockPath);</span>
<span class="line"><span class="comment">//获取</span></span>
<span class="line">lock.acquire(<span class="number">1</span>，TimeUnit.SECONDS)</span>
<span class="line"><span class="keyword">try</span> &#123;</span>
<span class="line"><span class="comment">//业务代码</span></span>
<span class="line">&#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">    lock.release();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>实现原理分析：</p>
<p><code>InterProcessMutex</code>通过创建一个 Zookeeper 临时，顺序结点来实现锁的公平获取，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   <span class="keyword">if</span> ( !internalLock(-<span class="number">1</span>, <span class="keyword">null</span>) ) &#123;</span>
<span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Lost connection while trying to acquire lock: "</span> + basePath);</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">internalLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   <span class="comment">/*</span>
<span class="line">      Note on concurrency: a given lockData instance</span>
<span class="line">      can be only acted on by a single thread so locking isn't necessary</span>
<span class="line">   */</span></span>
<span class="line">   </span>
<span class="line">   <span class="comment">//下面的代码实现：可重入性。</span></span>
<span class="line">   Thread currentThread = Thread.currentThread();</span>
<span class="line">   LockData lockData = threadData.get(currentThread);</span>
<span class="line">   <span class="keyword">if</span> ( lockData != <span class="keyword">null</span> )</span>
<span class="line">   &#123;</span>
<span class="line">       <span class="comment">// re-entering </span></span>
<span class="line">       lockData.lockCount.incrementAndGet();</span>
<span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//创建：临时，顺序结点 </span></span>
<span class="line">   String lockPath = internals.attemptLock(time, unit, getLockNodeBytes());</span>
<span class="line">   <span class="keyword">if</span> ( lockPath != <span class="keyword">null</span> )</span>
<span class="line">   &#123;</span>
<span class="line">       LockData newLockData = <span class="keyword">new</span> LockData(currentThread, lockPath);</span>
<span class="line">       threadData.put(currentThread, newLockData);</span>
<span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>创建：临时，顺序结点 </p>
<figure class="highlight java"><figcaption><span>LockInternals.attemptLock</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">attemptLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit, <span class="keyword">byte</span>[] lockNodeBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line"><span class="keyword">while</span> ( !isDone )</span>
<span class="line">   &#123;</span>
<span class="line">       isDone = <span class="keyword">true</span>;</span>
<span class="line"></span>
<span class="line">       <span class="keyword">try</span></span>
<span class="line">       &#123;   </span>
<span class="line">           <span class="comment">// 通过LockInternalsDriver创建Zookeeper结点</span></span>
<span class="line">           ourPath = driver.createsTheLock(client, path, localLockNodeBytes);</span>
<span class="line">           <span class="comment">// 判断是否获取了锁， 其实就是判定该线程创建的临时结点的顺序是否最小</span></span>
<span class="line">           hasTheLock = internalLockLoop(startMillis, millisToWait, ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">       <span class="keyword">catch</span> ( KeeperException.NoNodeException e )</span>
<span class="line">       &#123;</span>
<span class="line">           <span class="comment">// gets thrown by StandardLockInternalsDriver when it can't find the lock node</span></span>
<span class="line">           <span class="comment">// this can happen when the session expires, etc. So, if the retry allows, just try it all again</span></span>
<span class="line">           <span class="keyword">if</span> ( client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++, System.currentTimeMillis() - startMillis, RetryLoop.getDefaultRetrySleeper()) )</span>
<span class="line">           &#123;</span>
<span class="line">               isDone = <span class="keyword">false</span>;</span>
<span class="line">           &#125;</span>
<span class="line">           <span class="keyword">else</span></span>
<span class="line">           &#123;</span>
<span class="line">               <span class="keyword">throw</span> e;</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
</pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">internalLockLoop</span><span class="params">(<span class="keyword">long</span> startMillis, Long millisToWait, String ourPath)</span> <span class="keyword">throws</span> Exception</span>
<span class="line"></span>&#123;</span>
<span class="line">   <span class="keyword">boolean</span>     haveTheLock = <span class="keyword">false</span>;</span>
<span class="line">   <span class="keyword">boolean</span>     doDelete = <span class="keyword">false</span>;</span>
<span class="line">   <span class="keyword">try</span></span>
<span class="line">   &#123;</span>
<span class="line">       <span class="keyword">if</span> ( revocable.get() != <span class="keyword">null</span> )</span>
<span class="line">       &#123;</span>
<span class="line">           client.getData().usingWatcher(revocableWatcher).forPath(ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">       <span class="comment">// 循环来获取锁</span></span>
<span class="line">       <span class="keyword">while</span> ( (client.getState() == CuratorFrameworkState.STARTED) &amp;&amp; !haveTheLock )</span>
<span class="line">       &#123;</span>
<span class="line">           <span class="comment">//获取所有的排序后的子节点列表（升序排列） </span></span>
<span class="line">           List&lt;String&gt;        children = getSortedChildren();</span>
<span class="line">           String              sequenceNodeName = ourPath.substring(basePath.length() + <span class="number">1</span>); <span class="comment">// +1 to include the slash</span></span>
<span class="line">           <span class="comment">// 判断该进程或线程创建的子节点：sequenceNodeName 是否是第一个</span></span>
<span class="line">           PredicateResults    predicateResults = driver.getsTheLock(client, children, sequenceNodeName, maxLeases);</span>
<span class="line">           <span class="keyword">if</span> ( predicateResults.getsTheLock() )</span>
<span class="line">           &#123;</span>
<span class="line">               haveTheLock = <span class="keyword">true</span>;</span>
<span class="line">           &#125;</span>
<span class="line">           <span class="keyword">else</span></span>
<span class="line">           &#123;</span>
<span class="line">               String  previousSequencePath = basePath + <span class="string">"/"</span> + predicateResults.getPathToWatch();</span>
<span class="line">                <span class="comment">// JVM 进程能同步，</span></span>
<span class="line">               <span class="keyword">synchronized</span>(<span class="keyword">this</span>)</span>
<span class="line">               &#123;</span>
<span class="line">                   <span class="keyword">try</span> </span>
<span class="line">                   &#123;</span>
<span class="line">                       <span class="comment">// use getData() instead of exists() to avoid leaving unneeded watchers which is a type of resource leak</span></span>
<span class="line">                       client.getData().usingWatcher(watcher).forPath(previousSequencePath);</span>
<span class="line">                       <span class="keyword">if</span> ( millisToWait != <span class="keyword">null</span> )</span>
<span class="line">                       &#123;</span>
<span class="line">                           millisToWait -= (System.currentTimeMillis() - startMillis);</span>
<span class="line">                           startMillis = System.currentTimeMillis();</span>
<span class="line">                           <span class="keyword">if</span> ( millisToWait &lt;= <span class="number">0</span> )</span>
<span class="line">                           &#123;</span>
<span class="line">                               doDelete = <span class="keyword">true</span>;    <span class="comment">// timed out - delete our node</span></span>
<span class="line">                               <span class="keyword">break</span>;</span>
<span class="line">                           &#125;</span>
<span class="line">                            <span class="comment">// 线程超时等待</span></span>
<span class="line">                           wait(millisToWait);</span>
<span class="line">                       &#125;</span>
<span class="line">                       <span class="keyword">else</span></span>
<span class="line">                       &#123;</span>
<span class="line">                          <span class="comment">// 线程等待(需要其它线程唤醒，其它线程在释放锁时会进行唤醒)</span></span>
<span class="line">                           wait();</span>
<span class="line">                       &#125;</span>
<span class="line">                       </span>
<span class="line">                        <span class="comment">//  watcher 的执行在另一个线程中，会唤醒等待锁的线程</span></span>
<span class="line">                   &#125;</span>
<span class="line">                   <span class="keyword">catch</span> ( KeeperException.NoNodeException e ) </span>
<span class="line">                   &#123;</span>
<span class="line">                       <span class="comment">// it has been deleted (i.e. lock released). Try to acquire again</span></span>
<span class="line">                   &#125;</span>
<span class="line">               &#125;</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">catch</span> ( Exception e )</span>
<span class="line">   &#123;   </span>
<span class="line">        <span class="comment">// 处理线程中断  </span></span>
<span class="line">       ThreadUtils.checkInterrupted(e);</span>
<span class="line">       doDelete = <span class="keyword">true</span>;</span>
<span class="line">       <span class="keyword">throw</span> e;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">finally</span></span>
<span class="line">   &#123;</span>
<span class="line">        <span class="comment">//被中断后，删除结点，释放锁（一点会删除成功，具体实现查询源代码）</span></span>
<span class="line">       <span class="keyword">if</span> ( doDelete )</span>
<span class="line">       &#123;</span>
<span class="line">           deleteOurPath(ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">return</span> haveTheLock;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="InterProcessSemaphoreMutex"><a href="#InterProcessSemaphoreMutex" class="headerlink" title="InterProcessSemaphoreMutex"></a>InterProcessSemaphoreMutex</h3><p>该功能的锁是由：<code>InterProcessSemaphoreMutex</code>实现的，具体原理就不分析代码。</p>
<p>提一句：该锁的功能是通过：<code>InterProcessMutex</code>和<code>InterProcessSemaphoreV2</code>实现的。</p>
<p><code>InterProcessSemaphoreV2</code>：从名称上来说，该类是一个信号量，也就是说它可以提供N个可用的许可，可以用来管理同时访问共享资源的并发数。</p>
<blockquote>
<p>许可数量为:1的信号量可以当做锁来用。</p>
</blockquote>
<h3 id="InterProcessReadWriteLock"><a href="#InterProcessReadWriteLock" class="headerlink" title="InterProcessReadWriteLock"></a>InterProcessReadWriteLock</h3><p>读写锁和JDK提供的：<code>ReadWriteLock</code>功能是类似的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadWriteLock</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   String lockPath = <span class="string">"/config/lock/123"</span>;</span>
<span class="line">   InterProcessReadWriteLock readWriteLock = <span class="keyword">new</span> InterProcessReadWriteLock(client, lockPath);</span>
<span class="line"></span>
<span class="line">   InterProcessMutex readLock = readWriteLock.readLock();</span>
<span class="line">   InterProcessMutex writeLock = readWriteLock.writeLock();</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>特点总结：</p>
<ol>
<li>可重入，读锁和写锁都是可重入的。</li>
<li>读锁非互斥，写锁是互斥的，只能有一个客户端获取</li>
<li>读写是互斥的</li>
<li>支持锁降级。支持写锁降级为读锁，读锁不能升级为写锁。</li>
</ol>
<h3 id="InterProcessMultiLock"><a href="#InterProcessMultiLock" class="headerlink" title="InterProcessMultiLock"></a>InterProcessMultiLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">InterProcessMultiLock lock = <span class="keyword">new</span> InterProcessMultiLock(List&lt;InterProcessLock&gt; locks);</span>
<span class="line"></span>
<span class="line">或</span>
<span class="line"></span>
<span class="line">InterProcessMultiLock lock = <span class="keyword">new</span> InterProcessMultiLock(CuratorFramework client,</span>
<span class="line">                             List&lt;String&gt; paths);</span>
</pre></td></tr></table></figure>
<p><code>InterProcessMultiLock</code>维护一组锁。在获取锁时，只有获取所有的锁时才返回，释放时会释放所有的锁。</p>
<h2 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h2><p>在分布式系统中，Leader选举是一个非常基础和重要的能力。通过Zookeeper和Curator能非常容易的实现Leader选举。</p>
<p>Curator提供了两种机制来实现Leader选举：</p>
<h3 id="方法一：LeaderSelector"><a href="#方法一：LeaderSelector" class="headerlink" title="方法一：LeaderSelector"></a>方法一：LeaderSelector</h3><p>直接上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String leaderSelectionPath = <span class="string">"/config/vip/db/master"</span>;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLeaderElection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       threadPool.execute(<span class="keyword">new</span> Contender(buildLeaderSelectorListener()));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">1000</span>);</span>
<span class="line"></span>
<span class="line">   threadPool.shutdown();</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">/**</span>
<span class="line">* 公平的选举（顺序性）</span>
<span class="line">*/</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contender</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line">   <span class="keyword">private</span> LeaderSelectorListener listener;</span>
<span class="line"></span>
<span class="line">   Contender(LeaderSelectorListener listener) &#123;</span>
<span class="line">       <span class="keyword">this</span>.listener = listener;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       LeaderSelector selector = <span class="keyword">new</span> LeaderSelector(client, leaderSelectionPath, listener);</span>
<span class="line">       <span class="comment">// 自动加入Leader选举</span></span>
<span class="line">       selector.autoRequeue();</span>
<span class="line">       <span class="comment">//开始进行选举，不过该方法会立即返回。选举的结果是通过异步回调实现的</span></span>
<span class="line">       selector.start();</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
<span class="line"><span class="function"><span class="keyword">private</span> LeaderSelectorListener <span class="title">buildLeaderSelectorListener</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   LeaderSelectorListener listener = <span class="keyword">new</span> LeaderSelectorListenerAdapter() &#123;</span>
<span class="line">        <span class="comment">//该方法只有在该客户端被选为Leader才会被调用。</span></span>
<span class="line">        <span class="comment">//方法返回就表示客户端放弃Leader角色。</span></span>
<span class="line">       <span class="meta">@Override</span></span>
<span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeLeadership</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">          <span class="comment">// 模式业务操作</span></span>
<span class="line">            System.out.println(<span class="string">"Current Leader is : "</span> + Thread.currentThread().getName());</span>
<span class="line">           Thread.sleep(<span class="number">5000</span>)</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;;</span>
<span class="line">   <span class="keyword">return</span> listener;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="方法二：LeaderLatch"><a href="#方法二：LeaderLatch" class="headerlink" title="方法二：LeaderLatch"></a>方法二：LeaderLatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLeaderRandomElection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       LeaderLatch leaderLatch = <span class="keyword">new</span> LeaderLatch(client, leaderSelectionPath, String.valueOf(i));</span>
<span class="line">       threadPool.execute(<span class="keyword">new</span> RandomSelectLeader(leaderLatch));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">1000</span>);</span>
<span class="line"></span>
<span class="line">   threadPool.shutdown();</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomSelectLeader</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">private</span> LeaderLatch leaderLatch;</span>
<span class="line"></span>
<span class="line">   RandomSelectLeader(LeaderLatch leaderLatch) &#123;</span>
<span class="line">       <span class="keyword">this</span>.leaderLatch = leaderLatch;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           <span class="comment">//强烈建议添加Listener来监听链接变化，　处理Leader丢失问题</span></span>
<span class="line">           leaderLatch.addListener(<span class="keyword">new</span> LeaderLatchListener() &#123;</span>
<span class="line">               <span class="meta">@Override</span></span>
<span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isLeader</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                   System.out.println(<span class="string">"I'am Selected to be a Leader"</span> + Thread.currentThread().getName());</span>
<span class="line">               &#125;</span>
<span class="line"></span>
<span class="line">               <span class="meta">@Override</span></span>
<span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notLeader</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                   System.out.println(<span class="string">"I'am Not Leader"</span> + Thread.currentThread().getName());</span>
<span class="line">               &#125;</span>
<span class="line">           &#125;);</span>
<span class="line">           <span class="comment">//调用该方法后才能开始参与选举（随机的）</span></span>
<span class="line">           leaderLatch.start();</span>
<span class="line">           <span class="comment">//死等，　直到被选为Leader</span></span>
<span class="line">           leaderLatch.await();</span>
<span class="line"></span>
<span class="line">           System.out.println(<span class="string">"Current Leader is : "</span> + Thread.currentThread().getName());</span>
<span class="line"></span>
<span class="line">           Thread.sleep(<span class="number">2000</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">           <span class="keyword">try</span> &#123;</span>
<span class="line">               <span class="comment">// 退出选举，如果自己是Leader，则放弃Leader位置，其它的成员就可以再次选举</span></span>
<span class="line">               leaderLatch.close();</span>
<span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">               e.printStackTrace();</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>推荐使用<code>LeaderSelector</code>来实现Leader选举，因为参加选举的结点代码编写简单，能自动完成丢失Leader角色后从新参加选举的功能，而且能灵活的控制释放Leader角色的时机。</p>
<h2 id="分布式栅栏"><a href="#分布式栅栏" class="headerlink" title="分布式栅栏"></a>分布式栅栏</h2><h3 id="DistributedBarrier"><a href="#DistributedBarrier" class="headerlink" title="DistributedBarrier"></a>DistributedBarrier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   String barrierPath = <span class="string">"/config/barriers"</span>;</span>
<span class="line">   DistributedBarrier barrier = <span class="keyword">new</span> DistributedBarrier(client, barrierPath);</span>
<span class="line"></span>
<span class="line">   ExecutorService executorService = Executors.newCachedThreadPool();</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       executorService.execute(<span class="keyword">new</span> Worker(barrier));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="comment">//主线程设置结点，worker线程等待</span></span>
<span class="line">   barrier.setBarrier();</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);</span>
<span class="line">   System.out.println(<span class="string">"ALL Done!"</span>);</span>
<span class="line"></span>
<span class="line">   barrier.removeBarrier();</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">private</span> DistributedBarrier barrier;</span>
<span class="line"></span>
<span class="line">   Worker(DistributedBarrier barrier) &#123;</span>
<span class="line">       <span class="keyword">this</span>.barrier = barrier;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           barrier.waitOnBarrier();</span>
<span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">" &gt;&gt;&gt;&gt; Finished"</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="DistributedDoubleBarrier"><a href="#DistributedDoubleBarrier" class="headerlink" title="DistributedDoubleBarrier"></a>DistributedDoubleBarrier</h3><p>双栅栏允许客户端在计算的开始和结束时同步。当足够的进程加入到双栅栏时，进程开始计算， 当计算完成时，离开栅栏。</p>
<p>构造函数为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DistributedDoubleBarrier</span><span class="params">(CuratorFramework client,</span>
<span class="line">                                String barrierPath,</span>
<span class="line">                                <span class="keyword">int</span> memberQty)</span></span>
<span class="line">Creates the barrier abstraction. memberQty is the number of members in the barrier. When <span class="title">enter</span><span class="params">()</span> is called, it blocks until</span>
<span class="line">all members have entered. When <span class="title">leave</span><span class="params">()</span> is called, it blocks until all members have left.</span>
<span class="line">Parameters:</span>
<span class="line">client - the client</span>
<span class="line">barrierPath - path to use</span>
<span class="line">memberQty - the number of members in the barrier</span></span>
</pre></td></tr></table></figure>
<p><code>memberQty</code>是成员数量，当<code>enter</code>方法被调用时，成员被阻塞，直到所有的成员都调用了<code>enter</code>。 当<code>leave</code>方法被调用时，它也阻塞调用线程， 直到所有的成员都调用了<code>leave</code>。</p>
<p><code>DistributedDoubleBarrier</code>会监控连接状态，当连接断掉时<code>enter</code>和<code>leave</code>方法会抛出异常。</p>
<p>下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedDoubleBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   String barrierPath = <span class="string">"/config/barriers"</span>;</span>
<span class="line"></span>
<span class="line">   ExecutorService executorService = Executors.newFixedThreadPool(QTY);</span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; i++) &#123;</span>
<span class="line">       <span class="keyword">final</span> DistributedDoubleBarrier barrier = <span class="keyword">new</span> DistributedDoubleBarrier(client, barrierPath, QTY);</span>
<span class="line">       executorService.execute(<span class="keyword">new</span> Worker(barrier));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line">   System.out.println(<span class="string">"ALL Done!"</span>);</span>
<span class="line"></span>
<span class="line">   executorService.shutdown();</span>
<span class="line">   executorService.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   DistributedDoubleBarrier doubleBarrier;</span>
<span class="line"></span>
<span class="line">   Worker(DistributedDoubleBarrier doubleBarrier) &#123;</span>
<span class="line">       <span class="keyword">this</span>.doubleBarrier = doubleBarrier;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           <span class="comment">//等待所有客户端都到达</span></span>
<span class="line">           doubleBarrier.enter();</span>
<span class="line">           System.out.println(<span class="string">"I'am arrival"</span>);</span>
<span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">" &gt;&gt;&gt;&gt; Finished"</span>);</span>
<span class="line">           <span class="comment">//等待所有客户端都到达</span></span>
<span class="line">           doubleBarrier.leave();</span>
<span class="line">           System.out.println(<span class="string">"I'am leave"</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="分布式计数器"><a href="#分布式计数器" class="headerlink" title="分布式计数器"></a>分布式计数器</h2><h3 id="SharedCount"><a href="#SharedCount" class="headerlink" title="SharedCount"></a>SharedCount</h3><p><code>SharedCount</code> 管理一个共享的整型数字。所有监听该同一个Zookeeper Path的客户端都能获取到该整型数字的最新值。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedCountTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNTER_PATH = <span class="string">"/config/conunter/total"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSharedCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        SharedCount sharedCount = <span class="keyword">new</span> SharedCount(client, COUNTER_PATH, <span class="number">0</span>);</span>
<span class="line">        sharedCount.start();</span>
<span class="line"></span>
<span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span>
<span class="line">            <span class="keyword">final</span> SharedCount count = <span class="keyword">new</span> SharedCount(client, COUNTER_PATH, <span class="number">0</span>);</span>
<span class="line">            count.start();</span>
<span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span>
<span class="line">                <span class="meta">@Override</span></span>
<span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                    count.addListener(<span class="keyword">new</span> SharedCountListener() &#123;</span>
<span class="line">                        <span class="meta">@Override</span></span>
<span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countHasChanged</span><span class="params">(SharedCountReader sharedCount, <span class="keyword">int</span> newCount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">"===="</span> + newCount);</span>
<span class="line">                        &#125;</span>
<span class="line"></span>
<span class="line">                        <span class="meta">@Override</span></span>
<span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span>
<span class="line">                            System.out.println(newState);</span>
<span class="line">                        &#125;</span>
<span class="line">                    &#125;);</span>
<span class="line"></span>
<span class="line">                    <span class="keyword">try</span> &#123;</span>
<span class="line">                        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span>
<span class="line">                        e.printStackTrace();</span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;);</span>
<span class="line">        &#125;</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span>
<span class="line">        sharedCount.setCount(<span class="number">123</span>);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span>
<span class="line">        sharedCount.setCount(<span class="number">456</span>);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">20</span>);</span>
<span class="line">        sharedCount.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注意： 如果连续两次调用<code>setCount</code>方法，在客户端只能观察到最后一次的结果。<code>trySetCount</code> 只有当该客户端的缓存的值和服务端保存的值一致才能设置成功，否则该客户端的值会自动更新（<code>trySetCount</code>返回false）。</p>
</blockquote>
<h3 id="DistributedAtomicLong"><a href="#DistributedAtomicLong" class="headerlink" title="DistributedAtomicLong"></a>DistributedAtomicLong</h3><p><code>DistributedAtomicLong</code> 是一个原子更新的计数器。它在更新值时，第一次尝试采用乐观锁机制，如果更新失败，则使用<code>InterProcessMutex</code>来实现更新。 不管采用哪种机制，它都会采用重试机制，直到更新成功。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDistributedAtomicLong</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNTER_PATH = <span class="string">"/config/conunter/123"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedAtomicLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        RetryPolicy retryPolicy = <span class="keyword">new</span> RetryForever(<span class="number">10</span>);</span>
<span class="line">        DistributedAtomicLong atomicLong = <span class="keyword">new</span> DistributedAtomicLong(client, COUNTER_PATH, retryPolicy);</span>
<span class="line"></span>
<span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span>
<span class="line">            <span class="keyword">final</span> RetryPolicy retryPolicyTmp = <span class="keyword">new</span> RetryForever(<span class="number">10</span>);</span>
<span class="line">            <span class="keyword">final</span> DistributedAtomicLong distCounter = <span class="keyword">new</span> DistributedAtomicLong(client, COUNTER_PATH, retryPolicyTmp);</span>
<span class="line"></span>
<span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span>
<span class="line">                <span class="meta">@Override</span></span>
<span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                    System.out.println(distCounter);</span>
<span class="line"></span>
<span class="line">                    AtomicValue&lt;Long&gt; result = <span class="keyword">null</span>;</span>
<span class="line">                    <span class="keyword">try</span> &#123;</span>
<span class="line">                        result = distCounter.increment();</span>
<span class="line">                        <span class="keyword">if</span> (result.succeeded()) &#123;</span>
<span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">"===&gt; current value = "</span> + result.preValue());</span>
<span class="line">                        &#125;</span>
<span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">                        e.printStackTrace();</span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">        System.out.println(<span class="string">"After all current value is = "</span> + atomicLong.get().postValue());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注意：在使用<code>DistributedAtomicLong</code>时，你必须首先检查<code>AtomicValue.succeeded()</code>的返回值。如果操作成功则该方法的返回<code>true</code>，否则返回<code>false</code>，表示原子更新失败。如果更新成功，则可以通过<code>preValue</code>和<code>postValue</code>获取更新前后的值。</p>
</blockquote>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="PathChildrenCache"><a href="#PathChildrenCache" class="headerlink" title="PathChildrenCache"></a>PathChildrenCache</h3><p><code>PathChildrenCache</code> 用来观察一个<code>ZNode</code>。无论该结点下新增子节点，删除子节点还是子节点更新，路径缓存都会更新它的状态来包含当前的结点集合（包括状态和数据）。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathChildrenCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PATH = <span class="string">"/config/cache"</span>;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        PathChildrenCache pathChildrenCache = <span class="keyword">new</span> PathChildrenCache(client, CACHE_PATH, <span class="keyword">true</span>);</span>
<span class="line">        pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);</span>
<span class="line"></span>
<span class="line">        pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(event);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line"></span>
<span class="line">        List&lt;ChildData&gt; childDataList = pathChildrenCache.getCurrentData();</span>
<span class="line">        <span class="keyword">for</span> (ChildData childData : childDataList) &#123;</span>
<span class="line">            System.out.println(childData);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        pathChildrenCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="NodeCache"><a href="#NodeCache" class="headerlink" title="NodeCache"></a>NodeCache</h3><p><code>NodeCache</code>用来观察一个<code>ZNode</code>。当该结点的数据被更新，或被删除，<code>NodeCache</code>会同步到结点当前最新的数据，如果结点被删除，则<code>NodeCache</code>包含的数据为null。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_NODE_PATH = <span class="string">"/config/cache/123"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        <span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(client, CACHE_NODE_PATH);</span>
<span class="line">        nodeCache.start(<span class="keyword">true</span>);</span>
<span class="line">        nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(<span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line">        nodeCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="TreeCache"><a href="#TreeCache" class="headerlink" title="TreeCache"></a>TreeCache</h3><p><code>TreeCache</code>是一个工具类，它试图将服务端某个<code>Path</code>下所有所有的结点数据缓存到本地。该类会监听指定的ZK路径，处理<code>update</code>,<code>create</code>,<code>delete</code>事件并拉取服务端的数据。你可以通过注册一个Listener来获取数据的变化通知。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PATH = <span class="string">"/config/cache"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        TreeCache treeCache = <span class="keyword">new</span> TreeCache(client, CACHE_PATH);</span>
<span class="line">        treeCache.getListenable().addListener(<span class="keyword">new</span> TreeCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(event);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line">        treeCache.start();</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line"></span>
<span class="line">        Map&lt;String, ChildData&gt; dataMap = treeCache.getCurrentChildren(CACHE_PATH);</span>
<span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ChildData&gt; entry : dataMap.entrySet()) &#123;</span>
<span class="line">            System.out.println(entry.getKey() + <span class="string">" =====》"</span> +  <span class="keyword">new</span> String(entry.getValue().getData()));</span>
<span class="line">        &#125;</span>
<span class="line">        treeCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><h3 id="Persistent-Node"><a href="#Persistent-Node" class="headerlink" title="Persistent Node"></a>Persistent Node</h3><p>持久化结点是数据保存在Zookeeper服务端，并且在连接断开，session过期任然存在的结点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentNodeTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NODE_PATH = <span class="string">"/persons/sky"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersistentNode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        PersistentNode persistentNode = <span class="keyword">new</span> PersistentNode(</span>
<span class="line">            client,</span>
<span class="line">            CreateMode.PERSISTENT,</span>
<span class="line">            <span class="keyword">true</span>,</span>
<span class="line">            NODE_PATH,</span>
<span class="line">            <span class="string">"123"</span>.getBytes()</span>
<span class="line">        );</span>
<span class="line">        <span class="comment">//必须先调用该方法(该方法会创建结点)</span></span>
<span class="line">        persistentNode.start();</span>
<span class="line"></span>
<span class="line">        System.out.println(persistentNode.getActualPath());</span>
<span class="line">        System.out.println(<span class="keyword">new</span> String(persistentNode.getData()));</span>
<span class="line">        <span class="comment">//会删除该结点</span></span>
<span class="line"><span class="comment">//        persistentNode.close();</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="Persistent-TTL-Node"><a href="#Persistent-TTL-Node" class="headerlink" title="Persistent TTL Node"></a>Persistent TTL Node</h3><p><code>`在你需要创建</code>TTL<code>节点，但不想通过定期设置数据手动保持它的活动状态时非常有用。</code>PersistentTtlNode<code>可以为你完成此操作。 此外，保持活动的方式不会在父节点上生成监视触发器。 它还提供了类似</code>PersistentNode`的保证，即使通过连接和会话中断，节点也会尝试保持在ZooKeeper中。</p>
<h3 id="Group-Member"><a href="#Group-Member" class="headerlink" title="Group Member"></a>Group Member</h3><h2 id="分布式队列"><a href="#分布式队列" class="headerlink" title="分布式队列"></a>分布式队列</h2><p>、、、、</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Apache &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Curator&lt;/a&gt;是Netflix开源的操作Zookeeper的，功能非常强大的客户端。提供了很多非常好用的功能来帮助我们构建分布式应用。&lt;/p&gt;
&lt;h2 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h2&gt;&lt;p&gt;Curator 提供的分布式锁分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可重入公平锁 InterProcessMutex&lt;/li&gt;
&lt;li&gt;不可重入的非公平锁 InterProcessSemaphoreMutex&lt;/li&gt;
&lt;li&gt;可重入的读写锁 InterProcessReadWriteLock&lt;/li&gt;
&lt;li&gt;锁集合 InterProcessMultiLock&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="zookeeper" scheme="https://leokongwq.github.io/tags/zookeeper/"/>
    
      <category term="curator" scheme="https://leokongwq.github.io/tags/curator/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统一致性总结</title>
    <link href="https://leokongwq.github.io/2018/06/01/distributed-system-consitency.html"/>
    <id>https://leokongwq.github.io/2018/06/01/distributed-system-consitency.html</id>
    <published>2018-06-01T06:16:32.000Z</published>
    <updated>2018-06-01T06:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在学习过程中，阅读了好多关于分布式系统一致性的文章和资料，总是被分布式事务一致性和分布式数据一致性</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在学习过程中，阅读了好多关于分布式系统一致性的文章和资料，总是被分布式事务一致性和分布式数据一致性&lt;/p&gt;

    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>spring中RestTemplate简介</title>
    <link href="https://leokongwq.github.io/2018/05/30/spring-RestTemplate.html"/>
    <id>https://leokongwq.github.io/2018/05/30/spring-RestTemplate.html</id>
    <published>2018-05-30T08:44:51.000Z</published>
    <updated>2018-05-30T09:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RestTemplate-是什么？"><a href="#RestTemplate-是什么？" class="headerlink" title="RestTemplate 是什么？"></a>RestTemplate 是什么？</h3><p>RestTemplate是Spring提供的一个访问Http服务的客户端类，非常类似JdbcTemplate, JmsTemplate。它是线程安全的（一旦创建完成）。从名称上来看，该类更多是针对RESTFUL风格API设计的。当然如果你想通过它调用普通的Http接口也是可以的。</p>
<h3 id="RestTemplate-的方法"><a href="#RestTemplate-的方法" class="headerlink" title="RestTemplate 的方法"></a>RestTemplate 的方法</h3><p>RestTemplate提供的方法都是以Http协议中的6个动词开头的：</p>
<img src="/2018/05/30/spring-RestTemplate/spring-template.png" alt="spring-template.png" title="">
<p>这些方法的名称清楚地表明它们调用的是哪个HTTP方法，而名称的第二部分表示返回的内容。 例如，<code>getForObject（）</code>将执行GET，将HTTP响应转换为你选择的对象类型，并返回该对象。<code>postForLocation</code>将执行POST，将给定对象转换为HTTP请求，并返回可以找到新创建对象的响应<code>HTTP Location</code>标头。 如你所见，这些方法试图强制执行REST最佳实践。</p>
<a id="more"></a>
<h3 id="URI-模板"><a href="#URI-模板" class="headerlink" title="URI 模板"></a>URI 模板</h3><p>这些方法中的每一个都将URI作为第一个参数。 该URI可以是URI模板，可以使用变量将模板扩展为正常的URI。 模板变量可以以两种形式传递：<code>作为String可变参数数组</code>，或作为<code>Map &lt;String，String&gt;</code>。 字符串可变数组按顺序展开复制给模板变量，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">String result = restTemplate.getForObject(<span class="string">"http://example.com/hotels/&#123;hotel&#125;/bookings/&#123;booking&#125;"</span>, String.class, <span class="string">"42"</span>, <span class="string">"21"</span>);</span>
</pre></td></tr></table></figure>
<p>上面的代码最终会请求：<a href="http://example.com/hotels/42/bookings/21" target="_blank" rel="external">http://example.com/hotels/42/bookings/21</a>。Map类型的模板数据，则会以模板变量的名称为key, 查询对应的值来做替换。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; vars = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span>
<span class="line">vars.put(<span class="string">"hotel"</span>, <span class="string">"42"</span>);</span>
<span class="line">vars.put(<span class="string">"booking"</span>, <span class="string">"21"</span>);</span>
<span class="line">String result = restTemplate.getForObject(<span class="string">"http://example.com/hotels/&#123;hotel&#125;/bookings/&#123;booking&#125;"</span>, String.class, vars);</span>
</pre></td></tr></table></figure>
<p>最终同样会发送请求：<a href="http://example.com/hotels/42/rooms/42" target="_blank" rel="external">http://example.com/hotels/42/rooms/42</a>。</p>
<h3 id="HttpMessageConverters"><a href="#HttpMessageConverters" class="headerlink" title="HttpMessageConverters"></a>HttpMessageConverters</h3><p>传递给方法<code>getForObject()</code>,<code>postForLocation()</code>,<code>put()</code>的数据对象，或是这些方法的返回数据对象都是通过<code>HttpMessageConverter</code>进行转换的。在发送请求时，将数据对象转为Http请求数据， 接收响应时，将Http响应数据转为对应的数据对象。具体参考下面的例子</p>
<h4 id="搜索图片"><a href="#搜索图片" class="headerlink" title="搜索图片"></a>搜索图片</h4><p>Flickr公开了各种API来操纵庞大的照片库。<code>flickr.photos.search</code>方法允许你通过使用<code>GET</code>方法请求地址：<a href="http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=xxx&amp;tags=penguins" target="_blank" rel="external">http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=xxx&amp;tags=penguins</a>来搜索照片，结果会以xml的形式展示:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">photos</span> <span class="attr">page</span>=<span class="string">"2"</span> <span class="attr">pages</span>=<span class="string">"89"</span> <span class="attr">perpage</span>=<span class="string">"10"</span> <span class="attr">total</span>=<span class="string">"881"</span>&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2636"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span> </span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"a123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_04"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2635"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"b123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_03"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"0"</span> <span class="attr">isfriend</span>=<span class="string">"1"</span> <span class="attr">isfamily</span>=<span class="string">"1"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2633"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"c123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_01"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2610"</span> <span class="attr">owner</span>=<span class="string">"12037949754@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"d123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"00_tall"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">photos</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String photoSearchUrl =</span>
<span class="line">   <span class="string">"http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=&#123;api-key&#125;&amp;tags=&#123;tag&#125;&amp;per_page=10"</span>;</span>
<span class="line">Source photos = restTemplate.getForObject(photoSearchUrl, Source.class, apiKey, searchTerm);</span>
</pre></td></tr></table></figure>
<h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><h4 id="getXXX"><a href="#getXXX" class="headerlink" title="getXXX"></a>getXXX</h4><p>GET请求的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... urlVariables) throws RestClientException </span>
<span class="line"></span>
<span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables) throws RestClientException</span>
<span class="line"></span>
<span class="line">public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType) throws RestClientException</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloGet</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://abc.com"</span>, String.class);</span>
<span class="line">    String body = responseEntity.getBody();</span>
<span class="line">    HttpStatus statusCode = responseEntity.getStatusCode();</span>
<span class="line">    <span class="keyword">int</span> statusCodeValue = responseEntity.getStatusCodeValue();</span>
<span class="line">    HttpHeaders headers = responseEntity.getHeaders();</span>
<span class="line">    <span class="keyword">return</span> body;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="postXXX"><a href="#postXXX" class="headerlink" title="postXXX"></a>postXXX</h3><p>POST 请求的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title">postForObject</span><span class="params">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title">postForObject</span><span class="params">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException</span></span>
</pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">headers.add(<span class="string">"X-Auth-Token"</span>, <span class="string">"e348bc22-5efa-4299-9142-529f07a18ac9"</span>);</span>
<span class="line"></span>
<span class="line">MultiValueMap&lt;String, String&gt; postParameters = <span class="keyword">new</span> LinkedMultiValueMap&lt;String, String&gt;();</span>
<span class="line">postParameters.add(<span class="string">"owner"</span>, <span class="string">"11"</span>);</span>
<span class="line">postParameters.add(<span class="string">"subdomain"</span>, <span class="string">"aoa"</span>);</span>
<span class="line">postParameters.add(<span class="string">"comment"</span>, <span class="string">""</span>);</span>
<span class="line"></span>
<span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity  = <span class="keyword">new</span> HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(postParameters, headers);</span>
<span class="line"></span>
<span class="line">WebResult&lt;Person&gt; result = <span class="keyword">null</span>;</span>
<span class="line"><span class="keyword">try</span> &#123;</span>
<span class="line">  result = restTemplate.postForObject(<span class="string">"请求地址"</span>,  requestEntity, WebResult.class);</span>
<span class="line">  logger.info(result);</span>
<span class="line">&#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span>
<span class="line">  logger.info(<span class="string">"error"</span>, e);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="RestTemplate配置"><a href="#RestTemplate配置" class="headerlink" title="RestTemplate配置"></a>RestTemplate配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123; RestOperations.class, RestTemplate.class &#125;)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span>
<span class="line"></span>
<span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate.getMessageConverters();</span>
<span class="line">        Iterator&lt;HttpMessageConverter&lt;?&gt;&gt; iterator = messageConverters.iterator();</span>
<span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span>
<span class="line">            HttpMessageConverter&lt;?&gt; converter = iterator.next();</span>
<span class="line">            <span class="keyword">if</span> (converter <span class="keyword">instanceof</span> StringHttpMessageConverter) &#123;</span>
<span class="line">                iterator.remove();</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span>
<span class="line">        restTemplate.getMessageConverters().add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span>
<span class="line">        <span class="keyword">return</span> restTemplate;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;ClientHttpRequestFactory.class&#125;)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span>
<span class="line">        factory.setReadTimeout(<span class="number">15000</span>);<span class="comment">// ms</span></span>
<span class="line">        <span class="keyword">return</span> factory;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://spring.io/blog/2009/03/27/rest-in-spring-3-resttemplate" target="_blank" rel="external">https://spring.io/blog/2009/03/27/rest-in-spring-3-resttemplate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RestTemplate-是什么？&quot;&gt;&lt;a href=&quot;#RestTemplate-是什么？&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 是什么？&quot;&gt;&lt;/a&gt;RestTemplate 是什么？&lt;/h3&gt;&lt;p&gt;RestTemplate是Spring提供的一个访问Http服务的客户端类，非常类似JdbcTemplate, JmsTemplate。它是线程安全的（一旦创建完成）。从名称上来看，该类更多是针对RESTFUL风格API设计的。当然如果你想通过它调用普通的Http接口也是可以的。&lt;/p&gt;
&lt;h3 id=&quot;RestTemplate-的方法&quot;&gt;&lt;a href=&quot;#RestTemplate-的方法&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 的方法&quot;&gt;&lt;/a&gt;RestTemplate 的方法&lt;/h3&gt;&lt;p&gt;RestTemplate提供的方法都是以Http协议中的6个动词开头的：&lt;/p&gt;
&lt;img src=&quot;/2018/05/30/spring-RestTemplate/spring-template.png&quot; alt=&quot;spring-template.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;这些方法的名称清楚地表明它们调用的是哪个HTTP方法，而名称的第二部分表示返回的内容。 例如，&lt;code&gt;getForObject（）&lt;/code&gt;将执行GET，将HTTP响应转换为你选择的对象类型，并返回该对象。&lt;code&gt;postForLocation&lt;/code&gt;将执行POST，将给定对象转换为HTTP请求，并返回可以找到新创建对象的响应&lt;code&gt;HTTP Location&lt;/code&gt;标头。 如你所见，这些方法试图强制执行REST最佳实践。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机的关机方式</title>
    <link href="https://leokongwq.github.io/2018/05/28/java-JVM-shutdown.html"/>
    <id>https://leokongwq.github.io/2018/05/28/java-JVM-shutdown.html</id>
    <published>2018-05-28T07:53:53.000Z</published>
    <updated>2018-05-28T07:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自: <a href="https://zhuanlan.zhihu.com/p/37287644" target="_blank" rel="external">Java 虚拟机的关机方式</a></p>
<p>JVM 是一个虚拟机，既然是虚拟的机器，就必然涉及到关机操作。JVM 关闭时，首先调用关闭钩子，所有钩子执行完毕后，如果需要进行垃圾回收就调用 finalize 方法，否则直接关闭虚拟机。JVM 关闭过程中，不会中断或停止任何线程，在最终关闭虚拟机时强制关闭所有线程。</p>
<a id="more"></a>
<h3 id="关闭钩子"><a href="#关闭钩子" class="headerlink" title="关闭钩子"></a>关闭钩子</h3><p>关闭钩子是一个可以在 JVM 关闭时执行的回调，可以通过 Runtime.addShutdownHook 进行注册。JVM 关闭时首先会调用这些关闭钩子，但不会保证关闭钩子执行的顺序。关闭钩子的执行时间要尽可能短，不应该再做耗时的操作，因为这会影响 JVM 的关闭时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;    <span class="comment">//TODO&#125;);</span></span>
</pre></td></tr></table></figure>
<p>如果调用关闭钩子时还有线程在运行，那么关闭钩子将和这些线程同时运行。因此，关闭钩子的操作必须保证是线程安全的，访问数据需要使用同步机制，要避免死锁。同时，关闭钩子需要考虑 JVM 关闭的所有可能性，不能假设关闭的原因，也不应该尝试去分析 JVM 关闭的原因。关闭钩子通常用于服务的清理工作，如 dubbo 使用关闭钩子来关闭连接并通知注册中心注销服务。但关闭钩子是并发执行的，需要考虑多个钩子之间的相互影响，如提前关闭日志服务可能导致其他钩子或线程无法再使用日志。建议只使用一个关闭钩子来处理所有的事情，这样可以确保任务串行执行，从而避免多个钩子之间的竞争和死锁。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java 中的线程分为普通线程和守护线程。一个线程被创建时会继承创建它的那个线程的守护状态。JVM 启动时创建的线程除了主线程是普通线程，其他线程（如 GC 等）都是守护线程。当线程退出时，JVM 会检查剩余线程的状态，如果剩余的线程都是守护线程已经没有普通线程，那么 JVM 会进行关闭操作。JVM 最终关闭时，守护线程会被直接抛弃，既不会执行 finally 也不会执行回卷栈。因此应该尽量不要使用守护线程，使用时也应该进行简单的操作。</p>
<h3 id="垃圾回收JVM"><a href="#垃圾回收JVM" class="headerlink" title="垃圾回收JVM"></a>垃圾回收JVM</h3><p>关闭的最后一步是进行垃圾回收，主要是文件或套接字资源。这一步主要是调用 finalize 方法进行最后的资源释放。finalize 方法访问的数据可能会被其他线程并发访问，必须对访问进行同步控制。JVM 不保证何时调用 finalize 方法，甚至无法保证是否调用 finalize 方法。因此尽量不要使用 finalize 来释放资源，而应该在 finally 中显式调用 close 方法来关闭资源。</p>
<h3 id="强行关闭"><a href="#强行关闭" class="headerlink" title="强行关闭"></a>强行关闭</h3><p>如果 JVM 遇到问题或者无法关闭，我们可以使用 kill 命令或其他虚拟机自己实现的方法进行强行关闭。强行关闭仅仅是关闭 JVM，不会运行关闭钩子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转自: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/37287644&quot;&gt;Java 虚拟机的关机方式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JVM 是一个虚拟机，既然是虚拟的机器，就必然涉及到关机操作。JVM 关闭时，首先调用关闭钩子，所有钩子执行完毕后，如果需要进行垃圾回收就调用 finalize 方法，否则直接关闭虚拟机。JVM 关闭过程中，不会中断或停止任何线程，在最终关闭虚拟机时强制关闭所有线程。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://leokongwq.github.io/categories/java/"/>
    
    
      <category term="jvm" scheme="https://leokongwq.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper简介</title>
    <link href="https://leokongwq.github.io/2018/05/24/zookeeper-learning-summary.html"/>
    <id>https://leokongwq.github.io/2018/05/24/zookeeper-learning-summary.html</id>
    <published>2018-05-24T12:46:53.000Z</published>
    <updated>2018-05-30T08:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zookeeper-是什么？"><a href="#zookeeper-是什么？" class="headerlink" title="zookeeper 是什么？"></a>zookeeper 是什么？</h3><p>官方解释如下</p>
<blockquote>
<p>ZooKeeper是一个开源的，专门服务于分布式应用的分布式协调服务。 它提供了一组简单的<code>原语</code>，分布式应用程序可以利用这些<code>原语</code>来实现更高级别的服务，以实现同步，配置维护以及组和命名。 它被设计为易于编程，并使用类似大家所熟悉的文件系统目录树结构的数据模型。</p>
</blockquote>
<p>众所周知，协调服务很难正确实现。 它们特别容易出现诸如竞态条件和死锁等错误。 ZooKeeper背后的动机是减轻分布式应用程序从头开始实施协调服务的责任。</p>
<a id="more"></a>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><p>ZooKeeper允许分布式进程通过与标准文件系统组织相似的共享分层命名空间相互协调。 命名空间由称为znode的数据节点组成，按ZooKeeper的说法 - 这些节点类似于文件和目录。 与典型的专为存储功能而设计的文件系统不同，ZooKeeper中的数据保存在内存中，这意味着ZooKeeper可以实现高吞吐量和低延迟。</p>
<p>ZooKeeper的实现关注与高性能，高可用性，和严格有序的访问。 ZooKeeper的高性能意味着它可以用于大型分布式系统。 可靠性使它不会造成单点故障。 严格的顺序意味着可以在客户端实现复杂的同步原语。</p>
<h4 id="多副本"><a href="#多副本" class="headerlink" title="多副本"></a>多副本</h4><p>像ZooKeeper所协调的分布式进程一样，ZooKeeper本身也倾向于部署多个实例，组成一个整体。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zkservice.jpg" alt="zkservice.jpg" title="">
<p>组成ZooKeeper服务的服务器必须全都彼此了解。它们保持状态的内存映像，以及持久存储中的事务日志和快照。 只要大部分服务器都可用，ZooKeeper服务将可用。</p>
<p>客户端只会连接到整个集群中的一台ZooKeeper服务器。 客户端会维护一个TCP连接，通过该连接发送请求，获取响应，获取监视事件并发送心跳。 如果到服务器的TCP连接中断，则客户端将连接到不同的服务器。</p>
<h4 id="顺序性"><a href="#顺序性" class="headerlink" title="顺序性"></a>顺序性</h4><p>ZooKeeper使用一个反映所有ZooKeeper事务顺序的数字来标记每个更新。 后续操作可以使用该顺序来实现更高级别的抽象，例如同步原语。</p>
<h4 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h4><p>zookeeper在读多写少的场景下速度非常快。ZooKeeper 服务可以运行在数千台机器上，在读取操作远多于写操作的场景下性能表现很好。读的性能可能10倍于写性能</p>
<h4 id="数据模型和继承结构的命名空间"><a href="#数据模型和继承结构的命名空间" class="headerlink" title="数据模型和继承结构的命名空间"></a>数据模型和继承结构的命名空间</h4><p>ZooKeeper提供的名称空间非常类似于标准文件系统。 名称是由斜线<code>/</code>分隔的一系列路径元素。 ZooKeeper名称空间中的每个节点都由一个路径标识。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zknamespace.jpg" alt="zknamespace.jpg" title="">
<h4 id="节点和临时节点"><a href="#节点和临时节点" class="headerlink" title="节点和临时节点"></a>节点和临时节点</h4><p>与标准文件系统不同，ZooKeeper命名空间中的每个节点都可以拥有与其相关的数据。 这就像有一个文件系统，允许一个节点既是文件也是目录。 （ZooKeeper被设计用于存储协调数据：状态信息，配置，位置信息等，因此存储在每个节点的数据通常很小，在字节到千字节范围内。）我们使用术语znode来说明我们正在谈论ZooKeeper数据节点。</p>
<p>Znodes维护一个统计结构，包括数据更改的版本号，ACL更改和时间戳，以允许缓存验证和协调更新。 每次znode的数据更改时，版本号都会增加。 例如，每当客户端检索数据时，客户端也会收到数据的版本。</p>
<p>存储在名称空间中每个节点上的数据都是以原子方式读取和写入的。 读取获取与znode关联的所有数据字节，写入将替换所有数据。 每个节点都有一个访问控制列表（ACL），限制谁可以做什么。</p>
<p>ZooKeeper也有临时节点的概念。 只要创建znode的会话处于活动状态，这些znode就会存在。 当会话结束时，znode被删除。 当你想实现[tbd]时，临时节点很有用。</p>
<h4 id="条件更新和观察者"><a href="#条件更新和观察者" class="headerlink" title="条件更新和观察者"></a>条件更新和观察者</h4><p>ZooKeeper支持观察者的概念。 客户可以在znode上设置观察者。 当znode改变时，观察者将被<code>触发并移除</code>。 当观察者被触发时，客户端会收到一个数据包，说明znode已经改变。 如果客户端和其中一个ZooKeeper服务器之间的连接中断，客户端将收到本地通知。 这些可用于[tbd]。</p>
<h4 id="保证"><a href="#保证" class="headerlink" title="保证"></a>保证</h4><p>ZooKeeper非常快速且非常简单。 由于其目标是构建更复杂的服务（如同步）的基础，因此它提供了一组保证。 这些是：</p>
<ul>
<li>顺序一致性  来自客户端的更新将按照它们发送的顺序被执行。</li>
<li>原子性  更新或者成功或失败，不存在中间状态</li>
<li>单系统映像  无论客户端连接到哪个服务器，客户端都会看到相同的服务视图。</li>
<li>可靠性 一旦更新被成功执行，则该更新结果会从该时刻被持久化，直到客户端下一次更新它为止。</li>
<li>及时性 - 系统的客户视图保证在一定的时间范围内保持最新状态。</li>
</ul>
<h4 id="简单的-API"><a href="#简单的-API" class="headerlink" title="简单的 API"></a>简单的 API</h4><p>Zookeeper的一个设计目标就是提供非常简单的编程接口。因此，它只提供了下面的操作：</p>
<h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><p>创建一个节点</p>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>删除一个节点</p>
<h5 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h5><p>判断一个节点是否存在</p>
<h5 id="get-data"><a href="#get-data" class="headerlink" title="get data"></a>get data</h5><p>获取节点的数据</p>
<h5 id="set-data"><a href="#set-data" class="headerlink" title="set data"></a>set data</h5><p>设置节点的数据</p>
<h5 id="get-children"><a href="#get-children" class="headerlink" title="get children"></a>get children</h5><p>获取节点的子节点列表</p>
<h5 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h5><p>等待数据传播</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>ZooKeeper组件显示了ZooKeeper服务的高级组件。 除请求处理器外，构成ZooKeeper服务的每个服务器都复制其各个组件的副本。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zkcomponents.jpg" alt="zkcomponents.jpg" title="">
<p>副本集数据库是一个包含整个数据树的内存数据库。更新操作会被写入磁盘以实现故障恢复，写操作会先序列化到磁盘，然后在内存数据库中执行。</p>
<p>每个ZooKeeper服务器都为客户提供服务。客户端连接至一台服务器以提交irequest。读请求的数据是从每个服务器数据库的本地副本获取。需改服务状态的请求，也就是写请求是通过一致性协议进行处理的。</p>
<p>作为一致性协议的一部分，所有来自客户端的写入请求都被转发到一台称为<code>Leader</code>的服务器。 ZooKeeper服务的其余节点服务器（称为follower）接收Leader发出的消息提议，并就消息传递达成一致。消息传递层负责在Leader宕机后选择新的Leader，并与Leader数据保存同步。</p>
<p>ZooKeeper使用自定义的原子消息传递协议<code>(ZAB)</code>。由于消息传递层是原子的，因此ZooKeeper可以保证本地数据副本永不过期。当Leader接收到一个写请求时，它会计算在写操作被执行时系统所处的状态，并将其转换成一个捕获这个新状态的事务</p>
<h3 id="zookeeper的一致性如何保证"><a href="#zookeeper的一致性如何保证" class="headerlink" title="zookeeper的一致性如何保证"></a>zookeeper的一致性如何保证</h3><h3 id="zookeeper如何选主"><a href="#zookeeper如何选主" class="headerlink" title="zookeeper如何选主"></a>zookeeper如何选主</h3><h3 id="zookeeper写数据的过程"><a href="#zookeeper写数据的过程" class="headerlink" title="zookeeper写数据的过程"></a>zookeeper写数据的过程</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://zookeeper.apache.org/doc/r3.5.4-beta/zookeeperOver.html" target="_blank" rel="external">zookeeperOver.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;zookeeper-是什么？&quot;&gt;&lt;a href=&quot;#zookeeper-是什么？&quot; class=&quot;headerlink&quot; title=&quot;zookeeper 是什么？&quot;&gt;&lt;/a&gt;zookeeper 是什么？&lt;/h3&gt;&lt;p&gt;官方解释如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper是一个开源的，专门服务于分布式应用的分布式协调服务。 它提供了一组简单的&lt;code&gt;原语&lt;/code&gt;，分布式应用程序可以利用这些&lt;code&gt;原语&lt;/code&gt;来实现更高级别的服务，以实现同步，配置维护以及组和命名。 它被设计为易于编程，并使用类似大家所熟悉的文件系统目录树结构的数据模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;众所周知，协调服务很难正确实现。 它们特别容易出现诸如竞态条件和死锁等错误。 ZooKeeper背后的动机是减轻分布式应用程序从头开始实施协调服务的责任。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="zookeeper" scheme="https://leokongwq.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>常见DNS记录解释</title>
    <link href="https://leokongwq.github.io/2018/05/24/common-dns-records.html"/>
    <id>https://leokongwq.github.io/2018/05/24/common-dns-records.html</id>
    <published>2018-05-24T06:18:58.000Z</published>
    <updated>2018-05-24T07:53:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><p>A记录，又称IP指向，用户可以设置域名到目标主机IP地址的映射，从而实现通过域名找到服务器。</p>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>可以配置多条A记录，通过域名解析来实现<code>轮询</code>负载均衡。</p>
<h4 id="泛域名解析"><a href="#泛域名解析" class="headerlink" title="泛域名解析"></a>泛域名解析</h4><p>泛域名解析指的是将一个域名所有未指定的子域名统一解析到一个地址。</p>
<p>在<code>主机名</code>中填入<code>*</code>，类型为<code>A</code>，<code>IP地址/主机名</code>中填入web服务器的IP地址，点击“新增”按钮即可。</p>
<a id="more"></a>
<h3 id="NS-记录"><a href="#NS-记录" class="headerlink" title="NS 记录"></a>NS 记录</h3><p>域名服务器 (NS) 记录用于确定由哪些服务器来解析域名。</p>
<p>例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置<code>news.mydomain.com</code>的NS记录。</p>
<p>说明：<code>优先级</code>中的数字越小表示级别越高；<code>IP地址/主机名</code>中既可以填写IP地址，也可以填写像<code>ns.mydomain.com</code>这样的主机地址，但必须保证该主机地址有效。</p>
<p>如将<code>news.mydomain.com</code>的NS记录指向到<code>ns.mydomain.com</code>，在设置NS记录的同时还需要设置<code>ns.mydomain.com</code>的指向（因为<code>ns.mydomain.com</code>也是一个域名，需要解析）。</p>
<p>否则NS记录将无法正常解析；NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。 </p>
<h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><p>MX记录: 邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名<code>mydomain.com</code>为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以<code>@mydomain.com</code>结尾的邮件。 </p>
<p>说明：MX记录可以使用主机名或IP地址；MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；如果在<code>主机名</code>中填入子域名则此MX记录只对该子域名生效。</p>
<h3 id="CNAME-记录"><a href="#CNAME-记录" class="headerlink" title="CNAME 记录"></a>CNAME 记录</h3><p><code>CNAME</code>(Canonical Name)通常称别名指向。你可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</p>
<p>说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；主机名前不能有任何其他前缀，如：<code>http://</code>等是不被允许的；A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">nslookup  www.baidu.com</span>
<span class="line">Server:		10.1.30.51</span>
<span class="line">Address:	10.1.30.51#53</span>
<span class="line"></span>
<span class="line">Non-authoritative answer:</span>
<span class="line">www.baidu.com	canonical name = www.a.shifen.com.</span>
<span class="line">Name:	www.a.shifen.com</span>
<span class="line">Address: 61.135.169.121</span>
<span class="line">Name:	www.a.shifen.com</span>
<span class="line">Address: 61.135.169.125</span>
</pre></td></tr></table></figure>
<p>从上面的命令输出可以知道：<code>www.baidu.com</code>的别名是<code>www.a.shifen.com.</code></p>
<p>使用 CNAME 的好处就是解耦了域名和 IP 的直接联系, 这样假如服务器 IP 发生变更, 只需要改变CNAME记录中别名的A记录中的IP。</p>
<h3 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h3><p>TXT记录一般是为某条记录设置说明，比如你新建了一条<code>a.ezloo.com</code>的TXT记录，TXT记录内容”this is a test TXT record.”，然后你用 <code>nslookup -qt txt a.ezloo.com</code> ，你就能看到”this is a test TXT record”的字样。</p>
<p>除外，TXT还可以用来验证域名的所有，比如你的域名使用了Google的某项服务，Google会要求你建一个TXT记录，然后Google验证你对此域名是否具备管理权限。</p>
<p>在命令行下可以使用<code>nslookup -qt=txt a.ezloo.com</code>来查看TXT记录。</p>
<h3 id="AAAA记录"><a href="#AAAA记录" class="headerlink" title="AAAA记录"></a>AAAA记录</h3><p>AAAA记录是一个指向IPv6地址的记录。</p>
<p>可以使用nslookup -qt=aaaa a.ezloo.com来查看AAAA记录。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://support.google.com/a/answer/48090?hl=zh-Hans" target="_blank" rel="external">DNS 基础知识</a></p>
<p><a href="https://support.dnsimple.com/categories/dns/" target="_blank" rel="external">DNS articles</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A记录&quot;&gt;&lt;a href=&quot;#A记录&quot; class=&quot;headerlink&quot; title=&quot;A记录&quot;&gt;&lt;/a&gt;A记录&lt;/h3&gt;&lt;p&gt;A记录，又称IP指向，用户可以设置域名到目标主机IP地址的映射，从而实现通过域名找到服务器。&lt;/p&gt;
&lt;h4 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h4&gt;&lt;p&gt;可以配置多条A记录，通过域名解析来实现&lt;code&gt;轮询&lt;/code&gt;负载均衡。&lt;/p&gt;
&lt;h4 id=&quot;泛域名解析&quot;&gt;&lt;a href=&quot;#泛域名解析&quot; class=&quot;headerlink&quot; title=&quot;泛域名解析&quot;&gt;&lt;/a&gt;泛域名解析&lt;/h4&gt;&lt;p&gt;泛域名解析指的是将一个域名所有未指定的子域名统一解析到一个地址。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;主机名&lt;/code&gt;中填入&lt;code&gt;*&lt;/code&gt;，类型为&lt;code&gt;A&lt;/code&gt;，&lt;code&gt;IP地址/主机名&lt;/code&gt;中填入web服务器的IP地址，点击“新增”按钮即可。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT简介</title>
    <link href="https://leokongwq.github.io/2018/05/22/json-web-token.html"/>
    <id>https://leokongwq.github.io/2018/05/22/json-web-token.html</id>
    <published>2018-05-22T04:52:27.000Z</published>
    <updated>2018-06-24T13:48:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-JSON-Web-Token"><a href="#What-is-JSON-Web-Token" class="headerlink" title="What is JSON Web Token?"></a>What is JSON Web Token?</h3><p>JSON Web Token（JWT）是一个开放式标准（<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="external">RFC 7519</a>），它定义了一种紧凑且自包含的方式，用于在各方之间以JSON对象安全的传输信息。 这些信息可以通过数字签名进行验证和信任。 JWT可以使用一个秘钥（HMAC签名算法）或使用RSA的公钥/私钥对对JWT进行签名。</p>
<p>虽然JWT可以加密以提供各方之间数据传递的保密性，但我们将重点关注已签名的令牌。 签名的令牌可以验证其中包含的信息的完整性，而加密令牌隐藏来自其他方的信息。 当令牌使用公钥/私钥对进行签名时，签名还证明只有持有私钥的方是签名方。</p>
<p>下面深入了解下JWT中的概念</p>
<ul>
<li>紧凑: 因为JWT的大小比较小，因为它可以通过URL, POST参数 或者HTTP请求头来进行传递。从另一方面来说说，因为它小，所以传递速度也比较快（占用带宽小）。</li>
<li>自包含: JWT的负载包含了该用户所需的所有信息，从而避免了对DB的多次查询。</li>
</ul>
<a id="more"></a>
<h3 id="When-should-you-use-JSON-Web-Tokens"><a href="#When-should-you-use-JSON-Web-Tokens" class="headerlink" title="When should you use JSON Web Tokens?"></a>When should you use JSON Web Tokens?</h3><p>以下是JSON Web Tokens有用的一些场景：</p>
<ul>
<li>认证: 这是使用JWT最常见的情况。 一旦用户登录，每个后续请求都将包含JWT，允许用户访问该令牌允许的路由，服务和资源。 单点登录（SSO）是当今广泛使用JWT的一项功能，因为它的开销很小，并且能够轻松地跨不同域使用.</li>
<li>信息交换: JWT也是一个在各方之间安全传输信息的好方法。 因为JWT可以签名 - 例如使用公钥/私钥对，所以可以确定发件人是他们自称的人。 此外，由于使用请求头和有效载荷来参加签名的计算，因此你还可以验证内容是否未被篡改。</li>
</ul>
<h3 id="What-is-the-JSON-Web-Token-structure"><a href="#What-is-the-JSON-Web-Token-structure" class="headerlink" title="What is the JSON Web Token structure?"></a>What is the JSON Web Token structure?</h3><p>在JWT的紧凑格式中, JWT由三部分构成，每个部分以<code>.</code>号进行分割。如下所示：</p>
<ul>
<li>Header</li>
<li>Payload</li>
<li>Signature</li>
</ul>
<p>因此一个典型的JWT可能看起来是下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">xxxxx.yyyyy.zzzzz</span>
</pre></td></tr></table></figure>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>header部分通常包含两部分：令牌的类型，和其使用的哈希算法，例如：HMAC，SHA256 或 RSA.</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span>
<span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>然后，这个JSON被Base64Url编码，形成JWT的第一部分。</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>令牌的第二部分是包含声明的有效负载。 声明是关于实体（通常是用户）和其它元数据的声明。 有三种类型的claim：注册的claim，公开的claim和私有的claim。</p>
<ul>
<li>已登记的claims：这些是一组预先定义的claims，这些claims不是强制性的，但建议提供一套有用的，可互操作的claims。 其中一些是：iss（发行者），exp（到期时间），sub（主题），aud（受众）等。</li>
</ul>
<blockquote>
<p>Notice that the claim names are only three characters long as JWT is meant to be compact.</p>
</blockquote>
<ul>
<li>公共的claims: 这些可以由使用JWT的人员随意定义。 但为避免冲突，应在<a href="https://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="external">IANA JSON Web令牌注册表</a>中定义它们，或将其定义为包含防冲突命名空间的URI。</li>
<li>私有的claims: 这些是为了同意使用它们并且既没有登记也没有公开声明的各方之间共享信息而创建的定制声明。</li>
</ul>
<p>一个有效的负载可以是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span>
<span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span>
<span class="line">  &quot;admin&quot;: true</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>然后将有效载荷Base64Url进行编码以形成JSON Web令牌的第二部分。</p>
<blockquote>
<p>请注意，对于已签名的令牌，此信息尽管受到篡改保护，但任何人都可以阅读。 除非加密，否则不要将关键信息放在JWT的payload或header中。</p>
</blockquote>
<h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>要创建签名部分，你必须拥用已经编码的header，编码的有效载荷，秘钥，header中指定的算法并签名。</p>
<p>例如，如果你想使用HMAC SHA256算法，签名将按照以下方式创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span>
</pre></td></tr></table></figure>
<p>该签名用于验证消息在一路上没有改变，并且在使用私钥签名的令牌的情况下，它还可以验证JWT的发件人是谁说的。</p>
<h4 id="组合起来"><a href="#组合起来" class="headerlink" title="组合起来"></a>组合起来</h4><p>输出是三个由<code>.</code>号分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递，而与基于XML的标准（如SAML）相比，它更加紧凑。</p>
<p>以下显示了一个JWT，它具有签名通过编码的header和有效负载，并且使用秘钥进行签名。</p>
<img src="/2018/05/22/json-web-token/encoded-jwt3.png" alt="encoded-jwt3.png" title="">
<p>如果你想要使用JWT并将这些概念付诸实践，则可以使用<a href="https://link.jianshu.com/?t=https://jwt.io/#debugger-io" target="_blank" rel="external">jwt.io调试器</a>来解码，验证和生成JWT。</p>
<h3 id="JWT-如何工作"><a href="#JWT-如何工作" class="headerlink" title="JWT 如何工作"></a>JWT 如何工作</h3><p>在认证场景中，相较于传统的模式(在服务端生成会话并返回一个cookie)，当用户使用他们的凭据成功登录以后，一个JSON Web Token将会被返回，该令牌必须被保存在本地(典型的场景是保存在本地存储中，不过cookie也常常用来保存这一类信息)。</p>
<p>无论何时，当用户想要访问一个受保护的资源，他必须将JWT发送到服务端，典型的发送方式是通过 Authorization 请求头字段，并指定 Bearer 模式。请求头的内容看起来会像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span>
</pre></td></tr></table></figure>
<p>这是一个无状态的认证机制，用户信息永远也不会保存在服务器的内存中。服务器受保护的路由会检查通过Authorization头传递的令牌是否是一个正确的令牌，如果检查通过，用户将被允许访问受保护的资源。由于JWT是自包含的，所有必要的信息都包含在令牌中，进而减少了查询数据库所需要的时间。</p>
<p>正因为如此，JWT允许你的服务完全依赖于无状态的数据接口。它不关心你的APIs寄宿在哪个域名之下，因此跨域访问(CORS)将不会成为一个问题(使用cookie就不行)</p>
<p>下面的图表展示了整个处理流程</p>
<img src="/2018/05/22/json-web-token/jwt-diagram.png" alt="jwt-diagram.png" title="">
<h3 id="安全总结"><a href="#安全总结" class="headerlink" title="安全总结"></a>安全总结</h3><ol>
<li>预防XSS可以通过cookie存储JWT， http-only, secure</li>
<li>预防CSRF可以通过给请求添加CSRF token， 该token可以放在WebStorage中。如此，攻击者网站不能获取该token。</li>
</ol>
<p>当然了，如果攻击者第一步通过XSS获取了CSRF token，第二步通过CSRF攻击，则漏洞还是存在的。单此种情况发生的概率能小一点。只能通过缩短token的时间</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mozillazg.com/2015/06/hello-jwt.html" target="_blank" rel="external">hello-jwt</a><br><a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage/" target="_blank" rel="external">where-to-store-your-jwts-cookies-vs-html5-web-storage</a><br><a href="https://stormpath.com/blog/jwt-the-right-way/" target="_blank" rel="external">jwt-the-right-way</a><br><a href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/" target="_blank" rel="external">ten-things-you-should-know-about-tokens-and-cookies</a><br><a href="http://stackoverflow.com/questions/27067251/where-to-store-jwt-in-browser-how-to-protect-against-csrf" target="_blank" rel="external">where-to-store-jwt-in-browser-how-to-protect-against-csrf</a><br><a href="http://hippoom.github.io/blogs/stoping-using-jwt-for-sessions.html" target="_blank" rel="external">别再使用JWT</a><br><a href="https://bbs.huaweicloud.com/blogs/06607ea7b53211e7b8317ca23e93a891" target="_blank" rel="external">基于JWT的Token认证机制及安全问题</a><br><a href="https://x-team.com/blog/my-experience-with-json-web-tokens/" target="_blank" rel="external">My Experience with JSON Web Tokens</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-JSON-Web-Token&quot;&gt;&lt;a href=&quot;#What-is-JSON-Web-Token&quot; class=&quot;headerlink&quot; title=&quot;What is JSON Web Token?&quot;&gt;&lt;/a&gt;What is JSON Web Token?&lt;/h3&gt;&lt;p&gt;JSON Web Token（JWT）是一个开放式标准（&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC 7519&lt;/a&gt;），它定义了一种紧凑且自包含的方式，用于在各方之间以JSON对象安全的传输信息。 这些信息可以通过数字签名进行验证和信任。 JWT可以使用一个秘钥（HMAC签名算法）或使用RSA的公钥/私钥对对JWT进行签名。&lt;/p&gt;
&lt;p&gt;虽然JWT可以加密以提供各方之间数据传递的保密性，但我们将重点关注已签名的令牌。 签名的令牌可以验证其中包含的信息的完整性，而加密令牌隐藏来自其他方的信息。 当令牌使用公钥/私钥对进行签名时，签名还证明只有持有私钥的方是签名方。&lt;/p&gt;
&lt;p&gt;下面深入了解下JWT中的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;紧凑: 因为JWT的大小比较小，因为它可以通过URL, POST参数 或者HTTP请求头来进行传递。从另一方面来说说，因为它小，所以传递速度也比较快（占用带宽小）。&lt;/li&gt;
&lt;li&gt;自包含: JWT的负载包含了该用户所需的所有信息，从而避免了对DB的多次查询。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>ActiveMQ 消息重发策略</title>
    <link href="https://leokongwq.github.io/2018/05/19/activemq-redelivery-policy-config.html"/>
    <id>https://leokongwq.github.io/2018/05/19/activemq-redelivery-policy-config.html</id>
    <published>2018-05-19T01:24:28.000Z</published>
    <updated>2018-05-19T02:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在使用ActiveMQ时，配置了消息重发策略。 但因为对配置项的理解不够深刻，导致虽然消息重新被投递了，单因为时间间隔太小，最终被放入DLQ中。</p>
<blockquote>
<p>注意： 我使用的ActiveMQ版本是5.8</p>
</blockquote>
<h3 id="错误配置"><a href="#错误配置" class="headerlink" title="错误配置"></a>错误配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> RedeliveryPolicy <span class="title">redeliveryPolicy</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   RedeliveryPolicy redeliveryPolicy = <span class="keyword">new</span> RedeliveryPolicy();</span>
<span class="line">   <span class="comment">//是否在每次尝试重新发送失败后,增长这个等待时间</span></span>
<span class="line">   redeliveryPolicy.setUseExponentialBackOff(<span class="keyword">true</span>);</span>
<span class="line">   <span class="comment">//重发次数,默认为6次   这里设置为10次</span></span>
<span class="line">   redeliveryPolicy.setMaximumRedeliveries(<span class="number">10</span>);</span>
<span class="line">   <span class="comment">//重发时间间隔,默认为1秒</span></span>
<span class="line">   redeliveryPolicy.setInitialRedeliveryDelay(<span class="number">1</span>);</span>
<span class="line">   <span class="comment">//第一次失败后重新发送之前等待1秒,第二次失败再等待1 * 2秒,这里的2就是value</span></span>
<span class="line">   redeliveryPolicy.setBackOffMultiplier(<span class="number">2</span>);</span>
<span class="line">   <span class="comment">//是否避免消息碰撞</span></span>
<span class="line">   redeliveryPolicy.setUseCollisionAvoidance(<span class="keyword">false</span>);</span>
<span class="line">   <span class="comment">//设置重发最大拖延时间-1 表示没有拖延只有UseExponentialBackOff(true)为true时生效</span></span>
<span class="line">   redeliveryPolicy.setMaximumRedeliveryDelay(-<span class="number">1</span>);</span>
<span class="line">   <span class="keyword">return</span> redeliveryPolicy;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<p>上面配置有如下问题：</p>
<ol>
<li>第一次投递延时<code>(initialRedeliveryDelay)</code>为1毫秒, 而不是注释里面说的1秒。这是第一个致命错误</li>
<li>最大重投次数<code>(maximumRedeliveries)</code> 为10。 加上第一个配置，导致短时间内消息被重新投递多次，一般来说消费者肯定不能成功消费的。因此会导致消息被放入DLQ中，业务丢失了消息。<br>这是第二个错误，重投次数有点小。对于非常重要的消息，可以适当调大该配置值。</li>
<li>是否启用重投时延指数增长策略<code>(useExponentialBackOff) 默认是false</code>。如何理解呢？ActiveMQ 会在延迟<code>initialRedeliveryDelay</code> 指定的时间后发起<strong>第一次</strong>重新投递，之后根据是否设置了<code>useExponentialBackOff=true</code>来判断是否需要递增每次投递的时延。如果设置了<code>useExponentialBackOff=true</code>，那么每次重新投递的时间会延迟<code>redeliveryDelay * backOffMultiplier</code></li>
</ol>
<p>由此可以退出每次消息重新投递的延时为：</p>
<table>
<thead>
<tr>
<th>次数</th>
<th>延时</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1毫秒</td>
</tr>
<tr>
<td>2</td>
<td>2 毫秒</td>
</tr>
<tr>
<td>3</td>
<td>4 毫秒</td>
</tr>
<tr>
<td>4</td>
<td>8 毫秒</td>
</tr>
<tr>
<td>5</td>
<td>16 毫秒</td>
</tr>
<tr>
<td>6</td>
<td>32 毫秒</td>
</tr>
<tr>
<td>7</td>
<td>64 毫秒</td>
</tr>
<tr>
<td>8</td>
<td>128 毫秒</td>
</tr>
<tr>
<td>9</td>
<td>256 毫秒</td>
</tr>
<tr>
<td>10</td>
<td>512 毫秒</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，完全没有达到需要的效果。痛定思痛，翻看官方文档和源代码，将ActiveMQ消息重复策略总结如下：</p>
<h3 id="消息重发时机"><a href="#消息重发时机" class="headerlink" title="消息重发时机"></a>消息重发时机</h3><p>1．在使用事务的Session中，调用rollback()方法；<br>2．在使用事务的Session中，调用commit()方法之前就关闭了Session;<br>3．在Session中使用CLIENT_ACKNOWLEDGE签收模式，并且调用了<code>recover()</code>方法。</p>
<p>可以通过设置<code>ActiveMQConnectionFactory</code>和<code>ActiveMQConnection</code>来定制想要的再次传送策略。</p>
<h3 id="消息重发配置项"><a href="#消息重发配置项" class="headerlink" title="消息重发配置项"></a>消息重发配置项</h3><h4 id="collisionAvoidanceFactor"><a href="#collisionAvoidanceFactor" class="headerlink" title="collisionAvoidanceFactor"></a>collisionAvoidanceFactor</h4><p>默认值 0.15     </p>
<p>设置防止冲突范围的正负百分比，只有启用useCollisionAvoidance参数时才生效。</p>
<h4 id="maximumRedeliveries"><a href="#maximumRedeliveries" class="headerlink" title="maximumRedeliveries"></a>maximumRedeliveries</h4><p>默认值：6</p>
<p>最大重传次数。 达到最大重连次数后抛出异常。为-1时不限制次数，为0时表示不进行重传。</p>
<h4 id="maximumRedeliveryDelay"><a href="#maximumRedeliveryDelay" class="headerlink" title="maximumRedeliveryDelay"></a>maximumRedeliveryDelay</h4><p>默认值 -1    </p>
<p>最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。</p>
<h4 id="initialRedeliveryDelay"><a href="#initialRedeliveryDelay" class="headerlink" title="initialRedeliveryDelay"></a>initialRedeliveryDelay</h4><p>默认值 1000L     </p>
<p>初始重发延迟时间</p>
<h4 id="redeliveryDelay"><a href="#redeliveryDelay" class="headerlink" title="redeliveryDelay"></a>redeliveryDelay</h4><p>默认值：1000L     </p>
<p>重发延迟时间，当initialRedeliveryDelay=0时生效（v5.4）</p>
<h4 id="useCollisionAvoidance"><a href="#useCollisionAvoidance" class="headerlink" title="useCollisionAvoidance"></a>useCollisionAvoidance</h4><p>默认值 false     </p>
<p>启用防止冲突功能，因为消息接收时是可以使用多线程并发处理的，应该是为了重发的安全性，避开所有并发线程都在同一个时间点进行消息接收处理。所有线程在同一个时间点处理时会发生什么问题呢？应该没有问题，只是为了平衡broker处理性能，不会有时很忙，有时很空闲。</p>
<h4 id="useExponentialBackOff"><a href="#useExponentialBackOff" class="headerlink" title="useExponentialBackOff"></a>useExponentialBackOff</h4><p>默认值 false          </p>
<p>启用指数倍数递增的方式增加延迟时间。</p>
<h4 id="backOffMultiplier"><a href="#backOffMultiplier" class="headerlink" title="backOffMultiplier"></a>backOffMultiplier</h4><p>默认值 5    </p>
<p>重连时间间隔递增倍数，只有值大于1和启用<code>useExponentialBackOff</code>参数时才生效。</p>
<h3 id="重发源码分析"><a href="#重发源码分析" class="headerlink" title="重发源码分析"></a>重发源码分析</h3><h4 id="重发时机"><a href="#重发时机" class="headerlink" title="重发时机"></a>重发时机</h4><figure class="highlight java"><figcaption><span>ActiveMQMessageConsumer.rollback</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> currentRedeliveryCount = lastMd.getMessage().getRedeliveryCounter();</span>
<span class="line"> <span class="keyword">if</span> (currentRedeliveryCount &gt; <span class="number">0</span>) &#123;</span>
<span class="line">     <span class="comment">// 获取下次被重新投递的延迟时间</span></span>
<span class="line">     redeliveryDelay = redeliveryPolicy.getNextRedeliveryDelay(redeliveryDelay);</span>
<span class="line"> &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">     <span class="comment">//  第一被重新投递的延迟时间 </span></span>
<span class="line">     redeliveryDelay = redeliveryPolicy.getInitialRedeliveryDelay();</span>
<span class="line"> &#125;</span>
<span class="line"> <span class="comment">// 当前消息被重新投递的此时大于配置的值，此时消息会被发送到DLQ</span></span>
<span class="line"> <span class="keyword">if</span> (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES</span>
<span class="line">                    &amp;&amp; lastMd.getMessage().getRedeliveryCounter() &gt; redeliveryPolicy.getMaximumRedeliveries()) &#123;</span>
<span class="line"><span class="comment">// We need to NACK the messages so that they get sent to the</span></span>
<span class="line"><span class="comment">// DLQ.</span></span>
<span class="line"><span class="comment">// Acknowledge the last message.</span></span>
<span class="line"></span>
<span class="line">MessageAck ack = <span class="keyword">new</span> MessageAck(lastMd, MessageAck.POSION_ACK_TYPE, deliveredMessages.size());</span>
<span class="line"> &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">     <span class="comment">// only redelivery_ack after first delivery</span></span>
<span class="line">     <span class="keyword">if</span> (currentRedeliveryCount &gt; <span class="number">0</span>) &#123;</span>
<span class="line">         MessageAck ack = <span class="keyword">new</span> MessageAck(lastMd, MessageAck.REDELIVERED_ACK_TYPE, deliveredMessages.size());</span>
<span class="line">         ack.setFirstMessageId(firstMsgId);</span>
<span class="line">         session.sendAck(ack,<span class="keyword">true</span>);</span>
<span class="line">     &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="重新投递的延迟时间计算"><a href="#重新投递的延迟时间计算" class="headerlink" title="重新投递的延迟时间计算"></a>重新投递的延迟时间计算</h4><figure class="highlight java"><figcaption><span>RedeliveryPolicy.getNextRedeliveryDelay</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextRedeliveryDelay</span><span class="params">(<span class="keyword">long</span> previousDelay)</span> </span>&#123;</span>
<span class="line">   <span class="keyword">long</span> nextDelay = redeliveryDelay;</span>
<span class="line">   <span class="comment">//启用了 指数级延迟时间递增策略</span></span>
<span class="line">   <span class="keyword">if</span> (previousDelay &gt; <span class="number">0</span> &amp;&amp; useExponentialBackOff &amp;&amp; backOffMultiplier &gt; <span class="number">1</span>) &#123;</span>
<span class="line">       nextDelay = (<span class="keyword">long</span>) (previousDelay * backOffMultiplier);</span>
<span class="line">       <span class="keyword">if</span>(maximumRedeliveryDelay != -<span class="number">1</span> &amp;&amp; nextDelay &gt; maximumRedeliveryDelay) &#123;</span>
<span class="line">           <span class="comment">// in case the user made max redelivery delay less than redelivery delay for some reason.</span></span>
<span class="line">           nextDelay = Math.max(maximumRedeliveryDelay, redeliveryDelay);</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//  启用防止冲突功能, 计算一个随机的延迟时间</span></span>
<span class="line">   <span class="keyword">if</span> (useCollisionAvoidance) &#123;</span>
<span class="line">       <span class="comment">/*</span>
<span class="line">        * First random determines +/-, second random determines how far to</span>
<span class="line">        * go in that direction. -cgs</span>
<span class="line">        */</span></span>
<span class="line">       Random random = getRandomNumberGenerator();</span>
<span class="line">       <span class="keyword">double</span> variance = (random.nextBoolean() ? collisionAvoidanceFactor : -collisionAvoidanceFactor) * random.nextDouble();</span>
<span class="line">       nextDelay += nextDelay * variance;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//每次重新投递的延迟时间是固定的 </span></span>
<span class="line">   <span class="keyword">return</span> nextDelay;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://activemq.apache.org/redelivery-policy.html" target="_blank" rel="external">http://activemq.apache.org/redelivery-policy.html</a></p>
<p><a href="http://activemq.apache.org/message-redelivery-and-dlq-handling.html" target="_blank" rel="external">http://activemq.apache.org/message-redelivery-and-dlq-handling.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在使用ActiveMQ时，配置了消息重发策略。 但因为对配置项的理解不够深刻，导致虽然消息重新被投递了，单因为时间间隔太小，最终被放入DLQ中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 我使用的ActiveMQ版本是5.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;错误配置&quot;&gt;&lt;a href=&quot;#错误配置&quot; class=&quot;headerlink&quot; title=&quot;错误配置&quot;&gt;&lt;/a&gt;错误配置&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RedeliveryPolicy &lt;span class=&quot;title&quot;&gt;redeliveryPolicy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   RedeliveryPolicy redeliveryPolicy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedeliveryPolicy();&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//是否在每次尝试重新发送失败后,增长这个等待时间&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setUseExponentialBackOff(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//重发次数,默认为6次   这里设置为10次&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setMaximumRedeliveries(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//重发时间间隔,默认为1秒&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setInitialRedeliveryDelay(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//第一次失败后重新发送之前等待1秒,第二次失败再等待1 * 2秒,这里的2就是value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setBackOffMultiplier(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//是否避免消息碰撞&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setUseCollisionAvoidance(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//设置重发最大拖延时间-1 表示没有拖延只有UseExponentialBackOff(true)为true时生效&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setMaximumRedeliveryDelay(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; redeliveryPolicy;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="ActiveMQ" scheme="https://leokongwq.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>REST API 版本化</title>
    <link href="https://leokongwq.github.io/2018/05/15/rest-version.html"/>
    <id>https://leokongwq.github.io/2018/05/15/rest-version.html</id>
    <published>2018-05-15T12:46:21.000Z</published>
    <updated>2018-05-15T13:07:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>要管理应用接口业务逻辑的复杂性，需要你对API进行版本管理。版本控制可帮助你在需要变更服务逻辑时快速迭代。</p>
<blockquote>
<p>随着系统业务发展或逻辑复杂度的不断提高，API的变化是不可避免的。 当变更会破坏现有系统客户端的集成时，管理这种变化的影响可能是相当大的挑战。</p>
</blockquote>
<h2 id="何时对REST-API进行版本化"><a href="#何时对REST-API进行版本化" class="headerlink" title="何时对REST API进行版本化"></a>何时对REST API进行版本化</h2><p>只有在重大破坏性变更发生时才考虑对API进行版本升级。破坏性变更包括：</p>
<ul>
<li>一次或多次调用的响应数据格式发生了变化</li>
<li>响应数据类型发生变化（例如，将整数变为浮点数）</li>
<li>删除API返回数据的部分内</li>
</ul>
<p>发生破坏性变更时，应该总是修改API的主版本号。</p>
<p>非破坏性变更（如添加新的REST端点或新的响应参数）不需要更改主版本号。 </p>
<a id="more"></a>
<h2 id="REST-API-版本号如何定义"><a href="#REST-API-版本号如何定义" class="headerlink" title="REST API 版本号如何定义"></a>REST API 版本号如何定义</h2><p>REST 没有提供任何关于API版本管理的指导规范，但是常用的实现方式有如下三种：</p>
<h3 id="在URI上包含版本号"><a href="#在URI上包含版本号" class="headerlink" title="在URI上包含版本号"></a>在URI上包含版本号</h3><p>使用URI是最直接的方法（也是最常用的方法），尽管它违背了URI应该引用唯一资源的原则。 当版本更新时，您也可以保证客户端的集成。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">http://api.example.com/v1</span>
<span class="line">http://apiv1.example.com</span>
</pre></td></tr></table></figure>
<p>版本号不必是数字，也不必使用<code>v[x]</code>这样语法指定。 替代方案包括日期，项目名称，季节或其他标识符，这些标识符对于产生API的团队来说足够有意义，并且随着版本的变化足够灵活地进行更改。</p>
<h3 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h3><p>自定义请求头（例如<code>Accept-version</code>）允许你在版本之间保留URI，尽管它实际上是现有<code>Accept</code>头实现的内容协商行为的重复。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Accept-version: v1</span>
<span class="line">Accept-version: v2</span>
</pre></td></tr></table></figure>
<h3 id="使用请求头-Accept"><a href="#使用请求头-Accept" class="headerlink" title="使用请求头 Accept"></a>使用请求头 <code>Accept</code></h3><p>内容协商可能让你保留一组干净的URL，但你仍然必须处理在某处放置不同版本内容的复杂性。 这种负担往往会被上移到您的API控制器，这些控制器负责确定要发送的资源版本。 最终结果往往是更复杂的API，因为客户端在请求资源之前必须知道指定哪些头。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Accept: application/vnd.example.v1+json</span>
<span class="line">Accept: application/vnd.example+json;version=1.0</span>
</pre></td></tr></table></figure>
<p>在现实世界中，API永远不会变的完全稳定。 因此，如何管理这一变化非常重要。 对于大多数API而言，详细记录API的变更信息和逐渐废弃API是可行的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要管理应用接口业务逻辑的复杂性，需要你对API进行版本管理。版本控制可帮助你在需要变更服务逻辑时快速迭代。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随着系统业务发展或逻辑复杂度的不断提高，API的变化是不可避免的。 当变更会破坏现有系统客户端的集成时，管理这种变化的影响可能是相当大的挑战。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;何时对REST-API进行版本化&quot;&gt;&lt;a href=&quot;#何时对REST-API进行版本化&quot; class=&quot;headerlink&quot; title=&quot;何时对REST API进行版本化&quot;&gt;&lt;/a&gt;何时对REST API进行版本化&lt;/h2&gt;&lt;p&gt;只有在重大破坏性变更发生时才考虑对API进行版本升级。破坏性变更包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次或多次调用的响应数据格式发生了变化&lt;/li&gt;
&lt;li&gt;响应数据类型发生变化（例如，将整数变为浮点数）&lt;/li&gt;
&lt;li&gt;删除API返回数据的部分内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发生破坏性变更时，应该总是修改API的主版本号。&lt;/p&gt;
&lt;p&gt;非破坏性变更（如添加新的REST端点或新的响应参数）不需要更改主版本号。 &lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="REST" scheme="https://leokongwq.github.io/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot应用部署模式</title>
    <link href="https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html"/>
    <id>https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html</id>
    <published>2018-05-15T09:32:00.000Z</published>
    <updated>2018-05-15T10:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>越来越多的人开始使用SpringBoot来实现项目的快速开发。每个团队都会面临一个同样的问题：如何部署SpringBoot应用？大部分人会想：这还需要考虑？当然是同步<code>Fat Jar</code>的方式部署喽。现实是残酷的！可能的原因有：</p>
<ul>
<li>已有的发布系统不支持</li>
<li>团队成员习惯了war包的部署方式</li>
<li>外置的Servlet容器更容易配置</li>
<li>文件路径相关的代码调整</li>
<li>其它原因</li>
</ul>
<a id="more"></a>
<p>SpringBoot 应用默认的打包结果是一个jar包。如果需要按照war包的形式进行部署，我们需要做如下的配置就能够实现。</p>
<h3 id="第一步-扩展-SpringBootServletInitializer"><a href="#第一步-扩展-SpringBootServletInitializer" class="headerlink" title="第一步 扩展 SpringBootServletInitializer"></a>第一步 扩展 SpringBootServletInitializer</h3><p><code>SpringBootServletInitializer</code>是一个实现<code>WebApplicationInitializer</code>接口的抽象类，它是servlet 3.0+环境的主要抽象，以便以编程方式配置ServletContext。 它将Servlet，Filter和ServletContextInitializer bean从应用程序上下文绑定到servlet容器。</p>
<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.websystique.springboot;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages=&#123;<span class="string">"com.websystique.springboot"</span>&#125;)<span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootStandAloneWarApp</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> application.sources(SpringBootStandAloneWarApp .class);</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        SpringApplication.run(SpringBootStandAloneWarApp.class, args);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="第二步-修改-Maven打包类型为’war’"><a href="#第二步-修改-Maven打包类型为’war’" class="headerlink" title="第二步 修改 Maven打包类型为’war’"></a>第二步 修改 Maven打包类型为’war’</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line">......</span>
</pre></td></tr></table></figure>
<h3 id="第三步-排除内嵌的Servlet容器"><a href="#第三步-排除内嵌的Servlet容器" class="headerlink" title="第三步 排除内嵌的Servlet容器"></a>第三步 排除内嵌的Servlet容器</h3><p>eg.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="完整的pom文件"><a href="#完整的pom文件" class="headerlink" title="完整的pom文件"></a>完整的pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">startClass</span>&gt;</span>SpringBootStandAloneWarApp<span class="tag">&lt;/<span class="name">startClass</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Adds Tomcat and Spring MVC, along others --&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span>
<span class="line">                        <span class="comment">&lt;!-- this will get rid of version info from war file name --&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">mvn clean package</span>
</pre></td></tr></table></figure>
<p>然后将war包部署到已有的Servlet容器中。</p>
<h3 id="同时支持jar和war类型"><a href="#同时支持jar和war类型" class="headerlink" title="同时支持jar和war类型"></a>同时支持jar和war类型</h3><p>上面的pom.xml配置能很好的支持war包类型的部署，但是在开发阶段我们还是希望通过Main方法的方式进行运行。此时我们可以通过Maven的profile功能实现。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>$&#123;artifact-packaging&#125;<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">startClass</span>&gt;</span>SpringBootStandAloneWarApp<span class="tag">&lt;/<span class="name">startClass</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Additionally, Please make sure that your JAVA_HOME is pointing to </span>
<span class="line">            1.8 when building on commandline --&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Adds Tomcat and Spring MVC, along others --&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifact-packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">artifact-packaging</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>remote<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifact-packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">artifact-packaging</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span>
<span class="line">                                   <span class="comment">&lt;!-- this will get rid of version info from war file name --&gt;</span></span>
<span class="line">                            <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>现在我们就可以在本地以FAT jar的方式运行。当发布到生产环境时以war的方式进行部署了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;越来越多的人开始使用SpringBoot来实现项目的快速开发。每个团队都会面临一个同样的问题：如何部署SpringBoot应用？大部分人会想：这还需要考虑？当然是同步&lt;code&gt;Fat Jar&lt;/code&gt;的方式部署喽。现实是残酷的！可能的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已有的发布系统不支持&lt;/li&gt;
&lt;li&gt;团队成员习惯了war包的部署方式&lt;/li&gt;
&lt;li&gt;外置的Servlet容器更容易配置&lt;/li&gt;
&lt;li&gt;文件路径相关的代码调整&lt;/li&gt;
&lt;li&gt;其它原因&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring构建RESTFUL风格的controller</title>
    <link href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html"/>
    <id>https://leokongwq.github.io/2018/05/12/spring-rest-controller.html</id>
    <published>2018-05-12T15:23:46.000Z</published>
    <updated>2018-05-30T08:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 <code>@RestController</code>注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。</p>
<p>Spring在内部使用<code>HttpMessageConverters</code>将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中的<code>Accept Headers</code>。</p>
<p>为了服务JSON，我们将使用Jackson库[jackson-databind.jar]。 对于XML，我们将使用Jackson XML扩展[jackson-dataformat-xml.jar]。 只有在类路径中存在这些库才会触发Spring以所需格式转换输出。 此外，我们将进一步通过使用JAXB批注注释域类来支持XML，以防Jackson的XML扩展库由于某种原因而不可用。</p>
<p><strong>注意</strong>：如果你通过在浏览器中输入网址发送请求，则可以添加后缀[.xml / .json]，以帮助确定要提供的内容的类型。</p>
<a id="more"></a>
<blockquote>
<p>文章使用的是SpringBoot 1.5.2版本，并使用MAVEN3管理项目。</p>
</blockquote>
<h3 id="第一步-添加实体类"><a href="#第一步-添加实体类" class="headerlink" title="第一步 添加实体类"></a>第一步 添加实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="第二步-添加-Controller"><a href="#第二步-添加-Controller" class="headerlink" title="第二步 添加 Controller"></a>第二步 添加 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.domain.Message;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to RestTemplate Example."</span>;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/&#123;player&#125;"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">message</span><span class="params">(@PathVariable String player)</span> </span>&#123;</span>
<span class="line">        Message msg = <span class="keyword">new</span> Message(player, <span class="string">"Hello "</span> + player);</span>
<span class="line">        <span class="keyword">return</span> msg;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>如果jackson-dataformat-xml.jar不可用，并且您仍希望获得XML响应，则只需在模型类（Message）上添加JAXB注释，即可启用XML输出支持。 以下是相同的演示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span>
<span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span>
<span class="line"></span>
<span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"player"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span></span>&#123;</span>
<span class="line">         </span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>有了以上的准备，你可以通过下面的请求url来获取指定格式的响应：</p>
<h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a><br><a href="http://127.0.0.1:2223/hello/tom.json" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.json</a></p>
<h4 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a> 添加请求头 Accept:application/xml</p>
<p>或 </p>
<p><a href="http://127.0.0.1:2223/hello/tom.xml" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.xml</a></p>
<h3 id="ContentNegotiationStrategy"><a href="#ContentNegotiationStrategy" class="headerlink" title="ContentNegotiationStrategy"></a>ContentNegotiationStrategy</h3><p><code>ContentNegotiationStrategy</code>是一个策略接口，作用是将给定的请求解析为媒体类型（<code>MediaType</code>）列表。</p>
<p>它有两个重要的实现类，如下所示</p>
<h4 id="ServletPathExtensionContentNegotiationStrategy"><a href="#ServletPathExtensionContentNegotiationStrategy" class="headerlink" title="ServletPathExtensionContentNegotiationStrategy"></a>ServletPathExtensionContentNegotiationStrategy</h4><p>根据请求路径的扩展名来解析</p>
<h4 id="HeaderContentNegotiationStrategy"><a href="#HeaderContentNegotiationStrategy" class="headerlink" title="HeaderContentNegotiationStrategy"></a>HeaderContentNegotiationStrategy</h4><p>根据请求头<code>Accept</code>来解析</p>
<blockquote>
<p>Spring 在内部会根据请求的MediaType信息和HttpMessageConverter支持的MediaType进行匹配，如果能找到支持该请求的MediaType的HttpMessageConverter，则利用该HttpMessageConverter输出响应。</p>
</blockquote>
<h3 id="REST快速理解"><a href="#REST快速理解" class="headerlink" title="REST快速理解"></a>REST快速理解</h3><p>REST代表<code>Representational State Transfer</code>。它是一种可用于设计Web服务的架构风格，可从各种客户端使用。 其核心思想是，不使用诸如CORBA，RPC或SOAP之类的复杂机制来连接机器，而是使用简单的HTTP来进行调用。</p>
<p>在基于REST的设计中，对资源的操作是通过一组通用的动词来实现：</p>
<ul>
<li>创建资源：应该使用 HTTP POST</li>
<li>检索资源：应使用 HTTP GET</li>
<li>更新资源：应该使用 HTTP PUT</li>
<li>删除资源：应该使用 HTTP DELETE</li>
</ul>
<p>这意味着，作为REST服务开发人员或调用方，你应该遵守上述标准。</p>
<p>通常基于Rest的Web服务返回JSON或XML作为响应，尽管它不仅限于这些类型。 客户端可以指定（使用HTTP Accept头）他们感兴趣的资源类型，服务器可以返回资源，指定它正在服务的资源的Content-Type。 想要详细了解REST，这个<a href="https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming" target="_blank" rel="external">StackOverflow</a>是必须要阅读的。</p>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h3><p>以下是一个基于Rest的<code>Contrller</code>，实现了REST API。 </p>
<p>该<code>Contrller</code>是提供了如下的API：</p>
<ul>
<li>GET request to /api/user/ returns a list of users</li>
<li>GET request to /api/user/1 returns the user with ID 1</li>
<li>POST request to /api/user/ with a user object as JSON creates a new user</li>
<li>PUT request to /api/user/3 with a user object as JSON updates the user with ID 3</li>
<li>DELETE request to /api/user/4 deletes the user with ID 4</li>
<li>DELETE request to /api/user/ deletes all the users</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.service.UserService;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    UserService userService;  <span class="comment">//Service which will do all data retrieval/manipulation work</span></span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Retrieve All Users--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.GET)</span>
<span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; listAllUsers() &#123;</span>
<span class="line">        List&lt;User&gt; users = userService.findAllUsers();</span>
<span class="line">        <span class="keyword">if</span>(users.isEmpty())&#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.NO_CONTENT);<span class="comment">//You many decide to return HttpStatus.NOT_FOUND</span></span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">//-------------------Retrieve Single User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Fetching User with id "</span> + id);</span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Create a User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.POST)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">createUser</span><span class="params">(@RequestBody User user,    UriComponentsBuilder ucBuilder)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Creating User "</span> + user.getName());</span>
<span class="line"> </span>
<span class="line">        <span class="keyword">if</span> (userService.isUserExist(user)) &#123;</span>
<span class="line">            System.out.println(<span class="string">"A User with name "</span> + user.getName() + <span class="string">" already exist"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.CONFLICT);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        userService.saveUser(user);</span>
<span class="line"> </span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        headers.setLocation(ucBuilder.path(<span class="string">"/user/&#123;id&#125;"</span>).buildAndExpand(user.getId()).toUri());</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(headers, HttpStatus.CREATED);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Update a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id, @RequestBody User user) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Updating User "</span> + id);</span>
<span class="line">         </span>
<span class="line">        User currentUser = userService.findById(id);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span> (currentUser==<span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        currentUser.setName(user.getName());</span>
<span class="line">        currentUser.setAge(user.getAge());</span>
<span class="line">        currentUser.setSalary(user.getSalary());</span>
<span class="line">         </span>
<span class="line">        userService.updateUser(currentUser);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(currentUser, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">//------------------- Delete a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Fetching &amp; Deleting User with id "</span> + id);</span>
<span class="line"> </span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"Unable to delete. User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        userService.deleteUserById(id);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Delete All Users --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Deleting All Users"</span>);</span>
<span class="line"> </span>
<span class="line">        userService.deleteAllUsers();</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><ul>
<li>@RestController：首先，我们使用Spring 4的新的<code>@RestController</code>注解。此注释避免我们在每个方法上添加<code>@ResponseBody``注解。在Spring-MVC内部下，</code>@RestController<code>本身是用</code>@ResponseBody<code>注解的，可以被认为是</code>@Controller<code>和</code>@ResponseBody`的组合。</li>
<li>@RequestBody：如果一个方法参数使用<code>@RequestBody</code>进行注解，那么Spring会将传入的HTTP请求主体（针对该方法的@RequestMapping中提到的URL）绑定到该参数。原理是Spring内部使用<code>HttpMessageConverter</code>将HTTP请求体转换为域对象[将请求主体反序列化为域对象]，这是基于请求中存在的<code>ACCEPT</code>或<code>Content-Type</code>头。</li>
<li>@ResponseBody：如果一个方法用@ResponseBody注解，Spring会将返回值绑定到传出的HTTP响应正文。在这样做的过程中，Spring将在内部使用<code>HttpMessageConverter</code>将返回值转换为HTTP响应主体[将对象序列化到响应主体]，并基于请求HTTP头中的Content-Type。如前所述，在Spring 4中，你可能会停止使用此注释。</li>
<li>ResponseEntity 它代表整个HTTP响应。好的一点是你可以控制任何进入它的东西。你可以指定状态码，标题和正文。它带有几个构造函数来携带您想要在HTTP响应中发送的信息。</li>
<li>@PathVariable：这个注解表示一个方法参数应该绑定到一个URI模板变量[‘}’]。基本上，<code>@RestController</code>，<code>@RequestBody</code>，<code>ResponseEntity</code>和<code>@PathVariable</code>是你在Spring 4中实现一个REST API所需要知道的。另外，spring提供了几个支持类来帮助你实现一些自定义的东西。</li>
<li>MediaType：使用<code>@RequestMapping</code>注释，你可以另外指定要通过特定控制器方法生成或使用的<code>MediaType</code>（使用生成或消费属性），以进一步缩小映射范围。</li>
</ul>
<h3 id="使用RestTemplate编写REST客户端"><a href="#使用RestTemplate编写REST客户端" class="headerlink" title="使用RestTemplate编写REST客户端"></a>使用RestTemplate编写REST客户端</h3><p>PostMan是一个很棒用来测试Rest API的客户端。 但是，如果你想要在应用程序中调用基于REST的Web服务，则需要为你的应用程序提供REST客户端。 最受欢迎的HTTP客户端之一是Apache HttpComponents HttpClient。 但是，该客户端提供的功能过于基础，需要自己编写大量符合REST风格的代码。</p>
<p>Spring提供的RestTemplate提供了更高级别的方法，这些方法对应于六种主要的HTTP方法中的每一种，这些方法使得调用许多RESTful服务只需一行代码，并成为实施REST的最佳实践。</p>
<p>下面显示了HTTP方法和相应的RestTemplate方法来处理这种类型的HTTP请求。</p>
<p>HTTP 方法和 RestTemplate 方法对应关系:</p>
<ul>
<li>HTTP GET : getForObject, getForEntity</li>
<li>HTTP PUT : put(String url, Object request, String…​urlVariables)</li>
<li>HTTP DELETE : delete</li>
<li>HTTP POST : postForLocation(String url, Object request, String…​ urlVariables), postForObject(String url, Object request, Class responseType, String…​ uriVariables)</li>
<li>HTTP HEAD : headForHeaders(String url, String…​ urlVariables)</li>
<li>HTTP OPTIONS : optionsForAllow(String url, String…​ urlVariables)</li>
<li>HTTP PATCH and others : exchange execute</li>
</ul>
<h4 id="自定义REST客户端，使用先前创建的REST服务"><a href="#自定义REST客户端，使用先前创建的REST服务" class="headerlink" title="自定义REST客户端，使用先前创建的REST服务"></a>自定义REST客户端，使用先前创建的REST服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span>
<span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span>
<span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRestTestClient</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_SERVICE_URI = <span class="string">"&lt;a class="</span>vglnk<span class="string">" href="</span>http:<span class="comment">//localhost:8080/Spring4MVCCRUDRestService" rel="nofollow"&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;/a&gt;";</span></span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllUsers</span><span class="params">()</span></span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing listAllUsers API-----------"</span>);</span>
<span class="line">         </span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        List&lt;LinkedHashMap&lt;String, Object&gt;&gt; usersMap = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/"</span>, List.class);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span>(usersMap!=<span class="keyword">null</span>)&#123;</span>
<span class="line">            <span class="keyword">for</span>(LinkedHashMap&lt;String, Object&gt; map : usersMap)&#123;</span>
<span class="line">                System.out.println(<span class="string">"User : id="</span>+map.get(<span class="string">"id"</span>)+<span class="string">", Name="</span>+map.get(<span class="string">"name"</span>)+<span class="string">", Age="</span>+map.get(<span class="string">"age"</span>)+<span class="string">", Salary="</span>+map.get(<span class="string">"salary"</span>));;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;<span class="keyword">else</span>&#123;</span>
<span class="line">            System.out.println(<span class="string">"No user exist----------"</span>);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing getUser API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/1"</span>, User.class);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* POST */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing create User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = <span class="keyword">new</span> User(<span class="number">0</span>,<span class="string">"Sarah"</span>,<span class="number">51</span>,<span class="number">134</span>);</span>
<span class="line">        URI uri = restTemplate.postForLocation(REST_SERVICE_URI+<span class="string">"/user/"</span>, user, User.class);</span>
<span class="line">        System.out.println(<span class="string">"Location : "</span>+uri.toASCIIString());</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* PUT */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing update User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user  = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"Tomy"</span>,<span class="number">33</span>, <span class="number">70000</span>);</span>
<span class="line">        restTemplate.put(REST_SERVICE_URI+<span class="string">"/user/1"</span>, user);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing delete User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/3"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing all delete Users API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span>
<span class="line">        listAllUsers();</span>
<span class="line">        getUser();</span>
<span class="line">        createUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        updateUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteAllUsers();</span>
<span class="line">        listAllUsers();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">Testing getUser API----------</span>
<span class="line">User [id=1, name=Sam, age=30, salary=70000.0]</span>
<span class="line">Testing create User API----------</span>
<span class="line">Location : &lt;a class=&quot;vglnk&quot; href=&quot;http://localhost:8080/Spring4MVCCRUDRestService/user/5&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing update User API----------</span>
<span class="line">User [id=1, name=Tomy, age=33, salary=70000.0]</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing delete User API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing all delete Users API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">No user exist----------</span>
</pre></td></tr></table></figure>
<h3 id="REST-API-添加-CORS-支持"><a href="#REST-API-添加-CORS-支持" class="headerlink" title="REST API 添加 CORS 支持"></a>REST API 添加 CORS 支持</h3><p>在访问REST API时，您可能会面临有关同源策略的问题。</p>
<p>可能的错误如下：</p>
<ul>
<li>“no” Access-Control-Allow-Origin“标题出现在请求的资源上。 原因’<a href="http://127.0.0.1:8080&#39;因此不被允许访问。“或" target="_blank" rel="external">http://127.0.0.1:8080&#39;因此不被允许访问。“或</a></li>
<li>“XMLHttpRequest无法加载<code>http://abc.com/bla</code>。 原始<code>http：// localhost：12345</code>不被Access-Control-Allow-Origin允许。“在这种情况下很常见。</li>
</ul>
<p>解决方案是Cross-Origin Resource Sharing(跨源资源共享)。 基本上，在服务器端，我们可以返回额外的CORS访问控制头和响应，这最终将允许进一步的域间通信。</p>
<p>在Spring中，我们可以编写一个简单的过滤器，在每个响应中添加这些CORS特定的响应头信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"><span class="meta">@WebFilter</span> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Filtering on..........................................................."</span>);</span>
<span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, PUT, OPTIONS, DELETE"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with"</span>);</span>
<span class="line">        chain.doFilter(req, res);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span>
<span class="line"> </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://websystique.com/springmvc/spring-mvc-4-restful-web-services-crud-example-resttemplate/" target="_blank" rel="external">spring-mvc-4-restful-web-services-crud-example-resttemplate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 &lt;code&gt;@RestController&lt;/code&gt;注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。&lt;/p&gt;
&lt;p&gt;Spring在内部使用&lt;code&gt;HttpMessageConverters&lt;/code&gt;将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中的&lt;code&gt;Accept Headers&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了服务JSON，我们将使用Jackson库[jackson-databind.jar]。 对于XML，我们将使用Jackson XML扩展[jackson-dataformat-xml.jar]。 只有在类路径中存在这些库才会触发Spring以所需格式转换输出。 此外，我们将进一步通过使用JAXB批注注释域类来支持XML，以防Jackson的XML扩展库由于某种原因而不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你通过在浏览器中输入网址发送请求，则可以添加后缀[.xml / .json]，以帮助确定要提供的内容的类型。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
</feed>
