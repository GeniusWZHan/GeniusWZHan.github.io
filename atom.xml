<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>戒修-沉迷技术的小沙弥</title>
  <subtitle>我喜欢GO</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://leokongwq.github.io/"/>
  <updated>2018-07-09T02:59:36.000Z</updated>
  <id>https://leokongwq.github.io/</id>
  
  <author>
    <name>kongwenqiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springcloud服务注册之consul</title>
    <link href="https://leokongwq.github.io/2018/07/08/spring-cloud-consul.html"/>
    <id>https://leokongwq.github.io/2018/07/08/spring-cloud-consul.html</id>
    <published>2018-07-08T05:28:16.000Z</published>
    <updated>2018-07-09T02:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用springcloud构建微服务，除了可以使用eureka来实现服务注册和发现外，springcloud对consul也提供了良好的支持。本文就简单介绍下使用springcloud和consul实现服务注册和发现。</p>
<h3 id="consul安装"><a href="#consul安装" class="headerlink" title="consul安装"></a>consul安装</h3><p>consul的安装非常简单，只需要在官网<a href="https://www.consul.io/downloads.html" target="_blank" rel="external">下载</a>对应平台的安装文件即可。</p>
<p>具体安装步骤参考<a href="https://www.consul.io/intro/getting-started/install.html" target="_blank" rel="external">install</a></p>
<a id="more"></a>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><h4 id="maven-配置"><a href="#maven-配置" class="headerlink" title="maven 配置"></a>maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span>
<span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>Camden.SR6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span>
<span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h4 id="相关注解配置"><a href="#相关注解配置" class="headerlink" title="相关注解配置"></a>相关注解配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="meta">@EnableDiscoveryClient</span></span>
<span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">		SpringApplication.run(Application.class, args);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="application-properties配置"><a href="#application-properties配置" class="headerlink" title="application.properties配置"></a>application.properties配置</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line">#默认就是true</span>
<span class="line">spring.cloud.consul.enabled=true</span>
<span class="line">spring.cloud.consul.host=127.0.0.1</span>
<span class="line">spring.cloud.consul.port=8500</span>
<span class="line">#默认就是true</span>
<span class="line">spring.cloud.consul.discovery.enabled=true</span>
<span class="line">#服务名</span>
<span class="line">spring.cloud.consul.discovery.serviceName=$&#123;spring.application.name&#125;</span>
<span class="line">#服务注册实例名</span>
<span class="line">spring.cloud.consul.discovery.instanceId=$&#123;spring.application.name&#125;-$&#123;spring.cloud.client.ipAddress&#125;-$&#123;server.port&#125;</span>
<span class="line">#服务所在的主机名</span>
<span class="line">spring.cloud.consul.discovery.hostname=$&#123;spring.cloud.client.ipAddress&#125;</span>
<span class="line">#服务所在的端口</span>
<span class="line">spring.cloud.consul.discovery.port=$&#123;server.port&#125;</span>
<span class="line">#服务的健康检查url</span>
<span class="line">spring.cloud.consul.discovery.healthCheckUrl=http://localhost:$&#123;server.port&#125;/</span>
<span class="line">spring.cloud.consul.discovery.healthCheckInterval=10s</span>
<span class="line">spring.cloud.consul.discovery.healthCheckTimeout=10s</span>
<span class="line">spring.cloud.consul.discovery.healthCheckPath=/</span>
<span class="line">spring.cloud.consul.discovery.tags=dev,dev1</span>
</pre></td></tr></table></figure>
<blockquote>
<p>healthCheckUrl 是consul检查应用健康状态的地址，可以选择一个自定义地址， 也可以使用<code>actuator</code>提供的<code>/health</code>地址。需要注意的是：如果你使用<code>actuator</code>提供的<code>/health</code>地址，则需要确保返回的json注解中的<code>status</code>字段为<code>UP</code>。也就是说<code>actuator</code>实施健康检查的所有组件的健康状态都必须是<code>UP</code>状态，有一个不是，则整个返回界都就是<code>DOWN</code>状态。</p>
</blockquote>
<h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>properties文件配置和服务注册端都是一致的。Spring的java Bean配置也基本相同。</p>
<h4 id="maven-配置-1"><a href="#maven-配置-1" class="headerlink" title="maven 配置"></a>maven 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h4 id="java-Bean-配置"><a href="#java-Bean-配置" class="headerlink" title="java Bean 配置"></a>java Bean 配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span>
<span class="line"><span class="meta">@EnableCircuitBreaker</span></span>
<span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span>
<span class="line">    </span>
<span class="line">    <span class="comment">//启动负载均衡功能</span></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@LoadBalanced</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        SpringApplication.run(Application.class, args);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>服务调用示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Resource</span></span>
<span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"addServiceFallback"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span></span>&#123;</span>
<span class="line">        <span class="comment">//url格式为服务名 + 请求的URI</span></span>
<span class="line">        <span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://bookservice/add?a=10&amp;b=20"</span>, String.class).getBody();</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addServiceFallback</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用springcloud构建微服务，除了可以使用eureka来实现服务注册和发现外，springcloud对consul也提供了良好的支持。本文就简单介绍下使用springcloud和consul实现服务注册和发现。&lt;/p&gt;
&lt;h3 id=&quot;consul安装&quot;&gt;&lt;a href=&quot;#consul安装&quot; class=&quot;headerlink&quot; title=&quot;consul安装&quot;&gt;&lt;/a&gt;consul安装&lt;/h3&gt;&lt;p&gt;consul的安装非常简单，只需要在官网&lt;a href=&quot;https://www.consul.io/downloads.html&quot;&gt;下载&lt;/a&gt;对应平台的安装文件即可。&lt;/p&gt;
&lt;p&gt;具体安装步骤参考&lt;a href=&quot;https://www.consul.io/intro/getting-started/install.html&quot;&gt;install&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
      <category term="springcloud" scheme="https://leokongwq.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper使用之curator</title>
    <link href="https://leokongwq.github.io/2018/06/17/zookeeper-curator.html"/>
    <id>https://leokongwq.github.io/2018/06/17/zookeeper-curator.html</id>
    <published>2018-06-17T10:26:10.000Z</published>
    <updated>2018-06-24T13:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apache <a href="http://curator.apache.org/" target="_blank" rel="external">Curator</a>是Netflix开源的操作Zookeeper的，功能非常强大的客户端。提供了很多非常好用的功能来帮助我们构建分布式应用。</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>Curator 提供的分布式锁分为以下三类：</p>
<ul>
<li>可重入公平锁 InterProcessMutex</li>
<li>不可重入的非公平锁 InterProcessSemaphoreMutex</li>
<li>可重入的读写锁 InterProcessReadWriteLock</li>
<li>锁集合 InterProcessMultiLock</li>
</ul>
<a id="more"></a>
<h3 id="InterProcessMutex"><a href="#InterProcessMutex" class="headerlink" title="InterProcessMutex"></a>InterProcessMutex</h3><p>Curator提供了<code>InterProcessMutex</code>来实现该功能。样例代码如下：</p>
<figure class="highlight java"><figcaption><span>InterProcessMutex</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">//创建锁</span></span>
<span class="line">InterProcessLock lock = <span class="keyword">new</span> InterProcessMutex(client, lockPath);</span>
<span class="line"><span class="comment">//获取</span></span>
<span class="line">lock.acquire(<span class="number">1</span>，TimeUnit.SECONDS)</span>
<span class="line"><span class="keyword">try</span> &#123;</span>
<span class="line"><span class="comment">//业务代码</span></span>
<span class="line">&#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">    lock.release();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>实现原理分析：</p>
<p><code>InterProcessMutex</code>通过创建一个 Zookeeper 临时，顺序结点来实现锁的公平获取，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   <span class="keyword">if</span> ( !internalLock(-<span class="number">1</span>, <span class="keyword">null</span>) ) &#123;</span>
<span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Lost connection while trying to acquire lock: "</span> + basePath);</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">internalLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   <span class="comment">/*</span>
<span class="line">      Note on concurrency: a given lockData instance</span>
<span class="line">      can be only acted on by a single thread so locking isn't necessary</span>
<span class="line">   */</span></span>
<span class="line">   </span>
<span class="line">   <span class="comment">//下面的代码实现：可重入性。</span></span>
<span class="line">   Thread currentThread = Thread.currentThread();</span>
<span class="line">   LockData lockData = threadData.get(currentThread);</span>
<span class="line">   <span class="keyword">if</span> ( lockData != <span class="keyword">null</span> )</span>
<span class="line">   &#123;</span>
<span class="line">       <span class="comment">// re-entering </span></span>
<span class="line">       lockData.lockCount.incrementAndGet();</span>
<span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//创建：临时，顺序结点 </span></span>
<span class="line">   String lockPath = internals.attemptLock(time, unit, getLockNodeBytes());</span>
<span class="line">   <span class="keyword">if</span> ( lockPath != <span class="keyword">null</span> )</span>
<span class="line">   &#123;</span>
<span class="line">       LockData newLockData = <span class="keyword">new</span> LockData(currentThread, lockPath);</span>
<span class="line">       threadData.put(currentThread, newLockData);</span>
<span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>创建：临时，顺序结点 </p>
<figure class="highlight java"><figcaption><span>LockInternals.attemptLock</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">attemptLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit, <span class="keyword">byte</span>[] lockNodeBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line"><span class="keyword">while</span> ( !isDone )</span>
<span class="line">   &#123;</span>
<span class="line">       isDone = <span class="keyword">true</span>;</span>
<span class="line"></span>
<span class="line">       <span class="keyword">try</span></span>
<span class="line">       &#123;   </span>
<span class="line">           <span class="comment">// 通过LockInternalsDriver创建Zookeeper结点</span></span>
<span class="line">           ourPath = driver.createsTheLock(client, path, localLockNodeBytes);</span>
<span class="line">           <span class="comment">// 判断是否获取了锁， 其实就是判定该线程创建的临时结点的顺序是否最小</span></span>
<span class="line">           hasTheLock = internalLockLoop(startMillis, millisToWait, ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">       <span class="keyword">catch</span> ( KeeperException.NoNodeException e )</span>
<span class="line">       &#123;</span>
<span class="line">           <span class="comment">// gets thrown by StandardLockInternalsDriver when it can't find the lock node</span></span>
<span class="line">           <span class="comment">// this can happen when the session expires, etc. So, if the retry allows, just try it all again</span></span>
<span class="line">           <span class="keyword">if</span> ( client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++, System.currentTimeMillis() - startMillis, RetryLoop.getDefaultRetrySleeper()) )</span>
<span class="line">           &#123;</span>
<span class="line">               isDone = <span class="keyword">false</span>;</span>
<span class="line">           &#125;</span>
<span class="line">           <span class="keyword">else</span></span>
<span class="line">           &#123;</span>
<span class="line">               <span class="keyword">throw</span> e;</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
</pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">internalLockLoop</span><span class="params">(<span class="keyword">long</span> startMillis, Long millisToWait, String ourPath)</span> <span class="keyword">throws</span> Exception</span>
<span class="line"></span>&#123;</span>
<span class="line">   <span class="keyword">boolean</span>     haveTheLock = <span class="keyword">false</span>;</span>
<span class="line">   <span class="keyword">boolean</span>     doDelete = <span class="keyword">false</span>;</span>
<span class="line">   <span class="keyword">try</span></span>
<span class="line">   &#123;</span>
<span class="line">       <span class="keyword">if</span> ( revocable.get() != <span class="keyword">null</span> )</span>
<span class="line">       &#123;</span>
<span class="line">           client.getData().usingWatcher(revocableWatcher).forPath(ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">       <span class="comment">// 循环来获取锁</span></span>
<span class="line">       <span class="keyword">while</span> ( (client.getState() == CuratorFrameworkState.STARTED) &amp;&amp; !haveTheLock )</span>
<span class="line">       &#123;</span>
<span class="line">           <span class="comment">//获取所有的排序后的子节点列表（升序排列） </span></span>
<span class="line">           List&lt;String&gt;        children = getSortedChildren();</span>
<span class="line">           String              sequenceNodeName = ourPath.substring(basePath.length() + <span class="number">1</span>); <span class="comment">// +1 to include the slash</span></span>
<span class="line">           <span class="comment">// 判断该进程或线程创建的子节点：sequenceNodeName 是否是第一个</span></span>
<span class="line">           PredicateResults    predicateResults = driver.getsTheLock(client, children, sequenceNodeName, maxLeases);</span>
<span class="line">           <span class="keyword">if</span> ( predicateResults.getsTheLock() )</span>
<span class="line">           &#123;</span>
<span class="line">               haveTheLock = <span class="keyword">true</span>;</span>
<span class="line">           &#125;</span>
<span class="line">           <span class="keyword">else</span></span>
<span class="line">           &#123;</span>
<span class="line">               String  previousSequencePath = basePath + <span class="string">"/"</span> + predicateResults.getPathToWatch();</span>
<span class="line">                <span class="comment">// JVM 进程能同步，</span></span>
<span class="line">               <span class="keyword">synchronized</span>(<span class="keyword">this</span>)</span>
<span class="line">               &#123;</span>
<span class="line">                   <span class="keyword">try</span> </span>
<span class="line">                   &#123;</span>
<span class="line">                       <span class="comment">// use getData() instead of exists() to avoid leaving unneeded watchers which is a type of resource leak</span></span>
<span class="line">                       client.getData().usingWatcher(watcher).forPath(previousSequencePath);</span>
<span class="line">                       <span class="keyword">if</span> ( millisToWait != <span class="keyword">null</span> )</span>
<span class="line">                       &#123;</span>
<span class="line">                           millisToWait -= (System.currentTimeMillis() - startMillis);</span>
<span class="line">                           startMillis = System.currentTimeMillis();</span>
<span class="line">                           <span class="keyword">if</span> ( millisToWait &lt;= <span class="number">0</span> )</span>
<span class="line">                           &#123;</span>
<span class="line">                               doDelete = <span class="keyword">true</span>;    <span class="comment">// timed out - delete our node</span></span>
<span class="line">                               <span class="keyword">break</span>;</span>
<span class="line">                           &#125;</span>
<span class="line">                            <span class="comment">// 线程超时等待</span></span>
<span class="line">                           wait(millisToWait);</span>
<span class="line">                       &#125;</span>
<span class="line">                       <span class="keyword">else</span></span>
<span class="line">                       &#123;</span>
<span class="line">                          <span class="comment">// 线程等待(需要其它线程唤醒，其它线程在释放锁时会进行唤醒)</span></span>
<span class="line">                           wait();</span>
<span class="line">                       &#125;</span>
<span class="line">                       </span>
<span class="line">                        <span class="comment">//  watcher 的执行在另一个线程中，会唤醒等待锁的线程</span></span>
<span class="line">                   &#125;</span>
<span class="line">                   <span class="keyword">catch</span> ( KeeperException.NoNodeException e ) </span>
<span class="line">                   &#123;</span>
<span class="line">                       <span class="comment">// it has been deleted (i.e. lock released). Try to acquire again</span></span>
<span class="line">                   &#125;</span>
<span class="line">               &#125;</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">catch</span> ( Exception e )</span>
<span class="line">   &#123;   </span>
<span class="line">        <span class="comment">// 处理线程中断  </span></span>
<span class="line">       ThreadUtils.checkInterrupted(e);</span>
<span class="line">       doDelete = <span class="keyword">true</span>;</span>
<span class="line">       <span class="keyword">throw</span> e;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">finally</span></span>
<span class="line">   &#123;</span>
<span class="line">        <span class="comment">//被中断后，删除结点，释放锁（一点会删除成功，具体实现查询源代码）</span></span>
<span class="line">       <span class="keyword">if</span> ( doDelete )</span>
<span class="line">       &#123;</span>
<span class="line">           deleteOurPath(ourPath);</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="keyword">return</span> haveTheLock;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="InterProcessSemaphoreMutex"><a href="#InterProcessSemaphoreMutex" class="headerlink" title="InterProcessSemaphoreMutex"></a>InterProcessSemaphoreMutex</h3><p>该功能的锁是由：<code>InterProcessSemaphoreMutex</code>实现的，具体原理就不分析代码。</p>
<p>提一句：该锁的功能是通过：<code>InterProcessMutex</code>和<code>InterProcessSemaphoreV2</code>实现的。</p>
<p><code>InterProcessSemaphoreV2</code>：从名称上来说，该类是一个信号量，也就是说它可以提供N个可用的许可，可以用来管理同时访问共享资源的并发数。</p>
<blockquote>
<p>许可数量为:1的信号量可以当做锁来用。</p>
</blockquote>
<h3 id="InterProcessReadWriteLock"><a href="#InterProcessReadWriteLock" class="headerlink" title="InterProcessReadWriteLock"></a>InterProcessReadWriteLock</h3><p>读写锁和JDK提供的：<code>ReadWriteLock</code>功能是类似的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadWriteLock</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   String lockPath = <span class="string">"/config/lock/123"</span>;</span>
<span class="line">   InterProcessReadWriteLock readWriteLock = <span class="keyword">new</span> InterProcessReadWriteLock(client, lockPath);</span>
<span class="line"></span>
<span class="line">   InterProcessMutex readLock = readWriteLock.readLock();</span>
<span class="line">   InterProcessMutex writeLock = readWriteLock.writeLock();</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>特点总结：</p>
<ol>
<li>可重入，读锁和写锁都是可重入的。</li>
<li>读锁非互斥，写锁是互斥的，只能有一个客户端获取</li>
<li>读写是互斥的</li>
<li>支持锁降级。支持写锁降级为读锁，读锁不能升级为写锁。</li>
</ol>
<h3 id="InterProcessMultiLock"><a href="#InterProcessMultiLock" class="headerlink" title="InterProcessMultiLock"></a>InterProcessMultiLock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">InterProcessMultiLock lock = <span class="keyword">new</span> InterProcessMultiLock(List&lt;InterProcessLock&gt; locks);</span>
<span class="line"></span>
<span class="line">或</span>
<span class="line"></span>
<span class="line">InterProcessMultiLock lock = <span class="keyword">new</span> InterProcessMultiLock(CuratorFramework client,</span>
<span class="line">                             List&lt;String&gt; paths);</span>
</pre></td></tr></table></figure>
<p><code>InterProcessMultiLock</code>维护一组锁。在获取锁时，只有获取所有的锁时才返回，释放时会释放所有的锁。</p>
<h2 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h2><p>在分布式系统中，Leader选举是一个非常基础和重要的能力。通过Zookeeper和Curator能非常容易的实现Leader选举。</p>
<p>Curator提供了两种机制来实现Leader选举：</p>
<h3 id="方法一：LeaderSelector"><a href="#方法一：LeaderSelector" class="headerlink" title="方法一：LeaderSelector"></a>方法一：LeaderSelector</h3><p>直接上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String leaderSelectionPath = <span class="string">"/config/vip/db/master"</span>;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLeaderElection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       threadPool.execute(<span class="keyword">new</span> Contender(buildLeaderSelectorListener()));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">1000</span>);</span>
<span class="line"></span>
<span class="line">   threadPool.shutdown();</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">/**</span>
<span class="line">* 公平的选举（顺序性）</span>
<span class="line">*/</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contender</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line">   <span class="keyword">private</span> LeaderSelectorListener listener;</span>
<span class="line"></span>
<span class="line">   Contender(LeaderSelectorListener listener) &#123;</span>
<span class="line">       <span class="keyword">this</span>.listener = listener;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       LeaderSelector selector = <span class="keyword">new</span> LeaderSelector(client, leaderSelectionPath, listener);</span>
<span class="line">       <span class="comment">// 自动加入Leader选举</span></span>
<span class="line">       selector.autoRequeue();</span>
<span class="line">       <span class="comment">//开始进行选举，不过该方法会立即返回。选举的结果是通过异步回调实现的</span></span>
<span class="line">       selector.start();</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
<span class="line"><span class="function"><span class="keyword">private</span> LeaderSelectorListener <span class="title">buildLeaderSelectorListener</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   LeaderSelectorListener listener = <span class="keyword">new</span> LeaderSelectorListenerAdapter() &#123;</span>
<span class="line">        <span class="comment">//该方法只有在该客户端被选为Leader才会被调用。</span></span>
<span class="line">        <span class="comment">//方法返回就表示客户端放弃Leader角色。</span></span>
<span class="line">       <span class="meta">@Override</span></span>
<span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeLeadership</span><span class="params">(CuratorFramework client)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">          <span class="comment">// 模式业务操作</span></span>
<span class="line">            System.out.println(<span class="string">"Current Leader is : "</span> + Thread.currentThread().getName());</span>
<span class="line">           Thread.sleep(<span class="number">5000</span>)</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;;</span>
<span class="line">   <span class="keyword">return</span> listener;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="方法二：LeaderLatch"><a href="#方法二：LeaderLatch" class="headerlink" title="方法二：LeaderLatch"></a>方法二：LeaderLatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
</pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLeaderRandomElection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       LeaderLatch leaderLatch = <span class="keyword">new</span> LeaderLatch(client, leaderSelectionPath, String.valueOf(i));</span>
<span class="line">       threadPool.execute(<span class="keyword">new</span> RandomSelectLeader(leaderLatch));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">1000</span>);</span>
<span class="line"></span>
<span class="line">   threadPool.shutdown();</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomSelectLeader</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">private</span> LeaderLatch leaderLatch;</span>
<span class="line"></span>
<span class="line">   RandomSelectLeader(LeaderLatch leaderLatch) &#123;</span>
<span class="line">       <span class="keyword">this</span>.leaderLatch = leaderLatch;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           <span class="comment">//强烈建议添加Listener来监听链接变化，　处理Leader丢失问题</span></span>
<span class="line">           leaderLatch.addListener(<span class="keyword">new</span> LeaderLatchListener() &#123;</span>
<span class="line">               <span class="meta">@Override</span></span>
<span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isLeader</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                   System.out.println(<span class="string">"I'am Selected to be a Leader"</span> + Thread.currentThread().getName());</span>
<span class="line">               &#125;</span>
<span class="line"></span>
<span class="line">               <span class="meta">@Override</span></span>
<span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notLeader</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                   System.out.println(<span class="string">"I'am Not Leader"</span> + Thread.currentThread().getName());</span>
<span class="line">               &#125;</span>
<span class="line">           &#125;);</span>
<span class="line">           <span class="comment">//调用该方法后才能开始参与选举（随机的）</span></span>
<span class="line">           leaderLatch.start();</span>
<span class="line">           <span class="comment">//死等，　直到被选为Leader</span></span>
<span class="line">           leaderLatch.await();</span>
<span class="line"></span>
<span class="line">           System.out.println(<span class="string">"Current Leader is : "</span> + Thread.currentThread().getName());</span>
<span class="line"></span>
<span class="line">           Thread.sleep(<span class="number">2000</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125; <span class="keyword">finally</span> &#123;</span>
<span class="line">           <span class="keyword">try</span> &#123;</span>
<span class="line">               <span class="comment">// 退出选举，如果自己是Leader，则放弃Leader位置，其它的成员就可以再次选举</span></span>
<span class="line">               leaderLatch.close();</span>
<span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">               e.printStackTrace();</span>
<span class="line">           &#125;</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>推荐使用<code>LeaderSelector</code>来实现Leader选举，因为参加选举的结点代码编写简单，能自动完成丢失Leader角色后从新参加选举的功能，而且能灵活的控制释放Leader角色的时机。</p>
<h2 id="分布式栅栏"><a href="#分布式栅栏" class="headerlink" title="分布式栅栏"></a>分布式栅栏</h2><h3 id="DistributedBarrier"><a href="#DistributedBarrier" class="headerlink" title="DistributedBarrier"></a>DistributedBarrier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   String barrierPath = <span class="string">"/config/barriers"</span>;</span>
<span class="line">   DistributedBarrier barrier = <span class="keyword">new</span> DistributedBarrier(client, barrierPath);</span>
<span class="line"></span>
<span class="line">   ExecutorService executorService = Executors.newCachedThreadPool();</span>
<span class="line"></span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span>
<span class="line">       executorService.execute(<span class="keyword">new</span> Worker(barrier));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">   <span class="comment">//主线程设置结点，worker线程等待</span></span>
<span class="line">   barrier.setBarrier();</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);</span>
<span class="line">   System.out.println(<span class="string">"ALL Done!"</span>);</span>
<span class="line"></span>
<span class="line">   barrier.removeBarrier();</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   <span class="keyword">private</span> DistributedBarrier barrier;</span>
<span class="line"></span>
<span class="line">   Worker(DistributedBarrier barrier) &#123;</span>
<span class="line">       <span class="keyword">this</span>.barrier = barrier;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           barrier.waitOnBarrier();</span>
<span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">" &gt;&gt;&gt;&gt; Finished"</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="DistributedDoubleBarrier"><a href="#DistributedDoubleBarrier" class="headerlink" title="DistributedDoubleBarrier"></a>DistributedDoubleBarrier</h3><p>双栅栏允许客户端在计算的开始和结束时同步。当足够的进程加入到双栅栏时，进程开始计算， 当计算完成时，离开栅栏。</p>
<p>构造函数为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DistributedDoubleBarrier</span><span class="params">(CuratorFramework client,</span>
<span class="line">                                String barrierPath,</span>
<span class="line">                                <span class="keyword">int</span> memberQty)</span></span>
<span class="line">Creates the barrier abstraction. memberQty is the number of members in the barrier. When <span class="title">enter</span><span class="params">()</span> is called, it blocks until</span>
<span class="line">all members have entered. When <span class="title">leave</span><span class="params">()</span> is called, it blocks until all members have left.</span>
<span class="line">Parameters:</span>
<span class="line">client - the client</span>
<span class="line">barrierPath - path to use</span>
<span class="line">memberQty - the number of members in the barrier</span></span>
</pre></td></tr></table></figure>
<p><code>memberQty</code>是成员数量，当<code>enter</code>方法被调用时，成员被阻塞，直到所有的成员都调用了<code>enter</code>。 当<code>leave</code>方法被调用时，它也阻塞调用线程， 直到所有的成员都调用了<code>leave</code>。</p>
<p><code>DistributedDoubleBarrier</code>会监控连接状态，当连接断掉时<code>enter</code>和<code>leave</code>方法会抛出异常。</p>
<p>下面是一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QTY = <span class="number">5</span>;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Test</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedDoubleBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">   String barrierPath = <span class="string">"/config/barriers"</span>;</span>
<span class="line"></span>
<span class="line">   ExecutorService executorService = Executors.newFixedThreadPool(QTY);</span>
<span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; QTY; i++) &#123;</span>
<span class="line">       <span class="keyword">final</span> DistributedDoubleBarrier barrier = <span class="keyword">new</span> DistributedDoubleBarrier(client, barrierPath, QTY);</span>
<span class="line">       executorService.execute(<span class="keyword">new</span> Worker(barrier));</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line">   System.out.println(<span class="string">"ALL Done!"</span>);</span>
<span class="line"></span>
<span class="line">   executorService.shutdown();</span>
<span class="line">   executorService.awaitTermination(<span class="number">10</span>, TimeUnit.MINUTES);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">   DistributedDoubleBarrier doubleBarrier;</span>
<span class="line"></span>
<span class="line">   Worker(DistributedDoubleBarrier doubleBarrier) &#123;</span>
<span class="line">       <span class="keyword">this</span>.doubleBarrier = doubleBarrier;</span>
<span class="line">   &#125;</span>
<span class="line"></span>
<span class="line">   <span class="meta">@Override</span></span>
<span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">       <span class="keyword">try</span> &#123;</span>
<span class="line">           <span class="comment">//等待所有客户端都到达</span></span>
<span class="line">           doubleBarrier.enter();</span>
<span class="line">           System.out.println(<span class="string">"I'am arrival"</span>);</span>
<span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">" &gt;&gt;&gt;&gt; Finished"</span>);</span>
<span class="line">           <span class="comment">//等待所有客户端都到达</span></span>
<span class="line">           doubleBarrier.leave();</span>
<span class="line">           System.out.println(<span class="string">"I'am leave"</span>);</span>
<span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">           e.printStackTrace();</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="分布式计数器"><a href="#分布式计数器" class="headerlink" title="分布式计数器"></a>分布式计数器</h2><h3 id="SharedCount"><a href="#SharedCount" class="headerlink" title="SharedCount"></a>SharedCount</h3><p><code>SharedCount</code> 管理一个共享的整型数字。所有监听该同一个Zookeeper Path的客户端都能获取到该整型数字的最新值。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedCountTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNTER_PATH = <span class="string">"/config/conunter/total"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSharedCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        SharedCount sharedCount = <span class="keyword">new</span> SharedCount(client, COUNTER_PATH, <span class="number">0</span>);</span>
<span class="line">        sharedCount.start();</span>
<span class="line"></span>
<span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span>
<span class="line"></span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span>
<span class="line">            <span class="keyword">final</span> SharedCount count = <span class="keyword">new</span> SharedCount(client, COUNTER_PATH, <span class="number">0</span>);</span>
<span class="line">            count.start();</span>
<span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span>
<span class="line">                <span class="meta">@Override</span></span>
<span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                    count.addListener(<span class="keyword">new</span> SharedCountListener() &#123;</span>
<span class="line">                        <span class="meta">@Override</span></span>
<span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countHasChanged</span><span class="params">(SharedCountReader sharedCount, <span class="keyword">int</span> newCount)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">"===="</span> + newCount);</span>
<span class="line">                        &#125;</span>
<span class="line"></span>
<span class="line">                        <span class="meta">@Override</span></span>
<span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stateChanged</span><span class="params">(CuratorFramework client, ConnectionState newState)</span> </span>&#123;</span>
<span class="line">                            System.out.println(newState);</span>
<span class="line">                        &#125;</span>
<span class="line">                    &#125;);</span>
<span class="line"></span>
<span class="line">                    <span class="keyword">try</span> &#123;</span>
<span class="line">                        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span>
<span class="line">                        e.printStackTrace();</span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;);</span>
<span class="line">        &#125;</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span>
<span class="line">        sharedCount.setCount(<span class="number">123</span>);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span>
<span class="line">        sharedCount.setCount(<span class="number">456</span>);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">20</span>);</span>
<span class="line">        sharedCount.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注意： 如果连续两次调用<code>setCount</code>方法，在客户端只能观察到最后一次的结果。<code>trySetCount</code> 只有当该客户端的缓存的值和服务端保存的值一致才能设置成功，否则该客户端的值会自动更新（<code>trySetCount</code>返回false）。</p>
</blockquote>
<h3 id="DistributedAtomicLong"><a href="#DistributedAtomicLong" class="headerlink" title="DistributedAtomicLong"></a>DistributedAtomicLong</h3><p><code>DistributedAtomicLong</code> 是一个原子更新的计数器。它在更新值时，第一次尝试采用乐观锁机制，如果更新失败，则使用<code>InterProcessMutex</code>来实现更新。 不管采用哪种机制，它都会采用重试机制，直到更新成功。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDistributedAtomicLong</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String COUNTER_PATH = <span class="string">"/config/conunter/123"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDistributedAtomicLong</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        RetryPolicy retryPolicy = <span class="keyword">new</span> RetryForever(<span class="number">10</span>);</span>
<span class="line">        DistributedAtomicLong atomicLong = <span class="keyword">new</span> DistributedAtomicLong(client, COUNTER_PATH, retryPolicy);</span>
<span class="line"></span>
<span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span>
<span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span>
<span class="line">            <span class="keyword">final</span> RetryPolicy retryPolicyTmp = <span class="keyword">new</span> RetryForever(<span class="number">10</span>);</span>
<span class="line">            <span class="keyword">final</span> DistributedAtomicLong distCounter = <span class="keyword">new</span> DistributedAtomicLong(client, COUNTER_PATH, retryPolicyTmp);</span>
<span class="line"></span>
<span class="line">            executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span>
<span class="line">                <span class="meta">@Override</span></span>
<span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span>
<span class="line">                    System.out.println(distCounter);</span>
<span class="line"></span>
<span class="line">                    AtomicValue&lt;Long&gt; result = <span class="keyword">null</span>;</span>
<span class="line">                    <span class="keyword">try</span> &#123;</span>
<span class="line">                        result = distCounter.increment();</span>
<span class="line">                        <span class="keyword">if</span> (result.succeeded()) &#123;</span>
<span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">"===&gt; current value = "</span> + result.preValue());</span>
<span class="line">                        &#125;</span>
<span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span>
<span class="line">                        e.printStackTrace();</span>
<span class="line">                    &#125;</span>
<span class="line">                &#125;</span>
<span class="line">            &#125;);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span>
<span class="line"></span>
<span class="line">        System.out.println(<span class="string">"After all current value is = "</span> + atomicLong.get().postValue());</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<blockquote>
<p>注意：在使用<code>DistributedAtomicLong</code>时，你必须首先检查<code>AtomicValue.succeeded()</code>的返回值。如果操作成功则该方法的返回<code>true</code>，否则返回<code>false</code>，表示原子更新失败。如果更新成功，则可以通过<code>preValue</code>和<code>postValue</code>获取更新前后的值。</p>
</blockquote>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="PathChildrenCache"><a href="#PathChildrenCache" class="headerlink" title="PathChildrenCache"></a>PathChildrenCache</h3><p><code>PathChildrenCache</code> 用来观察一个<code>ZNode</code>。无论该结点下新增子节点，删除子节点还是子节点更新，路径缓存都会更新它的状态来包含当前的结点集合（包括状态和数据）。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathChildrenCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PATH = <span class="string">"/config/cache"</span>;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        PathChildrenCache pathChildrenCache = <span class="keyword">new</span> PathChildrenCache(client, CACHE_PATH, <span class="keyword">true</span>);</span>
<span class="line">        pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);</span>
<span class="line"></span>
<span class="line">        pathChildrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(event);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line"></span>
<span class="line">        List&lt;ChildData&gt; childDataList = pathChildrenCache.getCurrentData();</span>
<span class="line">        <span class="keyword">for</span> (ChildData childData : childDataList) &#123;</span>
<span class="line">            System.out.println(childData);</span>
<span class="line">        &#125;</span>
<span class="line"></span>
<span class="line">        pathChildrenCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="NodeCache"><a href="#NodeCache" class="headerlink" title="NodeCache"></a>NodeCache</h3><p><code>NodeCache</code>用来观察一个<code>ZNode</code>。当该结点的数据被更新，或被删除，<code>NodeCache</code>会同步到结点当前最新的数据，如果结点被删除，则<code>NodeCache</code>包含的数据为null。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NodeCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_NODE_PATH = <span class="string">"/config/cache/123"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        <span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(client, CACHE_NODE_PATH);</span>
<span class="line">        nodeCache.start(<span class="keyword">true</span>);</span>
<span class="line">        nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(<span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line">        nodeCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="TreeCache"><a href="#TreeCache" class="headerlink" title="TreeCache"></a>TreeCache</h3><p><code>TreeCache</code>是一个工具类，它试图将服务端某个<code>Path</code>下所有所有的结点数据缓存到本地。该类会监听指定的ZK路径，处理<code>update</code>,<code>create</code>,<code>delete</code>事件并拉取服务端的数据。你可以通过注册一个Listener来获取数据的变化通知。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeCacheTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_PATH = <span class="string">"/config/cache"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        TreeCache treeCache = <span class="keyword">new</span> TreeCache(client, CACHE_PATH);</span>
<span class="line">        treeCache.getListenable().addListener(<span class="keyword">new</span> TreeCacheListener() &#123;</span>
<span class="line">            <span class="meta">@Override</span></span>
<span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">                System.out.println(event);</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;);</span>
<span class="line">        treeCache.start();</span>
<span class="line"></span>
<span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">50</span>);</span>
<span class="line"></span>
<span class="line">        Map&lt;String, ChildData&gt; dataMap = treeCache.getCurrentChildren(CACHE_PATH);</span>
<span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ChildData&gt; entry : dataMap.entrySet()) &#123;</span>
<span class="line">            System.out.println(entry.getKey() + <span class="string">" =====》"</span> +  <span class="keyword">new</span> String(entry.getValue().getData()));</span>
<span class="line">        &#125;</span>
<span class="line">        treeCache.close();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="Nodes"><a href="#Nodes" class="headerlink" title="Nodes"></a>Nodes</h2><h3 id="Persistent-Node"><a href="#Persistent-Node" class="headerlink" title="Persistent Node"></a>Persistent Node</h3><p>持久化结点是数据保存在Zookeeper服务端，并且在连接断开，session过期任然存在的结点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentNodeTest</span> <span class="keyword">extends</span> <span class="title">BaseTest</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NODE_PATH = <span class="string">"/persons/sky"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Test</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersistentNode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span>
<span class="line">        PersistentNode persistentNode = <span class="keyword">new</span> PersistentNode(</span>
<span class="line">            client,</span>
<span class="line">            CreateMode.PERSISTENT,</span>
<span class="line">            <span class="keyword">true</span>,</span>
<span class="line">            NODE_PATH,</span>
<span class="line">            <span class="string">"123"</span>.getBytes()</span>
<span class="line">        );</span>
<span class="line">        <span class="comment">//必须先调用该方法(该方法会创建结点)</span></span>
<span class="line">        persistentNode.start();</span>
<span class="line"></span>
<span class="line">        System.out.println(persistentNode.getActualPath());</span>
<span class="line">        System.out.println(<span class="keyword">new</span> String(persistentNode.getData()));</span>
<span class="line">        <span class="comment">//会删除该结点</span></span>
<span class="line"><span class="comment">//        persistentNode.close();</span></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="Persistent-TTL-Node"><a href="#Persistent-TTL-Node" class="headerlink" title="Persistent TTL Node"></a>Persistent TTL Node</h3><p><code>`在你需要创建</code>TTL<code>节点，但不想通过定期设置数据手动保持它的活动状态时非常有用。</code>PersistentTtlNode<code>可以为你完成此操作。 此外，保持活动的方式不会在父节点上生成监视触发器。 它还提供了类似</code>PersistentNode`的保证，即使通过连接和会话中断，节点也会尝试保持在ZooKeeper中。</p>
<h3 id="Group-Member"><a href="#Group-Member" class="headerlink" title="Group Member"></a>Group Member</h3><h2 id="分布式队列"><a href="#分布式队列" class="headerlink" title="分布式队列"></a>分布式队列</h2><p>、、、、</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Apache &lt;a href=&quot;http://curator.apache.org/&quot;&gt;Curator&lt;/a&gt;是Netflix开源的操作Zookeeper的，功能非常强大的客户端。提供了很多非常好用的功能来帮助我们构建分布式应用。&lt;/p&gt;
&lt;h2 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h2&gt;&lt;p&gt;Curator 提供的分布式锁分为以下三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可重入公平锁 InterProcessMutex&lt;/li&gt;
&lt;li&gt;不可重入的非公平锁 InterProcessSemaphoreMutex&lt;/li&gt;
&lt;li&gt;可重入的读写锁 InterProcessReadWriteLock&lt;/li&gt;
&lt;li&gt;锁集合 InterProcessMultiLock&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="zookeeper" scheme="https://leokongwq.github.io/tags/zookeeper/"/>
    
      <category term="curator" scheme="https://leokongwq.github.io/tags/curator/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统一致性总结</title>
    <link href="https://leokongwq.github.io/2018/06/01/distributed-system-consitency.html"/>
    <id>https://leokongwq.github.io/2018/06/01/distributed-system-consitency.html</id>
    <published>2018-06-01T06:16:32.000Z</published>
    <updated>2018-06-01T06:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在学习过程中，阅读了好多关于分布式系统一致性的文章和资料，总是被分布式事务一致性和分布式数据一致性</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在学习过程中，阅读了好多关于分布式系统一致性的文章和资料，总是被分布式事务一致性和分布式数据一致性&lt;/p&gt;

    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>spring中RestTemplate简介</title>
    <link href="https://leokongwq.github.io/2018/05/30/spring-RestTemplate.html"/>
    <id>https://leokongwq.github.io/2018/05/30/spring-RestTemplate.html</id>
    <published>2018-05-30T08:44:51.000Z</published>
    <updated>2018-05-30T09:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RestTemplate-是什么？"><a href="#RestTemplate-是什么？" class="headerlink" title="RestTemplate 是什么？"></a>RestTemplate 是什么？</h3><p>RestTemplate是Spring提供的一个访问Http服务的客户端类，非常类似JdbcTemplate, JmsTemplate。它是线程安全的（一旦创建完成）。从名称上来看，该类更多是针对RESTFUL风格API设计的。当然如果你想通过它调用普通的Http接口也是可以的。</p>
<h3 id="RestTemplate-的方法"><a href="#RestTemplate-的方法" class="headerlink" title="RestTemplate 的方法"></a>RestTemplate 的方法</h3><p>RestTemplate提供的方法都是以Http协议中的6个动词开头的：</p>
<img src="/2018/05/30/spring-RestTemplate/spring-template.png" alt="spring-template.png" title="">
<p>这些方法的名称清楚地表明它们调用的是哪个HTTP方法，而名称的第二部分表示返回的内容。 例如，<code>getForObject（）</code>将执行GET，将HTTP响应转换为你选择的对象类型，并返回该对象。<code>postForLocation</code>将执行POST，将给定对象转换为HTTP请求，并返回可以找到新创建对象的响应<code>HTTP Location</code>标头。 如你所见，这些方法试图强制执行REST最佳实践。</p>
<a id="more"></a>
<h3 id="URI-模板"><a href="#URI-模板" class="headerlink" title="URI 模板"></a>URI 模板</h3><p>这些方法中的每一个都将URI作为第一个参数。 该URI可以是URI模板，可以使用变量将模板扩展为正常的URI。 模板变量可以以两种形式传递：<code>作为String可变参数数组</code>，或作为<code>Map &lt;String，String&gt;</code>。 字符串可变数组按顺序展开复制给模板变量，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">String result = restTemplate.getForObject(<span class="string">"http://example.com/hotels/&#123;hotel&#125;/bookings/&#123;booking&#125;"</span>, String.class, <span class="string">"42"</span>, <span class="string">"21"</span>);</span>
</pre></td></tr></table></figure>
<p>上面的代码最终会请求：<a href="http://example.com/hotels/42/bookings/21" target="_blank" rel="external">http://example.com/hotels/42/bookings/21</a>。Map类型的模板数据，则会以模板变量的名称为key, 查询对应的值来做替换。例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; vars = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span>
<span class="line">vars.put(<span class="string">"hotel"</span>, <span class="string">"42"</span>);</span>
<span class="line">vars.put(<span class="string">"booking"</span>, <span class="string">"21"</span>);</span>
<span class="line">String result = restTemplate.getForObject(<span class="string">"http://example.com/hotels/&#123;hotel&#125;/bookings/&#123;booking&#125;"</span>, String.class, vars);</span>
</pre></td></tr></table></figure>
<p>最终同样会发送请求：<a href="http://example.com/hotels/42/rooms/42" target="_blank" rel="external">http://example.com/hotels/42/rooms/42</a>。</p>
<h3 id="HttpMessageConverters"><a href="#HttpMessageConverters" class="headerlink" title="HttpMessageConverters"></a>HttpMessageConverters</h3><p>传递给方法<code>getForObject()</code>,<code>postForLocation()</code>,<code>put()</code>的数据对象，或是这些方法的返回数据对象都是通过<code>HttpMessageConverter</code>进行转换的。在发送请求时，将数据对象转为Http请求数据， 接收响应时，将Http响应数据转为对应的数据对象。具体参考下面的例子</p>
<h4 id="搜索图片"><a href="#搜索图片" class="headerlink" title="搜索图片"></a>搜索图片</h4><p>Flickr公开了各种API来操纵庞大的照片库。<code>flickr.photos.search</code>方法允许你通过使用<code>GET</code>方法请求地址：<a href="http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=xxx&amp;tags=penguins" target="_blank" rel="external">http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=xxx&amp;tags=penguins</a>来搜索照片，结果会以xml的形式展示:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">photos</span> <span class="attr">page</span>=<span class="string">"2"</span> <span class="attr">pages</span>=<span class="string">"89"</span> <span class="attr">perpage</span>=<span class="string">"10"</span> <span class="attr">total</span>=<span class="string">"881"</span>&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2636"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span> </span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"a123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_04"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2635"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"b123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_03"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"0"</span> <span class="attr">isfriend</span>=<span class="string">"1"</span> <span class="attr">isfamily</span>=<span class="string">"1"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2633"</span> <span class="attr">owner</span>=<span class="string">"47058503995@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"c123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"test_01"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line">	<span class="tag">&lt;<span class="name">photo</span> <span class="attr">id</span>=<span class="string">"2610"</span> <span class="attr">owner</span>=<span class="string">"12037949754@N01"</span></span>
<span class="line">		<span class="attr">secret</span>=<span class="string">"d123456"</span> <span class="attr">server</span>=<span class="string">"2"</span> <span class="attr">title</span>=<span class="string">"00_tall"</span></span>
<span class="line">		<span class="attr">ispublic</span>=<span class="string">"1"</span> <span class="attr">isfriend</span>=<span class="string">"0"</span> <span class="attr">isfamily</span>=<span class="string">"0"</span> /&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">photos</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String photoSearchUrl =</span>
<span class="line">   <span class="string">"http://www.flickr.com/services/rest?method=flickr.photos.search&amp;api+key=&#123;api-key&#125;&amp;tags=&#123;tag&#125;&amp;per_page=10"</span>;</span>
<span class="line">Source photos = restTemplate.getForObject(photoSearchUrl, Source.class, apiKey, searchTerm);</span>
</pre></td></tr></table></figure>
<h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><h4 id="getXXX"><a href="#getXXX" class="headerlink" title="getXXX"></a>getXXX</h4><p>GET请求的方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... urlVariables) throws RestClientException </span>
<span class="line"></span>
<span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; urlVariables) throws RestClientException</span>
<span class="line"></span>
<span class="line">public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType) throws RestClientException</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloGet</span><span class="params">()</span> </span>&#123;</span>
<span class="line">    ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(<span class="string">"http://abc.com"</span>, String.class);</span>
<span class="line">    String body = responseEntity.getBody();</span>
<span class="line">    HttpStatus statusCode = responseEntity.getStatusCode();</span>
<span class="line">    <span class="keyword">int</span> statusCodeValue = responseEntity.getStatusCodeValue();</span>
<span class="line">    HttpHeaders headers = responseEntity.getHeaders();</span>
<span class="line">    <span class="keyword">return</span> body;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="postXXX"><a href="#postXXX" class="headerlink" title="postXXX"></a>postXXX</h3><p>POST 请求的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title">postForObject</span><span class="params">(String url, Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>
<span class="line"></span>
<span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title">postForObject</span><span class="params">(URI url, Object request, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException</span></span>
</pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line">HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">headers.add(<span class="string">"X-Auth-Token"</span>, <span class="string">"e348bc22-5efa-4299-9142-529f07a18ac9"</span>);</span>
<span class="line"></span>
<span class="line">MultiValueMap&lt;String, String&gt; postParameters = <span class="keyword">new</span> LinkedMultiValueMap&lt;String, String&gt;();</span>
<span class="line">postParameters.add(<span class="string">"owner"</span>, <span class="string">"11"</span>);</span>
<span class="line">postParameters.add(<span class="string">"subdomain"</span>, <span class="string">"aoa"</span>);</span>
<span class="line">postParameters.add(<span class="string">"comment"</span>, <span class="string">""</span>);</span>
<span class="line"></span>
<span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity  = <span class="keyword">new</span> HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(postParameters, headers);</span>
<span class="line"></span>
<span class="line">WebResult&lt;Person&gt; result = <span class="keyword">null</span>;</span>
<span class="line"><span class="keyword">try</span> &#123;</span>
<span class="line">  result = restTemplate.postForObject(<span class="string">"请求地址"</span>,  requestEntity, WebResult.class);</span>
<span class="line">  logger.info(result);</span>
<span class="line">&#125; <span class="keyword">catch</span> (RestClientException e) &#123;</span>
<span class="line">  logger.info(<span class="string">"error"</span>, e);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="RestTemplate配置"><a href="#RestTemplate配置" class="headerlink" title="RestTemplate配置"></a>RestTemplate配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfig</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123; RestOperations.class, RestTemplate.class &#125;)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(ClientHttpRequestFactory factory)</span> </span>&#123;</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(factory);</span>
<span class="line"></span>
<span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate.getMessageConverters();</span>
<span class="line">        Iterator&lt;HttpMessageConverter&lt;?&gt;&gt; iterator = messageConverters.iterator();</span>
<span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span>
<span class="line">            HttpMessageConverter&lt;?&gt; converter = iterator.next();</span>
<span class="line">            <span class="keyword">if</span> (converter <span class="keyword">instanceof</span> StringHttpMessageConverter) &#123;</span>
<span class="line">                iterator.remove();</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;</span>
<span class="line">        messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span>
<span class="line">        restTemplate.getMessageConverters().add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span>
<span class="line">        <span class="keyword">return</span> restTemplate;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;ClientHttpRequestFactory.class&#125;)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ClientHttpRequestFactory <span class="title">simpleClientHttpRequestFactory</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        SimpleClientHttpRequestFactory factory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span>
<span class="line">        factory.setReadTimeout(<span class="number">15000</span>);<span class="comment">// ms</span></span>
<span class="line">        <span class="keyword">return</span> factory;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://spring.io/blog/2009/03/27/rest-in-spring-3-resttemplate" target="_blank" rel="external">https://spring.io/blog/2009/03/27/rest-in-spring-3-resttemplate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RestTemplate-是什么？&quot;&gt;&lt;a href=&quot;#RestTemplate-是什么？&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 是什么？&quot;&gt;&lt;/a&gt;RestTemplate 是什么？&lt;/h3&gt;&lt;p&gt;RestTemplate是Spring提供的一个访问Http服务的客户端类，非常类似JdbcTemplate, JmsTemplate。它是线程安全的（一旦创建完成）。从名称上来看，该类更多是针对RESTFUL风格API设计的。当然如果你想通过它调用普通的Http接口也是可以的。&lt;/p&gt;
&lt;h3 id=&quot;RestTemplate-的方法&quot;&gt;&lt;a href=&quot;#RestTemplate-的方法&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 的方法&quot;&gt;&lt;/a&gt;RestTemplate 的方法&lt;/h3&gt;&lt;p&gt;RestTemplate提供的方法都是以Http协议中的6个动词开头的：&lt;/p&gt;
&lt;img src=&quot;/2018/05/30/spring-RestTemplate/spring-template.png&quot; alt=&quot;spring-template.png&quot; title=&quot;&quot;&gt;
&lt;p&gt;这些方法的名称清楚地表明它们调用的是哪个HTTP方法，而名称的第二部分表示返回的内容。 例如，&lt;code&gt;getForObject（）&lt;/code&gt;将执行GET，将HTTP响应转换为你选择的对象类型，并返回该对象。&lt;code&gt;postForLocation&lt;/code&gt;将执行POST，将给定对象转换为HTTP请求，并返回可以找到新创建对象的响应&lt;code&gt;HTTP Location&lt;/code&gt;标头。 如你所见，这些方法试图强制执行REST最佳实践。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机的关机方式</title>
    <link href="https://leokongwq.github.io/2018/05/28/java-JVM-shutdown.html"/>
    <id>https://leokongwq.github.io/2018/05/28/java-JVM-shutdown.html</id>
    <published>2018-05-28T07:53:53.000Z</published>
    <updated>2018-05-28T07:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自: <a href="https://zhuanlan.zhihu.com/p/37287644" target="_blank" rel="external">Java 虚拟机的关机方式</a></p>
<p>JVM 是一个虚拟机，既然是虚拟的机器，就必然涉及到关机操作。JVM 关闭时，首先调用关闭钩子，所有钩子执行完毕后，如果需要进行垃圾回收就调用 finalize 方法，否则直接关闭虚拟机。JVM 关闭过程中，不会中断或停止任何线程，在最终关闭虚拟机时强制关闭所有线程。</p>
<a id="more"></a>
<h3 id="关闭钩子"><a href="#关闭钩子" class="headerlink" title="关闭钩子"></a>关闭钩子</h3><p>关闭钩子是一个可以在 JVM 关闭时执行的回调，可以通过 Runtime.addShutdownHook 进行注册。JVM 关闭时首先会调用这些关闭钩子，但不会保证关闭钩子执行的顺序。关闭钩子的执行时间要尽可能短，不应该再做耗时的操作，因为这会影响 JVM 的关闭时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;    <span class="comment">//TODO&#125;);</span></span>
</pre></td></tr></table></figure>
<p>如果调用关闭钩子时还有线程在运行，那么关闭钩子将和这些线程同时运行。因此，关闭钩子的操作必须保证是线程安全的，访问数据需要使用同步机制，要避免死锁。同时，关闭钩子需要考虑 JVM 关闭的所有可能性，不能假设关闭的原因，也不应该尝试去分析 JVM 关闭的原因。关闭钩子通常用于服务的清理工作，如 dubbo 使用关闭钩子来关闭连接并通知注册中心注销服务。但关闭钩子是并发执行的，需要考虑多个钩子之间的相互影响，如提前关闭日志服务可能导致其他钩子或线程无法再使用日志。建议只使用一个关闭钩子来处理所有的事情，这样可以确保任务串行执行，从而避免多个钩子之间的竞争和死锁。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>Java 中的线程分为普通线程和守护线程。一个线程被创建时会继承创建它的那个线程的守护状态。JVM 启动时创建的线程除了主线程是普通线程，其他线程（如 GC 等）都是守护线程。当线程退出时，JVM 会检查剩余线程的状态，如果剩余的线程都是守护线程已经没有普通线程，那么 JVM 会进行关闭操作。JVM 最终关闭时，守护线程会被直接抛弃，既不会执行 finally 也不会执行回卷栈。因此应该尽量不要使用守护线程，使用时也应该进行简单的操作。</p>
<h3 id="垃圾回收JVM"><a href="#垃圾回收JVM" class="headerlink" title="垃圾回收JVM"></a>垃圾回收JVM</h3><p>关闭的最后一步是进行垃圾回收，主要是文件或套接字资源。这一步主要是调用 finalize 方法进行最后的资源释放。finalize 方法访问的数据可能会被其他线程并发访问，必须对访问进行同步控制。JVM 不保证何时调用 finalize 方法，甚至无法保证是否调用 finalize 方法。因此尽量不要使用 finalize 来释放资源，而应该在 finally 中显式调用 close 方法来关闭资源。</p>
<h3 id="强行关闭"><a href="#强行关闭" class="headerlink" title="强行关闭"></a>强行关闭</h3><p>如果 JVM 遇到问题或者无法关闭，我们可以使用 kill 命令或其他虚拟机自己实现的方法进行强行关闭。强行关闭仅仅是关闭 JVM，不会运行关闭钩子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转自: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/37287644&quot;&gt;Java 虚拟机的关机方式&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JVM 是一个虚拟机，既然是虚拟的机器，就必然涉及到关机操作。JVM 关闭时，首先调用关闭钩子，所有钩子执行完毕后，如果需要进行垃圾回收就调用 finalize 方法，否则直接关闭虚拟机。JVM 关闭过程中，不会中断或停止任何线程，在最终关闭虚拟机时强制关闭所有线程。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://leokongwq.github.io/categories/java/"/>
    
    
      <category term="jvm" scheme="https://leokongwq.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper简介</title>
    <link href="https://leokongwq.github.io/2018/05/24/zookeeper-learning-summary.html"/>
    <id>https://leokongwq.github.io/2018/05/24/zookeeper-learning-summary.html</id>
    <published>2018-05-24T12:46:53.000Z</published>
    <updated>2018-05-30T08:43:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zookeeper-是什么？"><a href="#zookeeper-是什么？" class="headerlink" title="zookeeper 是什么？"></a>zookeeper 是什么？</h3><p>官方解释如下</p>
<blockquote>
<p>ZooKeeper是一个开源的，专门服务于分布式应用的分布式协调服务。 它提供了一组简单的<code>原语</code>，分布式应用程序可以利用这些<code>原语</code>来实现更高级别的服务，以实现同步，配置维护以及组和命名。 它被设计为易于编程，并使用类似大家所熟悉的文件系统目录树结构的数据模型。</p>
</blockquote>
<p>众所周知，协调服务很难正确实现。 它们特别容易出现诸如竞态条件和死锁等错误。 ZooKeeper背后的动机是减轻分布式应用程序从头开始实施协调服务的责任。</p>
<a id="more"></a>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><h4 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h4><p>ZooKeeper允许分布式进程通过与标准文件系统组织相似的共享分层命名空间相互协调。 命名空间由称为znode的数据节点组成，按ZooKeeper的说法 - 这些节点类似于文件和目录。 与典型的专为存储功能而设计的文件系统不同，ZooKeeper中的数据保存在内存中，这意味着ZooKeeper可以实现高吞吐量和低延迟。</p>
<p>ZooKeeper的实现关注与高性能，高可用性，和严格有序的访问。 ZooKeeper的高性能意味着它可以用于大型分布式系统。 可靠性使它不会造成单点故障。 严格的顺序意味着可以在客户端实现复杂的同步原语。</p>
<h4 id="多副本"><a href="#多副本" class="headerlink" title="多副本"></a>多副本</h4><p>像ZooKeeper所协调的分布式进程一样，ZooKeeper本身也倾向于部署多个实例，组成一个整体。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zkservice.jpg" alt="zkservice.jpg" title="">
<p>组成ZooKeeper服务的服务器必须全都彼此了解。它们保持状态的内存映像，以及持久存储中的事务日志和快照。 只要大部分服务器都可用，ZooKeeper服务将可用。</p>
<p>客户端只会连接到整个集群中的一台ZooKeeper服务器。 客户端会维护一个TCP连接，通过该连接发送请求，获取响应，获取监视事件并发送心跳。 如果到服务器的TCP连接中断，则客户端将连接到不同的服务器。</p>
<h4 id="顺序性"><a href="#顺序性" class="headerlink" title="顺序性"></a>顺序性</h4><p>ZooKeeper使用一个反映所有ZooKeeper事务顺序的数字来标记每个更新。 后续操作可以使用该顺序来实现更高级别的抽象，例如同步原语。</p>
<h4 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h4><p>zookeeper在读多写少的场景下速度非常快。ZooKeeper 服务可以运行在数千台机器上，在读取操作远多于写操作的场景下性能表现很好。读的性能可能10倍于写性能</p>
<h4 id="数据模型和继承结构的命名空间"><a href="#数据模型和继承结构的命名空间" class="headerlink" title="数据模型和继承结构的命名空间"></a>数据模型和继承结构的命名空间</h4><p>ZooKeeper提供的名称空间非常类似于标准文件系统。 名称是由斜线<code>/</code>分隔的一系列路径元素。 ZooKeeper名称空间中的每个节点都由一个路径标识。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zknamespace.jpg" alt="zknamespace.jpg" title="">
<h4 id="节点和临时节点"><a href="#节点和临时节点" class="headerlink" title="节点和临时节点"></a>节点和临时节点</h4><p>与标准文件系统不同，ZooKeeper命名空间中的每个节点都可以拥有与其相关的数据。 这就像有一个文件系统，允许一个节点既是文件也是目录。 （ZooKeeper被设计用于存储协调数据：状态信息，配置，位置信息等，因此存储在每个节点的数据通常很小，在字节到千字节范围内。）我们使用术语znode来说明我们正在谈论ZooKeeper数据节点。</p>
<p>Znodes维护一个统计结构，包括数据更改的版本号，ACL更改和时间戳，以允许缓存验证和协调更新。 每次znode的数据更改时，版本号都会增加。 例如，每当客户端检索数据时，客户端也会收到数据的版本。</p>
<p>存储在名称空间中每个节点上的数据都是以原子方式读取和写入的。 读取获取与znode关联的所有数据字节，写入将替换所有数据。 每个节点都有一个访问控制列表（ACL），限制谁可以做什么。</p>
<p>ZooKeeper也有临时节点的概念。 只要创建znode的会话处于活动状态，这些znode就会存在。 当会话结束时，znode被删除。 当你想实现[tbd]时，临时节点很有用。</p>
<h4 id="条件更新和观察者"><a href="#条件更新和观察者" class="headerlink" title="条件更新和观察者"></a>条件更新和观察者</h4><p>ZooKeeper支持观察者的概念。 客户可以在znode上设置观察者。 当znode改变时，观察者将被<code>触发并移除</code>。 当观察者被触发时，客户端会收到一个数据包，说明znode已经改变。 如果客户端和其中一个ZooKeeper服务器之间的连接中断，客户端将收到本地通知。 这些可用于[tbd]。</p>
<h4 id="保证"><a href="#保证" class="headerlink" title="保证"></a>保证</h4><p>ZooKeeper非常快速且非常简单。 由于其目标是构建更复杂的服务（如同步）的基础，因此它提供了一组保证。 这些是：</p>
<ul>
<li>顺序一致性  来自客户端的更新将按照它们发送的顺序被执行。</li>
<li>原子性  更新或者成功或失败，不存在中间状态</li>
<li>单系统映像  无论客户端连接到哪个服务器，客户端都会看到相同的服务视图。</li>
<li>可靠性 一旦更新被成功执行，则该更新结果会从该时刻被持久化，直到客户端下一次更新它为止。</li>
<li>及时性 - 系统的客户视图保证在一定的时间范围内保持最新状态。</li>
</ul>
<h4 id="简单的-API"><a href="#简单的-API" class="headerlink" title="简单的 API"></a>简单的 API</h4><p>Zookeeper的一个设计目标就是提供非常简单的编程接口。因此，它只提供了下面的操作：</p>
<h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><p>创建一个节点</p>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>删除一个节点</p>
<h5 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h5><p>判断一个节点是否存在</p>
<h5 id="get-data"><a href="#get-data" class="headerlink" title="get data"></a>get data</h5><p>获取节点的数据</p>
<h5 id="set-data"><a href="#set-data" class="headerlink" title="set data"></a>set data</h5><p>设置节点的数据</p>
<h5 id="get-children"><a href="#get-children" class="headerlink" title="get children"></a>get children</h5><p>获取节点的子节点列表</p>
<h5 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h5><p>等待数据传播</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>ZooKeeper组件显示了ZooKeeper服务的高级组件。 除请求处理器外，构成ZooKeeper服务的每个服务器都复制其各个组件的副本。</p>
<img src="/2018/05/24/zookeeper-learning-summary/zkcomponents.jpg" alt="zkcomponents.jpg" title="">
<p>副本集数据库是一个包含整个数据树的内存数据库。更新操作会被写入磁盘以实现故障恢复，写操作会先序列化到磁盘，然后在内存数据库中执行。</p>
<p>每个ZooKeeper服务器都为客户提供服务。客户端连接至一台服务器以提交irequest。读请求的数据是从每个服务器数据库的本地副本获取。需改服务状态的请求，也就是写请求是通过一致性协议进行处理的。</p>
<p>作为一致性协议的一部分，所有来自客户端的写入请求都被转发到一台称为<code>Leader</code>的服务器。 ZooKeeper服务的其余节点服务器（称为follower）接收Leader发出的消息提议，并就消息传递达成一致。消息传递层负责在Leader宕机后选择新的Leader，并与Leader数据保存同步。</p>
<p>ZooKeeper使用自定义的原子消息传递协议<code>(ZAB)</code>。由于消息传递层是原子的，因此ZooKeeper可以保证本地数据副本永不过期。当Leader接收到一个写请求时，它会计算在写操作被执行时系统所处的状态，并将其转换成一个捕获这个新状态的事务</p>
<h3 id="zookeeper的一致性如何保证"><a href="#zookeeper的一致性如何保证" class="headerlink" title="zookeeper的一致性如何保证"></a>zookeeper的一致性如何保证</h3><h3 id="zookeeper如何选主"><a href="#zookeeper如何选主" class="headerlink" title="zookeeper如何选主"></a>zookeeper如何选主</h3><h3 id="zookeeper写数据的过程"><a href="#zookeeper写数据的过程" class="headerlink" title="zookeeper写数据的过程"></a>zookeeper写数据的过程</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://zookeeper.apache.org/doc/r3.5.4-beta/zookeeperOver.html" target="_blank" rel="external">zookeeperOver.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;zookeeper-是什么？&quot;&gt;&lt;a href=&quot;#zookeeper-是什么？&quot; class=&quot;headerlink&quot; title=&quot;zookeeper 是什么？&quot;&gt;&lt;/a&gt;zookeeper 是什么？&lt;/h3&gt;&lt;p&gt;官方解释如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ZooKeeper是一个开源的，专门服务于分布式应用的分布式协调服务。 它提供了一组简单的&lt;code&gt;原语&lt;/code&gt;，分布式应用程序可以利用这些&lt;code&gt;原语&lt;/code&gt;来实现更高级别的服务，以实现同步，配置维护以及组和命名。 它被设计为易于编程，并使用类似大家所熟悉的文件系统目录树结构的数据模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;众所周知，协调服务很难正确实现。 它们特别容易出现诸如竞态条件和死锁等错误。 ZooKeeper背后的动机是减轻分布式应用程序从头开始实施协调服务的责任。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="zookeeper" scheme="https://leokongwq.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>常见DNS记录解释</title>
    <link href="https://leokongwq.github.io/2018/05/24/common-dns-records.html"/>
    <id>https://leokongwq.github.io/2018/05/24/common-dns-records.html</id>
    <published>2018-05-24T06:18:58.000Z</published>
    <updated>2018-05-24T07:53:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><p>A记录，又称IP指向，用户可以设置域名到目标主机IP地址的映射，从而实现通过域名找到服务器。</p>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p>可以配置多条A记录，通过域名解析来实现<code>轮询</code>负载均衡。</p>
<h4 id="泛域名解析"><a href="#泛域名解析" class="headerlink" title="泛域名解析"></a>泛域名解析</h4><p>泛域名解析指的是将一个域名所有未指定的子域名统一解析到一个地址。</p>
<p>在<code>主机名</code>中填入<code>*</code>，类型为<code>A</code>，<code>IP地址/主机名</code>中填入web服务器的IP地址，点击“新增”按钮即可。</p>
<a id="more"></a>
<h3 id="NS-记录"><a href="#NS-记录" class="headerlink" title="NS 记录"></a>NS 记录</h3><p>域名服务器 (NS) 记录用于确定由哪些服务器来解析域名。</p>
<p>例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置<code>news.mydomain.com</code>的NS记录。</p>
<p>说明：<code>优先级</code>中的数字越小表示级别越高；<code>IP地址/主机名</code>中既可以填写IP地址，也可以填写像<code>ns.mydomain.com</code>这样的主机地址，但必须保证该主机地址有效。</p>
<p>如将<code>news.mydomain.com</code>的NS记录指向到<code>ns.mydomain.com</code>，在设置NS记录的同时还需要设置<code>ns.mydomain.com</code>的指向（因为<code>ns.mydomain.com</code>也是一个域名，需要解析）。</p>
<p>否则NS记录将无法正常解析；NS记录优先于A记录。即，如果一个主机地址同时存在NS记录和A记录，则A记录不生效。这里的NS记录只对子域名生效。 </p>
<h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><p>MX记录: 邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名<code>mydomain.com</code>为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以<code>@mydomain.com</code>结尾的邮件。 </p>
<p>说明：MX记录可以使用主机名或IP地址；MX记录可以通过设置优先级实现主辅服务器设置，“优先级”中的数字越小表示级别越高。也可以使用相同优先级达到负载均衡的目的；如果在<code>主机名</code>中填入子域名则此MX记录只对该子域名生效。</p>
<h3 id="CNAME-记录"><a href="#CNAME-记录" class="headerlink" title="CNAME 记录"></a>CNAME 记录</h3><p><code>CNAME</code>(Canonical Name)通常称别名指向。你可以为一个主机设置别名。比如设置test.mydomain.com，用来指向一个主机www.rddns.com那么以后就可以用test.mydomain.com来代替访问www.rddns.com了。</p>
<p>说明：CNAME的目标主机地址只能使用主机名，不能使用IP地址；主机名前不能有任何其他前缀，如：<code>http://</code>等是不被允许的；A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line">nslookup  www.baidu.com</span>
<span class="line">Server:		10.1.30.51</span>
<span class="line">Address:	10.1.30.51#53</span>
<span class="line"></span>
<span class="line">Non-authoritative answer:</span>
<span class="line">www.baidu.com	canonical name = www.a.shifen.com.</span>
<span class="line">Name:	www.a.shifen.com</span>
<span class="line">Address: 61.135.169.121</span>
<span class="line">Name:	www.a.shifen.com</span>
<span class="line">Address: 61.135.169.125</span>
</pre></td></tr></table></figure>
<p>从上面的命令输出可以知道：<code>www.baidu.com</code>的别名是<code>www.a.shifen.com.</code></p>
<p>使用 CNAME 的好处就是解耦了域名和 IP 的直接联系, 这样假如服务器 IP 发生变更, 只需要改变CNAME记录中别名的A记录中的IP。</p>
<h3 id="TXT记录"><a href="#TXT记录" class="headerlink" title="TXT记录"></a>TXT记录</h3><p>TXT记录一般是为某条记录设置说明，比如你新建了一条<code>a.ezloo.com</code>的TXT记录，TXT记录内容”this is a test TXT record.”，然后你用 <code>nslookup -qt txt a.ezloo.com</code> ，你就能看到”this is a test TXT record”的字样。</p>
<p>除外，TXT还可以用来验证域名的所有，比如你的域名使用了Google的某项服务，Google会要求你建一个TXT记录，然后Google验证你对此域名是否具备管理权限。</p>
<p>在命令行下可以使用<code>nslookup -qt=txt a.ezloo.com</code>来查看TXT记录。</p>
<h3 id="AAAA记录"><a href="#AAAA记录" class="headerlink" title="AAAA记录"></a>AAAA记录</h3><p>AAAA记录是一个指向IPv6地址的记录。</p>
<p>可以使用nslookup -qt=aaaa a.ezloo.com来查看AAAA记录。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://support.google.com/a/answer/48090?hl=zh-Hans" target="_blank" rel="external">DNS 基础知识</a></p>
<p><a href="https://support.dnsimple.com/categories/dns/" target="_blank" rel="external">DNS articles</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A记录&quot;&gt;&lt;a href=&quot;#A记录&quot; class=&quot;headerlink&quot; title=&quot;A记录&quot;&gt;&lt;/a&gt;A记录&lt;/h3&gt;&lt;p&gt;A记录，又称IP指向，用户可以设置域名到目标主机IP地址的映射，从而实现通过域名找到服务器。&lt;/p&gt;
&lt;h4 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h4&gt;&lt;p&gt;可以配置多条A记录，通过域名解析来实现&lt;code&gt;轮询&lt;/code&gt;负载均衡。&lt;/p&gt;
&lt;h4 id=&quot;泛域名解析&quot;&gt;&lt;a href=&quot;#泛域名解析&quot; class=&quot;headerlink&quot; title=&quot;泛域名解析&quot;&gt;&lt;/a&gt;泛域名解析&lt;/h4&gt;&lt;p&gt;泛域名解析指的是将一个域名所有未指定的子域名统一解析到一个地址。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;主机名&lt;/code&gt;中填入&lt;code&gt;*&lt;/code&gt;，类型为&lt;code&gt;A&lt;/code&gt;，&lt;code&gt;IP地址/主机名&lt;/code&gt;中填入web服务器的IP地址，点击“新增”按钮即可。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>JWT简介</title>
    <link href="https://leokongwq.github.io/2018/05/22/json-web-token.html"/>
    <id>https://leokongwq.github.io/2018/05/22/json-web-token.html</id>
    <published>2018-05-22T04:52:27.000Z</published>
    <updated>2018-06-24T13:48:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-JSON-Web-Token"><a href="#What-is-JSON-Web-Token" class="headerlink" title="What is JSON Web Token?"></a>What is JSON Web Token?</h3><p>JSON Web Token（JWT）是一个开放式标准（<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="external">RFC 7519</a>），它定义了一种紧凑且自包含的方式，用于在各方之间以JSON对象安全的传输信息。 这些信息可以通过数字签名进行验证和信任。 JWT可以使用一个秘钥（HMAC签名算法）或使用RSA的公钥/私钥对对JWT进行签名。</p>
<p>虽然JWT可以加密以提供各方之间数据传递的保密性，但我们将重点关注已签名的令牌。 签名的令牌可以验证其中包含的信息的完整性，而加密令牌隐藏来自其他方的信息。 当令牌使用公钥/私钥对进行签名时，签名还证明只有持有私钥的方是签名方。</p>
<p>下面深入了解下JWT中的概念</p>
<ul>
<li>紧凑: 因为JWT的大小比较小，因为它可以通过URL, POST参数 或者HTTP请求头来进行传递。从另一方面来说说，因为它小，所以传递速度也比较快（占用带宽小）。</li>
<li>自包含: JWT的负载包含了该用户所需的所有信息，从而避免了对DB的多次查询。</li>
</ul>
<a id="more"></a>
<h3 id="When-should-you-use-JSON-Web-Tokens"><a href="#When-should-you-use-JSON-Web-Tokens" class="headerlink" title="When should you use JSON Web Tokens?"></a>When should you use JSON Web Tokens?</h3><p>以下是JSON Web Tokens有用的一些场景：</p>
<ul>
<li>认证: 这是使用JWT最常见的情况。 一旦用户登录，每个后续请求都将包含JWT，允许用户访问该令牌允许的路由，服务和资源。 单点登录（SSO）是当今广泛使用JWT的一项功能，因为它的开销很小，并且能够轻松地跨不同域使用.</li>
<li>信息交换: JWT也是一个在各方之间安全传输信息的好方法。 因为JWT可以签名 - 例如使用公钥/私钥对，所以可以确定发件人是他们自称的人。 此外，由于使用请求头和有效载荷来参加签名的计算，因此你还可以验证内容是否未被篡改。</li>
</ul>
<h3 id="What-is-the-JSON-Web-Token-structure"><a href="#What-is-the-JSON-Web-Token-structure" class="headerlink" title="What is the JSON Web Token structure?"></a>What is the JSON Web Token structure?</h3><p>在JWT的紧凑格式中, JWT由三部分构成，每个部分以<code>.</code>号进行分割。如下所示：</p>
<ul>
<li>Header</li>
<li>Payload</li>
<li>Signature</li>
</ul>
<p>因此一个典型的JWT可能看起来是下面的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">xxxxx.yyyyy.zzzzz</span>
</pre></td></tr></table></figure>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>header部分通常包含两部分：令牌的类型，和其使用的哈希算法，例如：HMAC，SHA256 或 RSA.</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span>
<span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>然后，这个JSON被Base64Url编码，形成JWT的第一部分。</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>令牌的第二部分是包含声明的有效负载。 声明是关于实体（通常是用户）和其它元数据的声明。 有三种类型的claim：注册的claim，公开的claim和私有的claim。</p>
<ul>
<li>已登记的claims：这些是一组预先定义的claims，这些claims不是强制性的，但建议提供一套有用的，可互操作的claims。 其中一些是：iss（发行者），exp（到期时间），sub（主题），aud（受众）等。</li>
</ul>
<blockquote>
<p>Notice that the claim names are only three characters long as JWT is meant to be compact.</p>
</blockquote>
<ul>
<li>公共的claims: 这些可以由使用JWT的人员随意定义。 但为避免冲突，应在<a href="https://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="external">IANA JSON Web令牌注册表</a>中定义它们，或将其定义为包含防冲突命名空间的URI。</li>
<li>私有的claims: 这些是为了同意使用它们并且既没有登记也没有公开声明的各方之间共享信息而创建的定制声明。</li>
</ul>
<p>一个有效的负载可以是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line">&#123;</span>
<span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span>
<span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span>
<span class="line">  &quot;admin&quot;: true</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>然后将有效载荷Base64Url进行编码以形成JSON Web令牌的第二部分。</p>
<blockquote>
<p>请注意，对于已签名的令牌，此信息尽管受到篡改保护，但任何人都可以阅读。 除非加密，否则不要将关键信息放在JWT的payload或header中。</p>
</blockquote>
<h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>要创建签名部分，你必须拥用已经编码的header，编码的有效载荷，秘钥，header中指定的算法并签名。</p>
<p>例如，如果你想使用HMAC SHA256算法，签名将按照以下方式创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span>
</pre></td></tr></table></figure>
<p>该签名用于验证消息在一路上没有改变，并且在使用私钥签名的令牌的情况下，它还可以验证JWT的发件人是谁说的。</p>
<h4 id="组合起来"><a href="#组合起来" class="headerlink" title="组合起来"></a>组合起来</h4><p>输出是三个由<code>.</code>号分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递，而与基于XML的标准（如SAML）相比，它更加紧凑。</p>
<p>以下显示了一个JWT，它具有签名通过编码的header和有效负载，并且使用秘钥进行签名。</p>
<img src="/2018/05/22/json-web-token/encoded-jwt3.png" alt="encoded-jwt3.png" title="">
<p>如果你想要使用JWT并将这些概念付诸实践，则可以使用<a href="https://link.jianshu.com/?t=https://jwt.io/#debugger-io" target="_blank" rel="external">jwt.io调试器</a>来解码，验证和生成JWT。</p>
<h3 id="JWT-如何工作"><a href="#JWT-如何工作" class="headerlink" title="JWT 如何工作"></a>JWT 如何工作</h3><p>在认证场景中，相较于传统的模式(在服务端生成会话并返回一个cookie)，当用户使用他们的凭据成功登录以后，一个JSON Web Token将会被返回，该令牌必须被保存在本地(典型的场景是保存在本地存储中，不过cookie也常常用来保存这一类信息)。</p>
<p>无论何时，当用户想要访问一个受保护的资源，他必须将JWT发送到服务端，典型的发送方式是通过 Authorization 请求头字段，并指定 Bearer 模式。请求头的内容看起来会像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span>
</pre></td></tr></table></figure>
<p>这是一个无状态的认证机制，用户信息永远也不会保存在服务器的内存中。服务器受保护的路由会检查通过Authorization头传递的令牌是否是一个正确的令牌，如果检查通过，用户将被允许访问受保护的资源。由于JWT是自包含的，所有必要的信息都包含在令牌中，进而减少了查询数据库所需要的时间。</p>
<p>正因为如此，JWT允许你的服务完全依赖于无状态的数据接口。它不关心你的APIs寄宿在哪个域名之下，因此跨域访问(CORS)将不会成为一个问题(使用cookie就不行)</p>
<p>下面的图表展示了整个处理流程</p>
<img src="/2018/05/22/json-web-token/jwt-diagram.png" alt="jwt-diagram.png" title="">
<h3 id="安全总结"><a href="#安全总结" class="headerlink" title="安全总结"></a>安全总结</h3><ol>
<li>预防XSS可以通过cookie存储JWT， http-only, secure</li>
<li>预防CSRF可以通过给请求添加CSRF token， 该token可以放在WebStorage中。如此，攻击者网站不能获取该token。</li>
</ol>
<p>当然了，如果攻击者第一步通过XSS获取了CSRF token，第二步通过CSRF攻击，则漏洞还是存在的。单此种情况发生的概率能小一点。只能通过缩短token的时间</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://mozillazg.com/2015/06/hello-jwt.html" target="_blank" rel="external">hello-jwt</a><br><a href="https://stormpath.com/blog/where-to-store-your-jwts-cookies-vs-html5-web-storage/" target="_blank" rel="external">where-to-store-your-jwts-cookies-vs-html5-web-storage</a><br><a href="https://stormpath.com/blog/jwt-the-right-way/" target="_blank" rel="external">jwt-the-right-way</a><br><a href="https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/" target="_blank" rel="external">ten-things-you-should-know-about-tokens-and-cookies</a><br><a href="http://stackoverflow.com/questions/27067251/where-to-store-jwt-in-browser-how-to-protect-against-csrf" target="_blank" rel="external">where-to-store-jwt-in-browser-how-to-protect-against-csrf</a><br><a href="http://hippoom.github.io/blogs/stoping-using-jwt-for-sessions.html" target="_blank" rel="external">别再使用JWT</a><br><a href="https://bbs.huaweicloud.com/blogs/06607ea7b53211e7b8317ca23e93a891" target="_blank" rel="external">基于JWT的Token认证机制及安全问题</a><br><a href="https://x-team.com/blog/my-experience-with-json-web-tokens/" target="_blank" rel="external">My Experience with JSON Web Tokens</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-JSON-Web-Token&quot;&gt;&lt;a href=&quot;#What-is-JSON-Web-Token&quot; class=&quot;headerlink&quot; title=&quot;What is JSON Web Token?&quot;&gt;&lt;/a&gt;What is JSON Web Token?&lt;/h3&gt;&lt;p&gt;JSON Web Token（JWT）是一个开放式标准（&lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;RFC 7519&lt;/a&gt;），它定义了一种紧凑且自包含的方式，用于在各方之间以JSON对象安全的传输信息。 这些信息可以通过数字签名进行验证和信任。 JWT可以使用一个秘钥（HMAC签名算法）或使用RSA的公钥/私钥对对JWT进行签名。&lt;/p&gt;
&lt;p&gt;虽然JWT可以加密以提供各方之间数据传递的保密性，但我们将重点关注已签名的令牌。 签名的令牌可以验证其中包含的信息的完整性，而加密令牌隐藏来自其他方的信息。 当令牌使用公钥/私钥对进行签名时，签名还证明只有持有私钥的方是签名方。&lt;/p&gt;
&lt;p&gt;下面深入了解下JWT中的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;紧凑: 因为JWT的大小比较小，因为它可以通过URL, POST参数 或者HTTP请求头来进行传递。从另一方面来说说，因为它小，所以传递速度也比较快（占用带宽小）。&lt;/li&gt;
&lt;li&gt;自包含: JWT的负载包含了该用户所需的所有信息，从而避免了对DB的多次查询。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>ActiveMQ 消息重发策略</title>
    <link href="https://leokongwq.github.io/2018/05/19/activemq-redelivery-policy-config.html"/>
    <id>https://leokongwq.github.io/2018/05/19/activemq-redelivery-policy-config.html</id>
    <published>2018-05-19T01:24:28.000Z</published>
    <updated>2018-05-19T02:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在使用ActiveMQ时，配置了消息重发策略。 但因为对配置项的理解不够深刻，导致虽然消息重新被投递了，单因为时间间隔太小，最终被放入DLQ中。</p>
<blockquote>
<p>注意： 我使用的ActiveMQ版本是5.8</p>
</blockquote>
<h3 id="错误配置"><a href="#错误配置" class="headerlink" title="错误配置"></a>错误配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> RedeliveryPolicy <span class="title">redeliveryPolicy</span><span class="params">()</span> </span>&#123;</span>
<span class="line">   RedeliveryPolicy redeliveryPolicy = <span class="keyword">new</span> RedeliveryPolicy();</span>
<span class="line">   <span class="comment">//是否在每次尝试重新发送失败后,增长这个等待时间</span></span>
<span class="line">   redeliveryPolicy.setUseExponentialBackOff(<span class="keyword">true</span>);</span>
<span class="line">   <span class="comment">//重发次数,默认为6次   这里设置为10次</span></span>
<span class="line">   redeliveryPolicy.setMaximumRedeliveries(<span class="number">10</span>);</span>
<span class="line">   <span class="comment">//重发时间间隔,默认为1秒</span></span>
<span class="line">   redeliveryPolicy.setInitialRedeliveryDelay(<span class="number">1</span>);</span>
<span class="line">   <span class="comment">//第一次失败后重新发送之前等待1秒,第二次失败再等待1 * 2秒,这里的2就是value</span></span>
<span class="line">   redeliveryPolicy.setBackOffMultiplier(<span class="number">2</span>);</span>
<span class="line">   <span class="comment">//是否避免消息碰撞</span></span>
<span class="line">   redeliveryPolicy.setUseCollisionAvoidance(<span class="keyword">false</span>);</span>
<span class="line">   <span class="comment">//设置重发最大拖延时间-1 表示没有拖延只有UseExponentialBackOff(true)为true时生效</span></span>
<span class="line">   redeliveryPolicy.setMaximumRedeliveryDelay(-<span class="number">1</span>);</span>
<span class="line">   <span class="keyword">return</span> redeliveryPolicy;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<a id="more"></a>
<p>上面配置有如下问题：</p>
<ol>
<li>第一次投递延时<code>(initialRedeliveryDelay)</code>为1毫秒, 而不是注释里面说的1秒。这是第一个致命错误</li>
<li>最大重投次数<code>(maximumRedeliveries)</code> 为10。 加上第一个配置，导致短时间内消息被重新投递多次，一般来说消费者肯定不能成功消费的。因此会导致消息被放入DLQ中，业务丢失了消息。<br>这是第二个错误，重投次数有点小。对于非常重要的消息，可以适当调大该配置值。</li>
<li>是否启用重投时延指数增长策略<code>(useExponentialBackOff) 默认是false</code>。如何理解呢？ActiveMQ 会在延迟<code>initialRedeliveryDelay</code> 指定的时间后发起<strong>第一次</strong>重新投递，之后根据是否设置了<code>useExponentialBackOff=true</code>来判断是否需要递增每次投递的时延。如果设置了<code>useExponentialBackOff=true</code>，那么每次重新投递的时间会延迟<code>redeliveryDelay * backOffMultiplier</code></li>
</ol>
<p>由此可以退出每次消息重新投递的延时为：</p>
<table>
<thead>
<tr>
<th>次数</th>
<th>延时</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1毫秒</td>
</tr>
<tr>
<td>2</td>
<td>2 毫秒</td>
</tr>
<tr>
<td>3</td>
<td>4 毫秒</td>
</tr>
<tr>
<td>4</td>
<td>8 毫秒</td>
</tr>
<tr>
<td>5</td>
<td>16 毫秒</td>
</tr>
<tr>
<td>6</td>
<td>32 毫秒</td>
</tr>
<tr>
<td>7</td>
<td>64 毫秒</td>
</tr>
<tr>
<td>8</td>
<td>128 毫秒</td>
</tr>
<tr>
<td>9</td>
<td>256 毫秒</td>
</tr>
<tr>
<td>10</td>
<td>512 毫秒</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，完全没有达到需要的效果。痛定思痛，翻看官方文档和源代码，将ActiveMQ消息重复策略总结如下：</p>
<h3 id="消息重发时机"><a href="#消息重发时机" class="headerlink" title="消息重发时机"></a>消息重发时机</h3><p>1．在使用事务的Session中，调用rollback()方法；<br>2．在使用事务的Session中，调用commit()方法之前就关闭了Session;<br>3．在Session中使用CLIENT_ACKNOWLEDGE签收模式，并且调用了<code>recover()</code>方法。</p>
<p>可以通过设置<code>ActiveMQConnectionFactory</code>和<code>ActiveMQConnection</code>来定制想要的再次传送策略。</p>
<h3 id="消息重发配置项"><a href="#消息重发配置项" class="headerlink" title="消息重发配置项"></a>消息重发配置项</h3><h4 id="collisionAvoidanceFactor"><a href="#collisionAvoidanceFactor" class="headerlink" title="collisionAvoidanceFactor"></a>collisionAvoidanceFactor</h4><p>默认值 0.15     </p>
<p>设置防止冲突范围的正负百分比，只有启用useCollisionAvoidance参数时才生效。</p>
<h4 id="maximumRedeliveries"><a href="#maximumRedeliveries" class="headerlink" title="maximumRedeliveries"></a>maximumRedeliveries</h4><p>默认值：6</p>
<p>最大重传次数。 达到最大重连次数后抛出异常。为-1时不限制次数，为0时表示不进行重传。</p>
<h4 id="maximumRedeliveryDelay"><a href="#maximumRedeliveryDelay" class="headerlink" title="maximumRedeliveryDelay"></a>maximumRedeliveryDelay</h4><p>默认值 -1    </p>
<p>最大传送延迟，只在useExponentialBackOff为true时有效（V5.5），假设首次重连间隔为10ms，倍数为2，那么第二次重连时间间隔为 20ms，第三次重连时间间隔为40ms，当重连时间间隔大的最大重连时间间隔时，以后每次重连时间间隔都为最大重连时间间隔。</p>
<h4 id="initialRedeliveryDelay"><a href="#initialRedeliveryDelay" class="headerlink" title="initialRedeliveryDelay"></a>initialRedeliveryDelay</h4><p>默认值 1000L     </p>
<p>初始重发延迟时间</p>
<h4 id="redeliveryDelay"><a href="#redeliveryDelay" class="headerlink" title="redeliveryDelay"></a>redeliveryDelay</h4><p>默认值：1000L     </p>
<p>重发延迟时间，当initialRedeliveryDelay=0时生效（v5.4）</p>
<h4 id="useCollisionAvoidance"><a href="#useCollisionAvoidance" class="headerlink" title="useCollisionAvoidance"></a>useCollisionAvoidance</h4><p>默认值 false     </p>
<p>启用防止冲突功能，因为消息接收时是可以使用多线程并发处理的，应该是为了重发的安全性，避开所有并发线程都在同一个时间点进行消息接收处理。所有线程在同一个时间点处理时会发生什么问题呢？应该没有问题，只是为了平衡broker处理性能，不会有时很忙，有时很空闲。</p>
<h4 id="useExponentialBackOff"><a href="#useExponentialBackOff" class="headerlink" title="useExponentialBackOff"></a>useExponentialBackOff</h4><p>默认值 false          </p>
<p>启用指数倍数递增的方式增加延迟时间。</p>
<h4 id="backOffMultiplier"><a href="#backOffMultiplier" class="headerlink" title="backOffMultiplier"></a>backOffMultiplier</h4><p>默认值 5    </p>
<p>重连时间间隔递增倍数，只有值大于1和启用<code>useExponentialBackOff</code>参数时才生效。</p>
<h3 id="重发源码分析"><a href="#重发源码分析" class="headerlink" title="重发源码分析"></a>重发源码分析</h3><h4 id="重发时机"><a href="#重发时机" class="headerlink" title="重发时机"></a>重发时机</h4><figure class="highlight java"><figcaption><span>ActiveMQMessageConsumer.rollback</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> currentRedeliveryCount = lastMd.getMessage().getRedeliveryCounter();</span>
<span class="line"> <span class="keyword">if</span> (currentRedeliveryCount &gt; <span class="number">0</span>) &#123;</span>
<span class="line">     <span class="comment">// 获取下次被重新投递的延迟时间</span></span>
<span class="line">     redeliveryDelay = redeliveryPolicy.getNextRedeliveryDelay(redeliveryDelay);</span>
<span class="line"> &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">     <span class="comment">//  第一被重新投递的延迟时间 </span></span>
<span class="line">     redeliveryDelay = redeliveryPolicy.getInitialRedeliveryDelay();</span>
<span class="line"> &#125;</span>
<span class="line"> <span class="comment">// 当前消息被重新投递的此时大于配置的值，此时消息会被发送到DLQ</span></span>
<span class="line"> <span class="keyword">if</span> (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES</span>
<span class="line">                    &amp;&amp; lastMd.getMessage().getRedeliveryCounter() &gt; redeliveryPolicy.getMaximumRedeliveries()) &#123;</span>
<span class="line"><span class="comment">// We need to NACK the messages so that they get sent to the</span></span>
<span class="line"><span class="comment">// DLQ.</span></span>
<span class="line"><span class="comment">// Acknowledge the last message.</span></span>
<span class="line"></span>
<span class="line">MessageAck ack = <span class="keyword">new</span> MessageAck(lastMd, MessageAck.POSION_ACK_TYPE, deliveredMessages.size());</span>
<span class="line"> &#125; <span class="keyword">else</span> &#123;</span>
<span class="line">     <span class="comment">// only redelivery_ack after first delivery</span></span>
<span class="line">     <span class="keyword">if</span> (currentRedeliveryCount &gt; <span class="number">0</span>) &#123;</span>
<span class="line">         MessageAck ack = <span class="keyword">new</span> MessageAck(lastMd, MessageAck.REDELIVERED_ACK_TYPE, deliveredMessages.size());</span>
<span class="line">         ack.setFirstMessageId(firstMsgId);</span>
<span class="line">         session.sendAck(ack,<span class="keyword">true</span>);</span>
<span class="line">     &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="重新投递的延迟时间计算"><a href="#重新投递的延迟时间计算" class="headerlink" title="重新投递的延迟时间计算"></a>重新投递的延迟时间计算</h4><figure class="highlight java"><figcaption><span>RedeliveryPolicy.getNextRedeliveryDelay</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getNextRedeliveryDelay</span><span class="params">(<span class="keyword">long</span> previousDelay)</span> </span>&#123;</span>
<span class="line">   <span class="keyword">long</span> nextDelay = redeliveryDelay;</span>
<span class="line">   <span class="comment">//启用了 指数级延迟时间递增策略</span></span>
<span class="line">   <span class="keyword">if</span> (previousDelay &gt; <span class="number">0</span> &amp;&amp; useExponentialBackOff &amp;&amp; backOffMultiplier &gt; <span class="number">1</span>) &#123;</span>
<span class="line">       nextDelay = (<span class="keyword">long</span>) (previousDelay * backOffMultiplier);</span>
<span class="line">       <span class="keyword">if</span>(maximumRedeliveryDelay != -<span class="number">1</span> &amp;&amp; nextDelay &gt; maximumRedeliveryDelay) &#123;</span>
<span class="line">           <span class="comment">// in case the user made max redelivery delay less than redelivery delay for some reason.</span></span>
<span class="line">           nextDelay = Math.max(maximumRedeliveryDelay, redeliveryDelay);</span>
<span class="line">       &#125;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//  启用防止冲突功能, 计算一个随机的延迟时间</span></span>
<span class="line">   <span class="keyword">if</span> (useCollisionAvoidance) &#123;</span>
<span class="line">       <span class="comment">/*</span>
<span class="line">        * First random determines +/-, second random determines how far to</span>
<span class="line">        * go in that direction. -cgs</span>
<span class="line">        */</span></span>
<span class="line">       Random random = getRandomNumberGenerator();</span>
<span class="line">       <span class="keyword">double</span> variance = (random.nextBoolean() ? collisionAvoidanceFactor : -collisionAvoidanceFactor) * random.nextDouble();</span>
<span class="line">       nextDelay += nextDelay * variance;</span>
<span class="line">   &#125;</span>
<span class="line">   <span class="comment">//每次重新投递的延迟时间是固定的 </span></span>
<span class="line">   <span class="keyword">return</span> nextDelay;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://activemq.apache.org/redelivery-policy.html" target="_blank" rel="external">http://activemq.apache.org/redelivery-policy.html</a></p>
<p><a href="http://activemq.apache.org/message-redelivery-and-dlq-handling.html" target="_blank" rel="external">http://activemq.apache.org/message-redelivery-and-dlq-handling.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在使用ActiveMQ时，配置了消息重发策略。 但因为对配置项的理解不够深刻，导致虽然消息重新被投递了，单因为时间间隔太小，最终被放入DLQ中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： 我使用的ActiveMQ版本是5.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;错误配置&quot;&gt;&lt;a href=&quot;#错误配置&quot; class=&quot;headerlink&quot; title=&quot;错误配置&quot;&gt;&lt;/a&gt;错误配置&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RedeliveryPolicy &lt;span class=&quot;title&quot;&gt;redeliveryPolicy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   RedeliveryPolicy redeliveryPolicy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedeliveryPolicy();&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//是否在每次尝试重新发送失败后,增长这个等待时间&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setUseExponentialBackOff(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//重发次数,默认为6次   这里设置为10次&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setMaximumRedeliveries(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//重发时间间隔,默认为1秒&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setInitialRedeliveryDelay(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//第一次失败后重新发送之前等待1秒,第二次失败再等待1 * 2秒,这里的2就是value&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setBackOffMultiplier(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//是否避免消息碰撞&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setUseCollisionAvoidance(&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//设置重发最大拖延时间-1 表示没有拖延只有UseExponentialBackOff(true)为true时生效&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   redeliveryPolicy.setMaximumRedeliveryDelay(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; redeliveryPolicy;&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="ActiveMQ" scheme="https://leokongwq.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>REST API 版本化</title>
    <link href="https://leokongwq.github.io/2018/05/15/rest-version.html"/>
    <id>https://leokongwq.github.io/2018/05/15/rest-version.html</id>
    <published>2018-05-15T12:46:21.000Z</published>
    <updated>2018-05-15T13:07:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>要管理应用接口业务逻辑的复杂性，需要你对API进行版本管理。版本控制可帮助你在需要变更服务逻辑时快速迭代。</p>
<blockquote>
<p>随着系统业务发展或逻辑复杂度的不断提高，API的变化是不可避免的。 当变更会破坏现有系统客户端的集成时，管理这种变化的影响可能是相当大的挑战。</p>
</blockquote>
<h2 id="何时对REST-API进行版本化"><a href="#何时对REST-API进行版本化" class="headerlink" title="何时对REST API进行版本化"></a>何时对REST API进行版本化</h2><p>只有在重大破坏性变更发生时才考虑对API进行版本升级。破坏性变更包括：</p>
<ul>
<li>一次或多次调用的响应数据格式发生了变化</li>
<li>响应数据类型发生变化（例如，将整数变为浮点数）</li>
<li>删除API返回数据的部分内</li>
</ul>
<p>发生破坏性变更时，应该总是修改API的主版本号。</p>
<p>非破坏性变更（如添加新的REST端点或新的响应参数）不需要更改主版本号。 </p>
<a id="more"></a>
<h2 id="REST-API-版本号如何定义"><a href="#REST-API-版本号如何定义" class="headerlink" title="REST API 版本号如何定义"></a>REST API 版本号如何定义</h2><p>REST 没有提供任何关于API版本管理的指导规范，但是常用的实现方式有如下三种：</p>
<h3 id="在URI上包含版本号"><a href="#在URI上包含版本号" class="headerlink" title="在URI上包含版本号"></a>在URI上包含版本号</h3><p>使用URI是最直接的方法（也是最常用的方法），尽管它违背了URI应该引用唯一资源的原则。 当版本更新时，您也可以保证客户端的集成。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">http://api.example.com/v1</span>
<span class="line">http://apiv1.example.com</span>
</pre></td></tr></table></figure>
<p>版本号不必是数字，也不必使用<code>v[x]</code>这样语法指定。 替代方案包括日期，项目名称，季节或其他标识符，这些标识符对于产生API的团队来说足够有意义，并且随着版本的变化足够灵活地进行更改。</p>
<h3 id="自定义请求头"><a href="#自定义请求头" class="headerlink" title="自定义请求头"></a>自定义请求头</h3><p>自定义请求头（例如<code>Accept-version</code>）允许你在版本之间保留URI，尽管它实际上是现有<code>Accept</code>头实现的内容协商行为的重复。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Accept-version: v1</span>
<span class="line">Accept-version: v2</span>
</pre></td></tr></table></figure>
<h3 id="使用请求头-Accept"><a href="#使用请求头-Accept" class="headerlink" title="使用请求头 Accept"></a>使用请求头 <code>Accept</code></h3><p>内容协商可能让你保留一组干净的URL，但你仍然必须处理在某处放置不同版本内容的复杂性。 这种负担往往会被上移到您的API控制器，这些控制器负责确定要发送的资源版本。 最终结果往往是更复杂的API，因为客户端在请求资源之前必须知道指定哪些头。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">Accept: application/vnd.example.v1+json</span>
<span class="line">Accept: application/vnd.example+json;version=1.0</span>
</pre></td></tr></table></figure>
<p>在现实世界中，API永远不会变的完全稳定。 因此，如何管理这一变化非常重要。 对于大多数API而言，详细记录API的变更信息和逐渐废弃API是可行的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要管理应用接口业务逻辑的复杂性，需要你对API进行版本管理。版本控制可帮助你在需要变更服务逻辑时快速迭代。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随着系统业务发展或逻辑复杂度的不断提高，API的变化是不可避免的。 当变更会破坏现有系统客户端的集成时，管理这种变化的影响可能是相当大的挑战。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;何时对REST-API进行版本化&quot;&gt;&lt;a href=&quot;#何时对REST-API进行版本化&quot; class=&quot;headerlink&quot; title=&quot;何时对REST API进行版本化&quot;&gt;&lt;/a&gt;何时对REST API进行版本化&lt;/h2&gt;&lt;p&gt;只有在重大破坏性变更发生时才考虑对API进行版本升级。破坏性变更包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次或多次调用的响应数据格式发生了变化&lt;/li&gt;
&lt;li&gt;响应数据类型发生变化（例如，将整数变为浮点数）&lt;/li&gt;
&lt;li&gt;删除API返回数据的部分内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;发生破坏性变更时，应该总是修改API的主版本号。&lt;/p&gt;
&lt;p&gt;非破坏性变更（如添加新的REST端点或新的响应参数）不需要更改主版本号。 &lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="REST" scheme="https://leokongwq.github.io/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot应用部署模式</title>
    <link href="https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html"/>
    <id>https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html</id>
    <published>2018-05-15T09:32:00.000Z</published>
    <updated>2018-05-15T10:48:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>越来越多的人开始使用SpringBoot来实现项目的快速开发。每个团队都会面临一个同样的问题：如何部署SpringBoot应用？大部分人会想：这还需要考虑？当然是同步<code>Fat Jar</code>的方式部署喽。现实是残酷的！可能的原因有：</p>
<ul>
<li>已有的发布系统不支持</li>
<li>团队成员习惯了war包的部署方式</li>
<li>外置的Servlet容器更容易配置</li>
<li>文件路径相关的代码调整</li>
<li>其它原因</li>
</ul>
<a id="more"></a>
<p>SpringBoot 应用默认的打包结果是一个jar包。如果需要按照war包的形式进行部署，我们需要做如下的配置就能够实现。</p>
<h3 id="第一步-扩展-SpringBootServletInitializer"><a href="#第一步-扩展-SpringBootServletInitializer" class="headerlink" title="第一步 扩展 SpringBootServletInitializer"></a>第一步 扩展 SpringBootServletInitializer</h3><p><code>SpringBootServletInitializer</code>是一个实现<code>WebApplicationInitializer</code>接口的抽象类，它是servlet 3.0+环境的主要抽象，以便以编程方式配置ServletContext。 它将Servlet，Filter和ServletContextInitializer bean从应用程序上下文绑定到servlet容器。</p>
<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.websystique.springboot;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span>
<span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.SpringBootServletInitializer;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages=&#123;<span class="string">"com.websystique.springboot"</span>&#125;)<span class="comment">// same as @Configuration @EnableAutoConfiguration @ComponentScan</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootStandAloneWarApp</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> application.sources(SpringBootStandAloneWarApp .class);</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        SpringApplication.run(SpringBootStandAloneWarApp.class, args);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="第二步-修改-Maven打包类型为’war’"><a href="#第二步-修改-Maven打包类型为’war’" class="headerlink" title="第二步 修改 Maven打包类型为’war’"></a>第二步 修改 Maven打包类型为’war’</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line">......</span>
</pre></td></tr></table></figure>
<h3 id="第三步-排除内嵌的Servlet容器"><a href="#第三步-排除内嵌的Servlet容器" class="headerlink" title="第三步 排除内嵌的Servlet容器"></a>第三步 排除内嵌的Servlet容器</h3><p>eg.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="完整的pom文件"><a href="#完整的pom文件" class="headerlink" title="完整的pom文件"></a>完整的pom文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">startClass</span>&gt;</span>SpringBootStandAloneWarApp<span class="tag">&lt;/<span class="name">startClass</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Adds Tomcat and Spring MVC, along others --&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span>
<span class="line">                        <span class="comment">&lt;!-- this will get rid of version info from war file name --&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">mvn clean package</span>
</pre></td></tr></table></figure>
<p>然后将war包部署到已有的Servlet容器中。</p>
<h3 id="同时支持jar和war类型"><a href="#同时支持jar和war类型" class="headerlink" title="同时支持jar和war类型"></a>同时支持jar和war类型</h3><p>上面的pom.xml配置能很好的支持war包类型的部署，但是在开发阶段我们还是希望通过Main方法的方式进行运行。此时我们可以通过Maven的profile功能实现。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"&lt;a class="</span><span class="attr">vglnk</span>" <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>" xmlns:xsi="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>www<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>w3<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>XMLSchema<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>instance<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"</span>
<span class="line">    xsi:schemaLocation="<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>POM<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"vglnk"</span> <span class="attr">href</span>=<span class="string">"http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>http<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>://<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>org<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>maven<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>-<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>xsd<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</span>
<span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.websystique.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStandAloneWarExample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>$&#123;artifact-packaging&#125;<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">startClass</span>&gt;</span>SpringBootStandAloneWarApp<span class="tag">&lt;/<span class="name">startClass</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Additionally, Please make sure that your JAVA_HOME is pointing to </span>
<span class="line">            1.8 when building on commandline --&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span>
<span class="line">        <span class="comment">&lt;!-- Adds Tomcat and Spring MVC, along others --&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line"> </span>
<span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifact-packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">artifact-packaging</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>remote<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">artifact-packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">artifact-packaging</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span>
<span class="line">                                   <span class="comment">&lt;!-- this will get rid of version info from war file name --&gt;</span></span>
<span class="line">                            <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span>
<span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span>
<span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span>
<span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span>
<span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span>
</pre></td></tr></table></figure>
<p>现在我们就可以在本地以FAT jar的方式运行。当发布到生产环境时以war的方式进行部署了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;越来越多的人开始使用SpringBoot来实现项目的快速开发。每个团队都会面临一个同样的问题：如何部署SpringBoot应用？大部分人会想：这还需要考虑？当然是同步&lt;code&gt;Fat Jar&lt;/code&gt;的方式部署喽。现实是残酷的！可能的原因有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已有的发布系统不支持&lt;/li&gt;
&lt;li&gt;团队成员习惯了war包的部署方式&lt;/li&gt;
&lt;li&gt;外置的Servlet容器更容易配置&lt;/li&gt;
&lt;li&gt;文件路径相关的代码调整&lt;/li&gt;
&lt;li&gt;其它原因&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring构建RESTFUL风格的controller</title>
    <link href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html"/>
    <id>https://leokongwq.github.io/2018/05/12/spring-rest-controller.html</id>
    <published>2018-05-12T15:23:46.000Z</published>
    <updated>2018-05-30T08:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 <code>@RestController</code>注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。</p>
<p>Spring在内部使用<code>HttpMessageConverters</code>将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中的<code>Accept Headers</code>。</p>
<p>为了服务JSON，我们将使用Jackson库[jackson-databind.jar]。 对于XML，我们将使用Jackson XML扩展[jackson-dataformat-xml.jar]。 只有在类路径中存在这些库才会触发Spring以所需格式转换输出。 此外，我们将进一步通过使用JAXB批注注释域类来支持XML，以防Jackson的XML扩展库由于某种原因而不可用。</p>
<p><strong>注意</strong>：如果你通过在浏览器中输入网址发送请求，则可以添加后缀[.xml / .json]，以帮助确定要提供的内容的类型。</p>
<a id="more"></a>
<blockquote>
<p>文章使用的是SpringBoot 1.5.2版本，并使用MAVEN3管理项目。</p>
</blockquote>
<h3 id="第一步-添加实体类"><a href="#第一步-添加实体类" class="headerlink" title="第一步 添加实体类"></a>第一步 添加实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="第二步-添加-Controller"><a href="#第二步-添加-Controller" class="headerlink" title="第二步 添加 Controller"></a>第二步 添加 Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.domain.Message;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to RestTemplate Example."</span>;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/&#123;player&#125;"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">message</span><span class="params">(@PathVariable String player)</span> </span>&#123;</span>
<span class="line">        Message msg = <span class="keyword">new</span> Message(player, <span class="string">"Hello "</span> + player);</span>
<span class="line">        <span class="keyword">return</span> msg;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>如果jackson-dataformat-xml.jar不可用，并且您仍希望获得XML响应，则只需在模型类（Message）上添加JAXB注释，即可启用XML输出支持。 以下是相同的演示</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span>
<span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span>
<span class="line"></span>
<span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"player"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span></span>&#123;</span>
<span class="line">         </span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>有了以上的准备，你可以通过下面的请求url来获取指定格式的响应：</p>
<h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a><br><a href="http://127.0.0.1:2223/hello/tom.json" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.json</a></p>
<h4 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a> 添加请求头 Accept:application/xml</p>
<p>或 </p>
<p><a href="http://127.0.0.1:2223/hello/tom.xml" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.xml</a></p>
<h3 id="ContentNegotiationStrategy"><a href="#ContentNegotiationStrategy" class="headerlink" title="ContentNegotiationStrategy"></a>ContentNegotiationStrategy</h3><p><code>ContentNegotiationStrategy</code>是一个策略接口，作用是将给定的请求解析为媒体类型（<code>MediaType</code>）列表。</p>
<p>它有两个重要的实现类，如下所示</p>
<h4 id="ServletPathExtensionContentNegotiationStrategy"><a href="#ServletPathExtensionContentNegotiationStrategy" class="headerlink" title="ServletPathExtensionContentNegotiationStrategy"></a>ServletPathExtensionContentNegotiationStrategy</h4><p>根据请求路径的扩展名来解析</p>
<h4 id="HeaderContentNegotiationStrategy"><a href="#HeaderContentNegotiationStrategy" class="headerlink" title="HeaderContentNegotiationStrategy"></a>HeaderContentNegotiationStrategy</h4><p>根据请求头<code>Accept</code>来解析</p>
<blockquote>
<p>Spring 在内部会根据请求的MediaType信息和HttpMessageConverter支持的MediaType进行匹配，如果能找到支持该请求的MediaType的HttpMessageConverter，则利用该HttpMessageConverter输出响应。</p>
</blockquote>
<h3 id="REST快速理解"><a href="#REST快速理解" class="headerlink" title="REST快速理解"></a>REST快速理解</h3><p>REST代表<code>Representational State Transfer</code>。它是一种可用于设计Web服务的架构风格，可从各种客户端使用。 其核心思想是，不使用诸如CORBA，RPC或SOAP之类的复杂机制来连接机器，而是使用简单的HTTP来进行调用。</p>
<p>在基于REST的设计中，对资源的操作是通过一组通用的动词来实现：</p>
<ul>
<li>创建资源：应该使用 HTTP POST</li>
<li>检索资源：应使用 HTTP GET</li>
<li>更新资源：应该使用 HTTP PUT</li>
<li>删除资源：应该使用 HTTP DELETE</li>
</ul>
<p>这意味着，作为REST服务开发人员或调用方，你应该遵守上述标准。</p>
<p>通常基于Rest的Web服务返回JSON或XML作为响应，尽管它不仅限于这些类型。 客户端可以指定（使用HTTP Accept头）他们感兴趣的资源类型，服务器可以返回资源，指定它正在服务的资源的Content-Type。 想要详细了解REST，这个<a href="https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming" target="_blank" rel="external">StackOverflow</a>是必须要阅读的。</p>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h3><p>以下是一个基于Rest的<code>Contrller</code>，实现了REST API。 </p>
<p>该<code>Contrller</code>是提供了如下的API：</p>
<ul>
<li>GET request to /api/user/ returns a list of users</li>
<li>GET request to /api/user/1 returns the user with ID 1</li>
<li>POST request to /api/user/ with a user object as JSON creates a new user</li>
<li>PUT request to /api/user/3 with a user object as JSON updates the user with ID 3</li>
<li>DELETE request to /api/user/4 deletes the user with ID 4</li>
<li>DELETE request to /api/user/ deletes all the users</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.service.UserService;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    UserService userService;  <span class="comment">//Service which will do all data retrieval/manipulation work</span></span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Retrieve All Users--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.GET)</span>
<span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; listAllUsers() &#123;</span>
<span class="line">        List&lt;User&gt; users = userService.findAllUsers();</span>
<span class="line">        <span class="keyword">if</span>(users.isEmpty())&#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.NO_CONTENT);<span class="comment">//You many decide to return HttpStatus.NOT_FOUND</span></span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">//-------------------Retrieve Single User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Fetching User with id "</span> + id);</span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Create a User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.POST)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">createUser</span><span class="params">(@RequestBody User user,    UriComponentsBuilder ucBuilder)</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Creating User "</span> + user.getName());</span>
<span class="line"> </span>
<span class="line">        <span class="keyword">if</span> (userService.isUserExist(user)) &#123;</span>
<span class="line">            System.out.println(<span class="string">"A User with name "</span> + user.getName() + <span class="string">" already exist"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.CONFLICT);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        userService.saveUser(user);</span>
<span class="line"> </span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        headers.setLocation(ucBuilder.path(<span class="string">"/user/&#123;id&#125;"</span>).buildAndExpand(user.getId()).toUri());</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(headers, HttpStatus.CREATED);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Update a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id, @RequestBody User user) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Updating User "</span> + id);</span>
<span class="line">         </span>
<span class="line">        User currentUser = userService.findById(id);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span> (currentUser==<span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        currentUser.setName(user.getName());</span>
<span class="line">        currentUser.setAge(user.getAge());</span>
<span class="line">        currentUser.setSalary(user.getSalary());</span>
<span class="line">         </span>
<span class="line">        userService.updateUser(currentUser);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(currentUser, HttpStatus.OK);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">//------------------- Delete a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Fetching &amp; Deleting User with id "</span> + id);</span>
<span class="line"> </span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span>
<span class="line">            System.out.println(<span class="string">"Unable to delete. User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        &#125;</span>
<span class="line"> </span>
<span class="line">        userService.deleteUserById(id);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Delete All Users --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Deleting All Users"</span>);</span>
<span class="line"> </span>
<span class="line">        userService.deleteAllUsers();</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><ul>
<li>@RestController：首先，我们使用Spring 4的新的<code>@RestController</code>注解。此注释避免我们在每个方法上添加<code>@ResponseBody``注解。在Spring-MVC内部下，</code>@RestController<code>本身是用</code>@ResponseBody<code>注解的，可以被认为是</code>@Controller<code>和</code>@ResponseBody`的组合。</li>
<li>@RequestBody：如果一个方法参数使用<code>@RequestBody</code>进行注解，那么Spring会将传入的HTTP请求主体（针对该方法的@RequestMapping中提到的URL）绑定到该参数。原理是Spring内部使用<code>HttpMessageConverter</code>将HTTP请求体转换为域对象[将请求主体反序列化为域对象]，这是基于请求中存在的<code>ACCEPT</code>或<code>Content-Type</code>头。</li>
<li>@ResponseBody：如果一个方法用@ResponseBody注解，Spring会将返回值绑定到传出的HTTP响应正文。在这样做的过程中，Spring将在内部使用<code>HttpMessageConverter</code>将返回值转换为HTTP响应主体[将对象序列化到响应主体]，并基于请求HTTP头中的Content-Type。如前所述，在Spring 4中，你可能会停止使用此注释。</li>
<li>ResponseEntity 它代表整个HTTP响应。好的一点是你可以控制任何进入它的东西。你可以指定状态码，标题和正文。它带有几个构造函数来携带您想要在HTTP响应中发送的信息。</li>
<li>@PathVariable：这个注解表示一个方法参数应该绑定到一个URI模板变量[‘}’]。基本上，<code>@RestController</code>，<code>@RequestBody</code>，<code>ResponseEntity</code>和<code>@PathVariable</code>是你在Spring 4中实现一个REST API所需要知道的。另外，spring提供了几个支持类来帮助你实现一些自定义的东西。</li>
<li>MediaType：使用<code>@RequestMapping</code>注释，你可以另外指定要通过特定控制器方法生成或使用的<code>MediaType</code>（使用生成或消费属性），以进一步缩小映射范围。</li>
</ul>
<h3 id="使用RestTemplate编写REST客户端"><a href="#使用RestTemplate编写REST客户端" class="headerlink" title="使用RestTemplate编写REST客户端"></a>使用RestTemplate编写REST客户端</h3><p>PostMan是一个很棒用来测试Rest API的客户端。 但是，如果你想要在应用程序中调用基于REST的Web服务，则需要为你的应用程序提供REST客户端。 最受欢迎的HTTP客户端之一是Apache HttpComponents HttpClient。 但是，该客户端提供的功能过于基础，需要自己编写大量符合REST风格的代码。</p>
<p>Spring提供的RestTemplate提供了更高级别的方法，这些方法对应于六种主要的HTTP方法中的每一种，这些方法使得调用许多RESTful服务只需一行代码，并成为实施REST的最佳实践。</p>
<p>下面显示了HTTP方法和相应的RestTemplate方法来处理这种类型的HTTP请求。</p>
<p>HTTP 方法和 RestTemplate 方法对应关系:</p>
<ul>
<li>HTTP GET : getForObject, getForEntity</li>
<li>HTTP PUT : put(String url, Object request, String…​urlVariables)</li>
<li>HTTP DELETE : delete</li>
<li>HTTP POST : postForLocation(String url, Object request, String…​ urlVariables), postForObject(String url, Object request, Class responseType, String…​ uriVariables)</li>
<li>HTTP HEAD : headForHeaders(String url, String…​ urlVariables)</li>
<li>HTTP OPTIONS : optionsForAllow(String url, String…​ urlVariables)</li>
<li>HTTP PATCH and others : exchange execute</li>
</ul>
<h4 id="自定义REST客户端，使用先前创建的REST服务"><a href="#自定义REST客户端，使用先前创建的REST服务" class="headerlink" title="自定义REST客户端，使用先前创建的REST服务"></a>自定义REST客户端，使用先前创建的REST服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span>
<span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span>
<span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRestTestClient</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_SERVICE_URI = <span class="string">"&lt;a class="</span>vglnk<span class="string">" href="</span>http:<span class="comment">//localhost:8080/Spring4MVCCRUDRestService" rel="nofollow"&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;/a&gt;";</span></span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllUsers</span><span class="params">()</span></span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing listAllUsers API-----------"</span>);</span>
<span class="line">         </span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        List&lt;LinkedHashMap&lt;String, Object&gt;&gt; usersMap = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/"</span>, List.class);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span>(usersMap!=<span class="keyword">null</span>)&#123;</span>
<span class="line">            <span class="keyword">for</span>(LinkedHashMap&lt;String, Object&gt; map : usersMap)&#123;</span>
<span class="line">                System.out.println(<span class="string">"User : id="</span>+map.get(<span class="string">"id"</span>)+<span class="string">", Name="</span>+map.get(<span class="string">"name"</span>)+<span class="string">", Age="</span>+map.get(<span class="string">"age"</span>)+<span class="string">", Salary="</span>+map.get(<span class="string">"salary"</span>));;</span>
<span class="line">            &#125;</span>
<span class="line">        &#125;<span class="keyword">else</span>&#123;</span>
<span class="line">            System.out.println(<span class="string">"No user exist----------"</span>);</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing getUser API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/1"</span>, User.class);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    &#125;</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* POST */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing create User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = <span class="keyword">new</span> User(<span class="number">0</span>,<span class="string">"Sarah"</span>,<span class="number">51</span>,<span class="number">134</span>);</span>
<span class="line">        URI uri = restTemplate.postForLocation(REST_SERVICE_URI+<span class="string">"/user/"</span>, user, User.class);</span>
<span class="line">        System.out.println(<span class="string">"Location : "</span>+uri.toASCIIString());</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* PUT */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing update User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user  = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"Tomy"</span>,<span class="number">33</span>, <span class="number">70000</span>);</span>
<span class="line">        restTemplate.put(REST_SERVICE_URI+<span class="string">"/user/1"</span>, user);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing delete User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/3"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Testing all delete Users API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/"</span>);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span>
<span class="line">        listAllUsers();</span>
<span class="line">        getUser();</span>
<span class="line">        createUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        updateUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteAllUsers();</span>
<span class="line">        listAllUsers();</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">Testing getUser API----------</span>
<span class="line">User [id=1, name=Sam, age=30, salary=70000.0]</span>
<span class="line">Testing create User API----------</span>
<span class="line">Location : &lt;a class=&quot;vglnk&quot; href=&quot;http://localhost:8080/Spring4MVCCRUDRestService/user/5&quot; rel=&quot;nofollow&quot;&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing update User API----------</span>
<span class="line">User [id=1, name=Tomy, age=33, salary=70000.0]</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing delete User API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing all delete Users API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">No user exist----------</span>
</pre></td></tr></table></figure>
<h3 id="REST-API-添加-CORS-支持"><a href="#REST-API-添加-CORS-支持" class="headerlink" title="REST API 添加 CORS 支持"></a>REST API 添加 CORS 支持</h3><p>在访问REST API时，您可能会面临有关同源策略的问题。</p>
<p>可能的错误如下：</p>
<ul>
<li>“no” Access-Control-Allow-Origin“标题出现在请求的资源上。 原因’<a href="http://127.0.0.1:8080&#39;因此不被允许访问。“或" target="_blank" rel="external">http://127.0.0.1:8080&#39;因此不被允许访问。“或</a></li>
<li>“XMLHttpRequest无法加载<code>http://abc.com/bla</code>。 原始<code>http：// localhost：12345</code>不被Access-Control-Allow-Origin允许。“在这种情况下很常见。</li>
</ul>
<p>解决方案是Cross-Origin Resource Sharing(跨源资源共享)。 基本上，在服务器端，我们可以返回额外的CORS访问控制头和响应，这最终将允许进一步的域间通信。</p>
<p>在Spring中，我们可以编写一个简单的过滤器，在每个响应中添加这些CORS特定的响应头信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"><span class="meta">@WebFilter</span> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span>
<span class="line">        System.out.println(<span class="string">"Filtering on..........................................................."</span>);</span>
<span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, PUT, OPTIONS, DELETE"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with"</span>);</span>
<span class="line">        chain.doFilter(req, res);</span>
<span class="line">    &#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;&#125;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span>
<span class="line"> </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://websystique.com/springmvc/spring-mvc-4-restful-web-services-crud-example-resttemplate/" target="_blank" rel="external">spring-mvc-4-restful-web-services-crud-example-resttemplate</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 &lt;code&gt;@RestController&lt;/code&gt;注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。&lt;/p&gt;
&lt;p&gt;Spring在内部使用&lt;code&gt;HttpMessageConverters&lt;/code&gt;将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中的&lt;code&gt;Accept Headers&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了服务JSON，我们将使用Jackson库[jackson-databind.jar]。 对于XML，我们将使用Jackson XML扩展[jackson-dataformat-xml.jar]。 只有在类路径中存在这些库才会触发Spring以所需格式转换输出。 此外，我们将进一步通过使用JAXB批注注释域类来支持XML，以防Jackson的XML扩展库由于某种原因而不可用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：如果你通过在浏览器中输入网址发送请求，则可以添加后缀[.xml / .json]，以帮助确定要提供的内容的类型。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring对缓存的支持及相关注解说明</title>
    <link href="https://leokongwq.github.io/2018/05/12/spring-cache.html"/>
    <id>https://leokongwq.github.io/2018/05/12/spring-cache.html</id>
    <published>2018-05-12T13:54:44.000Z</published>
    <updated>2018-05-12T15:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 3.1 引入了基于注释（annotation）的缓存（cache）技术，但是它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种annotation，即能够达到缓存方法的返回对象的效果。</p>
<p>Spring 的缓存技术还具备相当的灵活性，不仅能够使用 <code>SpEL（Spring Expression Language）</code>来定义缓存的 <code>key</code>和各种<code>condition</code>，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如<code>EHCache</code>集成。</p>
<a id="more"></a>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>先从一个例子来直观感受一下spring Cache 如何使用。</p>
<h4 id="相关类"><a href="#相关类" class="headerlink" title="相关类"></a>相关类</h4><figure class="highlight java"><figcaption><span>Product</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span>
<span class="line">    <span class="keyword">private</span> Long id;</span>
<span class="line">    <span class="keyword">private</span> String name;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>ProductDao</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt; </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Long id)</span></span>;</span>
<span class="line"></span>
<span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>ProductService</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Resource</span></span>
<span class="line">    <span class="keyword">private</span> ProductDao productDao;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Cacheable</span>(cacheNames = &#123;<span class="string">"products"</span>&#125;, key = <span class="string">"#id"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProductById</span><span class="params">(Long id)</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> productDao.findById(id);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>方法<code>getProductById</code>上加了注解<code>@Cacheable</code>，表示该方法的返回值是可以被缓存的。</p>
<p>属性<code>cacheNames</code>或<code>value</code>作用相同，都是用来指定返回结果保存到哪个缓存中的，属性<code>key</code>用来指定缓存结果对应的<code>key</code>(缓存通常都是key-value结构）。在改例中，key是由参数<code>id</code>进行计算的。</p>
<h3 id="Cacheable-详解"><a href="#Cacheable-详解" class="headerlink" title="Cacheable 详解"></a>Cacheable 详解</h3><p><code>@Cacheable</code>注解是Spring Cache中最重要的注解，它的配置属性如下：</p>
<h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p>指定方法返回结果保存到的缓存名称。作用和<code>cacheNames</code>相同。支持<code>数组</code>配置</p>
<h4 id="cacheNames"><a href="#cacheNames" class="headerlink" title="cacheNames"></a>cacheNames</h4><p>参考<code>value</code>属性解释</p>
<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>属性<code>key</code>的类型是字符串，格式为<code>SpEL</code>表达式，用来动态计算缓存结果的<code>键</code>值。默认值为空，意味着所有的方法参数都会参与计算。</p>
<h4 id="keyGenerator"><a href="#keyGenerator" class="headerlink" title="keyGenerator"></a>keyGenerator</h4><p>该属性指定自定义<code>KeyGenerator</code>的Bean的名称。默认值为空，意味着使用<code>SimpleKeyGenerator</code></p>
<h4 id="cacheManager"><a href="#cacheManager" class="headerlink" title="cacheManager"></a>cacheManager</h4><p>类型为：<code>org.springframework.cache.CacheManager</code> 的bean的名称。该bean需要我们在spring配置文件中配置。在SpringBoot中，如果检测到有对应的缓存框架，则会自动配置一个名称为<code>cacheManager</code>的bean。</p>
<h4 id="cacheResolver"><a href="#cacheResolver" class="headerlink" title="cacheResolver"></a>cacheResolver</h4><p>类型为：<code>org.springframework.cache.interceptor.CacheResolver</code> 的bean的名称。</p>
<h4 id="condition"><a href="#condition" class="headerlink" title="condition"></a>condition</h4><p>类型为字符串，结果是SpEL表达式，指定缓存的条件。默认值为空字符串，意味着方法的返回值总是被缓存。</p>
<h4 id="unless"><a href="#unless" class="headerlink" title="unless"></a>unless</h4><p>类型为字符串，结果是SpEL表达式，和<code>condition</code>不同的是，该表示式是在方法调用会进行计算的，用来否决方法的缓存。默认是空字符串，意味着从来不否决缓存结果。</p>
<h4 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h4><p>类型是boolean，4.3版本开始支持。表示在多个线程同时<code>加载</code>同一个缓存key对应的资源时，是否进行同步。默认值为false。</p>
<p>如果设置为true, 则能避免重复加载。该属性的功能能否起作用取决于如下条件：</p>
<ol>
<li>不支持unless </li>
<li>只能指定一个缓存（cacheName取值唯一）</li>
<li>不能和其它缓存相关的操作进行组合</li>
</ol>
<h3 id="缓存key的计算规则"><a href="#缓存key的计算规则" class="headerlink" title="缓存key的计算规则"></a>缓存key的计算规则</h3><p>上面提到缓存<code>key</code>的格式为SpEL表达式。默认的计算规则如下：</p>
<ul>
<li>如果方法没有参数，则返回0</li>
<li>如果方法只有一个参数，则返回该参数。</li>
<li>如果方法有多余一个参数，则key的值由所有参数的hashcode计算而来。具体可以参考<code>SimpleKeyGenerator</code></li>
</ul>
<h3 id="KeyGenerator"><a href="#KeyGenerator" class="headerlink" title="KeyGenerator"></a>KeyGenerator</h3><p><code>KeyGenerator</code> 接口用来计算方法返回值对应的缓存键的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KeyGenerator</span> </span>&#123;</span>
<span class="line">    <span class="function">Object <span class="title">generate</span><span class="params">(Object target, Method method, Object... params)</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>spring默认提供了两个实现类：<code>DefaultKeyGenerator</code>（4.0版本开始不推荐使用） 和 <code>SimpleKeyGenerator</code>（默认使用）。</p>
<p>我们可以通过实现该接口自定义实现。</p>
<h3 id="key-SpEL-举例"><a href="#key-SpEL-举例" class="headerlink" title="key SpEL 举例"></a>key SpEL 举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"books"</span>, key=<span class="string">"#isbn"</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">@<span class="title">Cacheable</span><span class="params">(value=<span class="string">"books"</span>, key=<span class="string">"#isbn.rawNumber"</span>)</span></span>
<span class="line"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">@<span class="title">Cacheable</span><span class="params">(value=<span class="string">"books"</span>, key=<span class="string">"T(someType).hash(#isbn)"</span>)</span></span>
<span class="line"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn, <span class="keyword">boolean</span> checkWarehouse, <span class="keyword">boolean</span> includeUsed)</span></span></span>
</pre></td></tr></table></figure>
<p>SpEL语法可以参考：<a href="https://docs.spring.io/spring/docs/3.1.x/spring-framework-reference/html/expressions.html" target="_blank" rel="external">Chapter 7, Spring Expression Language (SpEL)</a></p>
<h3 id="条件缓存"><a href="#条件缓存" class="headerlink" title="条件缓存"></a>条件缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"book"</span>, condition=<span class="string">"#name.length &lt; 32"</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(String name)</span></span></span>
</pre></td></tr></table></figure>
<h3 id="SpEL计算上下文"><a href="#SpEL计算上下文" class="headerlink" title="SpEL计算上下文"></a>SpEL计算上下文</h3><img src="/2018/05/12/spring-cache/SpEL-contect.jpg" alt="SpEL-contect.jpg" title="">
<h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><p>如果缓存需要更新，且不干扰方法的执行,可以使用注解<code>@CachePut</code>。<code>@CachePut</code>标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut</span>(cacheNames=<span class="string">"book"</span>, key=<span class="string">"#isbn"</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">updateBook</span><span class="params">(ISBN isbn, BookDescriptor descriptor)</span></span></span>
</pre></td></tr></table></figure>
<p><strong>注意</strong>：应该避免@CachePut 和 @Cacheable同时使用的情况。</p>
<h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><p>spring cache不仅支持将数据缓存，还支持将缓存数据删除。此过程经常用于从缓存中清除过期或未使用的数据。<br><code>@CacheEvict</code>要求指定一个或多个缓存，使之都受影响。此外，还提供了一个额外的参数<code>allEntries</code> 。表示是否需要清除缓存中的所有元素。默认为<code>false</code>，表示不需要。当指定了<code>allEntries</code>为<code>true</code>时，Spring Cache将忽略指定的key。有的时候我们需要Cache一下清除所有的元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(cacheNames=<span class="string">"books"</span>, allEntries=<span class="keyword">true</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBooks</span><span class="params">(InputStream batch)</span></span></span>
</pre></td></tr></table></figure>
<p>清除操作默认是在对应<strong>方法成功执行之后</strong>触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用<code>beforeInvocation</code>可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(cacheNames=<span class="string">"books"</span>, beforeInvocation=<span class="keyword">true</span>)</span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBooks</span><span class="params">(InputStream batch)</span></span></span>
</pre></td></tr></table></figure>
<h3 id="CacheConfig"><a href="#CacheConfig" class="headerlink" title="@CacheConfig"></a>@CacheConfig</h3><p>有时候一个类中可能会有多个缓存操作，而这些缓存操作可能是重复的。这个时候可以使用@CacheConfig</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(<span class="string">"books"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Cacheable</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">findBook</span><span class="params">(ISBN isbn)</span> </span>&#123;...&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>@CacheConfig</code>是一个类级别的注解，允许共享缓存的名称、KeyGenerator、CacheManager 和CacheResolver。<br>该操作会被覆盖。</p>
<h3 id="开启缓存注解"><a href="#开启缓存注解" class="headerlink" title="开启缓存注解"></a>开启缓存注解</h3><p>java类配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@EnableCaching</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>XML 配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span>
<span class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span>
<span class="line">    <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span>
<span class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span>
<span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
<span class="line">        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span></span>
<span class="line"></span>
<span class="line">        <span class="tag">&lt;<span class="name">cache:annotation-driven</span> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span>
</pre></td></tr></table></figure>
<h3 id="配置CacheManager"><a href="#配置CacheManager" class="headerlink" title="配置CacheManager"></a>配置CacheManager</h3><p>CacheManager是Spring定义的一个用来管理Cache的接口。Spring自身已经为我们提供了两种CacheManager的实现，一种是基于Java API的ConcurrentMap，另一种是基于第三方Cache实现——Ehcache，如果我们需要使用其它类型的缓存时，我们可以自己来实现Spring的CacheManager接口或AbstractCacheManager抽象类。下面分别来看看Spring已经为我们实现好了的两种CacheManager的配置示例。</p>
<h4 id="基于ConcurrentMap的配置"><a href="#基于ConcurrentMap的配置" class="headerlink" title="基于ConcurrentMap的配置"></a>基于ConcurrentMap的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
</pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.support.SimpleCacheManager"</span>&gt;</span></span>
<span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caches"</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span>
<span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"</span>    <span class="attr">p:name</span>=<span class="string">"xxx"</span>/&gt;</span></span>
<span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span>
<span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span>
<span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span>
<span class="line">```  </span>
<span class="line"></span>
<span class="line">上面的配置使用的是一个SimpleCacheManager，其中包含一个名为“xxx”的ConcurrentMapCache。</span>
<span class="line"></span>
<span class="line">#### 基于Ehcache的配置</span>
<span class="line"> </span>
<span class="line"> ```xml</span>
<span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span> <span class="attr">p:cache-manager-ref</span>=<span class="string">"ehcacheManager"</span>/&gt;</span></span>
<span class="line"></span>
<span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehcacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span> <span class="attr">p:config-location</span>=<span class="string">"ehcache-spring.xml"</span>/&gt;</span></span>
</pre></td></tr></table></figure>
<p>上面的配置使用了一个Spring提供的EhCacheCacheManager来生成一个Spring的CacheManager，其接收一个Ehcache的CacheManager，因为真正用来存入缓存数据的还是Ehcache。Ehcache的CacheManager是通过Spring提供的EhCacheManagerFactoryBean来生成的，其可以通过指定ehcache的配置文件位置来生成一个Ehcache的CacheManager。若未指定则将按照Ehcache的默认规则取classpath根路径下的ehcache.xml文件，若该文件也不存在，则获取Ehcache对应jar包中的ehcache-failsafe.xml文件作为配置文件。更多关于Ehcache的内容这里就不多说了，它不属于本文讨论的内容，欲了解更多关于Ehcache的内容可以参考我之前发布的Ehcache系列文章，也可以参考官方文档等。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>通过少量的配置 annotation 注释即可使得既有代码支持缓存</li>
<li>支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存</li>
<li>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition</li>
<li>支持 AspectJ，并通过其实现任何方法的缓存支持</li>
<li>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性</li>
</ul>
<h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 3.1 引入了基于注释（annotation）的缓存（cache）技术，但是它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种annotation，即能够达到缓存方法的返回对象的效果。&lt;/p&gt;
&lt;p&gt;Spring 的缓存技术还具备相当的灵活性，不仅能够使用 &lt;code&gt;SpEL（Spring Expression Language）&lt;/code&gt;来定义缓存的 &lt;code&gt;key&lt;/code&gt;和各种&lt;code&gt;condition&lt;/code&gt;，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如&lt;code&gt;EHCache&lt;/code&gt;集成。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>linux系统如何启动</title>
    <link href="https://leokongwq.github.io/2018/03/23/computer-booting-linux.html"/>
    <id>https://leokongwq.github.io/2018/03/23/computer-booting-linux.html</id>
    <published>2018-03-23T09:14:27.000Z</published>
    <updated>2018-05-13T15:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="intel-CPU发展历史简介"><a href="#intel-CPU发展历史简介" class="headerlink" title="intel CPU发展历史简介"></a>intel CPU发展历史简介</h3><ul>
<li>1971年，Intel 发布了第一款的微处理器4004。它是一个<code>4位</code>的微处理器。</li>
<li>1972年，Intel 发布了第一款八位处理器8008。它是一个<code>8位</code>的微处理器，地址总线(address bus)是<code>14位</code>的，就是说可以访问到<code>16K</code>的内存空间。</li>
<li>1974年4月，Intel 发布了第二款八位处理器<code>8080</code>。它是8008是增强版，增加了几个累加器，使它可以访问<code>16位</code>(8+8)的内存地址，即<code>64K</code>范围内的地址空间。而且它也是公认的“第一款真正可用的微处理器”。8080的架构对8086产生了很大的影响，并且为 x86系列奠定了基础。</li>
<li>1976年开始设计，1978年中旬Intel 发布了8086。标志了x86王朝的开始。它是一款<code>16位</code>的微处理器，却被设计成可以访问<code>1MB</code>的内存（即<code>20位</code>的地址空间）</li>
<li>1982年，Intel 的80286面世了。它是第一款采用保护模式的x86微处理器。地址总线增加到<code>24</code>位使它可以访问到16M 的内存空间。</li>
<li>1985年，Intel 发布了80386。一个拥有32位的微处理器。并且地址总数(address bus)也是32位的，寻址能力大幅提高到4G。</li>
</ul>
<a id="more"></a>
<h3 id="内存寻址和管理"><a href="#内存寻址和管理" class="headerlink" title="内存寻址和管理"></a>内存寻址和管理</h3><p>所谓寻址就是CPU查找数据或待执行指令位置的过程。</p>
<p>在8080及以前的CPU中，内存寻址访问是绝对地址。就是<code>指令的地址即物理地址</code>，中间没有任何的转换。</p>
<p>8086中，地址总线为20位，也就是说寻址空间为1M。 但是CPU中“算术逻辑运算单元（ALU）”的宽度，即数据总线却只有16位，也就是可直接加以运算的指针长度是16位的。如何填补这个空隙呢？可能的解决方案有多种，例如，可以像一些8位CPU中那样，增设一些20位的指令专用于地址运算和操作，但是那样又会造成CPU内存结构的不均匀。又例如，当时的PDP－11小型机也是16位的，但是其内存管理单元（MMU）可以将16位的地址映射到24位的地址空间。受此启发，Intel设计了一种在当时看来不失为巧妙的方法，即分段的方法。</p>
<p>为了支持分段，Intel在8086 CPU中设置了四个段寄存器：CS、DS、SS和ES，分别用于可执行代码段、数据段、堆栈段及其它段。每个段寄存器都是<code>16</code>位的，对应于地址总线中的<code>高16位</code>。每条<code>访内</code>指令中的内部地址也都是<code>16位</code>的，但是在送上地址总线之前，CPU内部自动地把它与<code>某个段寄存器</code>中的内容相加。因为段寄存器中的内容对应于20位地址总线中的高16位(也就是把段寄存器左移4位)，所以相加时实际上是内存总线中的高12位与段寄存器中的16位相加，而低4位保留不变，这样就形成一个20位的实际地址，也就实现了从16位内存地址到20位实际地址的转换，或者叫“映射”。</p>
<p>这种寻址方式也就是所谓的<code>实模式</code>。</p>
<p>但在这种机制下，由段寄存器确定一个<code>基地址</code>，一个进程总是可以访问由此开始连续的64K字节地址空间，且<code>无法加以限制</code>。进一步，通过改变<code>段寄存器CS</code>的内容，这个进程可以随心所欲的访问内存中的任何一个单元，因此根本谈不上对系统和其它进程的保护。这就是<code>实模式</code>的最大缺点。也是后面引入<code>保护模式</code>的根本原因。</p>
<p>80286的地址总线增加到24位使它可以访问到16M的内存空间。即使是可访的地址空间增加了，但它的分段大小依然是64K（因为段偏移量的大小为16位）。</p>
<p>386是32位的CPU，数据、地址总线都是32位，因此寻址空间为4G。80386中对内存的管理有两种，一个是段式内存管理，一个是页式内存管理。</p>
<p>由于Intel是在16位CPU基础上涉及32位CPU的，因此在32位处理器中，它继承了段寄存器。由于寻址空间的增大，16位的段寄存器已不能够提供基地址了()。这样就引入了一个数据结构来描述关于段的一些信息（即<code>段描述符</code>）。当一个访存指令发出一个内存地址时，CPU按照下面过程实现从指令中的32位逻辑地址到32位物理地址的转换：</p>
<ol>
<li>首先根据指令的性质来确定该使用哪一个段寄存器。</li>
<li>根据段寄存器的内容，找到相应的<code>段描述结构</code>。</li>
<li>从<code>段描述结构</code>中得到<code>基地址</code>。</li>
<li>将指令中的地址作为位移，与段描述结构中规定的段长度相比，看是否越界；(基地址 + 偏移 是否大于规定的段长度)</li>
<li>根据指令的性质和段描述符中的访问权限来确定是否越权；</li>
<li>最后才将指令中的地址作为位移，与段基地址相加，得到物理地址。</li>
</ol>
<p>同时，在上面过程中，由于有对访问权限的检查，就实现了保护。</p>
<p>面提到的“段描述结构”实际就是段描述符。80386中有<code>两个寄存器</code>，分别是全局的段描述表寄存器(<code>GDTR</code>)和局部的段描述表寄存器(<code>LDTR</code>)，用来指向存储在内存中的某个段描述表。原段寄存器(指的是CS,DS,SS等寄存器)中的<code>高13位</code>指明某个段描述符在段描述表中的偏移，这个偏移加上GDTR（或LDTR）中段描述表的基地址，就得到段描述符的地址。最后从段描述子中得到段的32位基地址和长度以及其它的一些信息（这些信息包括关于越界和权限检查）。</p>
<p>段式内存管理只是386保护模式的一个部分，由于其效率的问题以及段是可变长度的，又发展出了页式内存管理。386处理器中有一个寄存器<code>CR0</code>，如果它的<code>PG</code>位为1，就打开了页式内存管理。</p>
<p>页式内存管理是在由段式内存管理形成的地址上再加上一层地址映射。此时由段式管理形成的地址就不再是物理地址了，而是“线性地址”。段式内存管理先把“逻辑地址”映射为“线性地址”，再由页式内存管理把“线性地址”映射为“物理地址”；当不使用页式内存管理时，“线性地址”就直接用作“物理地址”。</p>
<p>80386把内存分为4K的页面，每一个页面被映射到物理内存中任一块4K字节大小的空间（边界必须与4K字节对齐）。需要注意的是，在段式管理中，连续的逻辑地址经映射后在线性空间还是连续的，但连续的线性地址经映射后在物理空间却不一定连续。</p>
<p>页式内存管理中，32位的线性地址划分为三个部分：10位的页目录表下标、10位的页面表下标、12位的页内地址偏移(2的12次方字节刚好是4KB)。CPU增加了一个<code>CR3</code>寄存器存放指向当前页目录表的指针。寻址方式就改为：</p>
<ol>
<li>从<code>CR3</code>取得页目录表的基地址；</li>
<li>根据10位页目录表下标和1中得到的基地址，取得相应页面表的基地址；</li>
<li>根据10位页面表下标和2中得到的基地址，从页面表中取得相应的页面描述项；</li>
<li>将页面描述项中的页面基地址和线性地址中的12位页内偏移地址偏移相加，得到物理地址。</li>
</ol>
<p>同时，在地址转换的过程中也有越界和权限的检查，就不赘述了。</p>
<p>还有一个特例，就是所谓的<code>Flat（平坦）地址模式</code>，Linux内核就是采用这种模式的。它是在段式内存管理的基础上，如果每个段寄存器都指向同一个段描述子，而此段描述子中把段的基地址设为0，长度设为最大（4G），这样就形成了一个覆盖整个地址空间的巨大段。此时逻辑地址就和物理地址相同。形象的看，这样的地址就没有层次结构（段:偏移）了，所以叫做平坦模式，它是段式管理的特例。</p>
<h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><ol>
<li>80x86 系列CPU可以运行在16位<code>实模式</code>和32<code>保护模式下</code></li>
<li>80x86 系列CPU在加电时自动进入<code>实模式</code>，并且将代码段寄存器<code>CS</code>的值设为<code>0xFFFF</code>， 指令指针寄存器<code>IP</code>的值设置为<code>0x0000</code>。</li>
<li><code>实模式</code>下<code>IP</code>是16位的，并且地址是绝对地址。保护模式下，<code>EIP</code>的值是32位，并且地址是线下地址。</li>
<li>实模式下地址的计算是通过：<code>段地址 * 16 + 段偏移量</code>。 （都是从0开始计算）</li>
<li>实模式下的寻址空间为1M，也就是从 0x00000 - 0xFFFFF </li>
</ol>
<h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><ol>
<li>开解接通电源后，北桥芯片会向CPU发出一个<code>Reset</code>信号，让CPU复位初始化。<code>CS</code>寄存器和<code>IP</code>寄存器的值被分别设置为<code>0xFFFF</code>和<code>0x0000</code>。电源开始稳定供电后，芯片组便撤去<code>Reset</code>信号。CPU马上开始从绝对地址：<code>0xFFFF0</code>处开始执行。该地址其实是1M地址空间的最后16个字节处，并且就是BIOS程序所在的地址空间，放在这里的一般是一个跳转指令，跳到系统BIOS的真正开始代码处。</li>
</ol>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://my.oschina.net/wuying/blog/53419" target="_blank" rel="external">理解“统一编址与独立编址、I/O端口与I/O内存”</a><br><a href="http://www.eefocus.com/mcu-dsp/400488/r0" target="_blank" rel="external">处理器系列之寻址空间详解</a><br><a href="http://memorymyann.iteye.com/blog/188764" target="_blank" rel="external">intel80X86的实地址模式和保护模式</a><br><a href="http://www.cnblogs.com/driftsand/archive/2013/02/16/2913743.html" target="_blank" rel="external">计算机的内存分配</a><br><a href="https://blog.csdn.net/acmilanvanbasten/article/details/38852153" target="_blank" rel="external">BIOS 工作流程解析</a><br><a href="https://blog.csdn.net/liuyez123/article/details/51096914" target="_blank" rel="external">X86/X64处理器体系结构及寻址模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h2&gt;&lt;h3 id=&quot;intel-CPU发展历史简介&quot;&gt;&lt;a href=&quot;#intel-CPU发展历史简介&quot; class=&quot;headerlink&quot; title=&quot;intel CPU发展历史简介&quot;&gt;&lt;/a&gt;intel CPU发展历史简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1971年，Intel 发布了第一款的微处理器4004。它是一个&lt;code&gt;4位&lt;/code&gt;的微处理器。&lt;/li&gt;
&lt;li&gt;1972年，Intel 发布了第一款八位处理器8008。它是一个&lt;code&gt;8位&lt;/code&gt;的微处理器，地址总线(address bus)是&lt;code&gt;14位&lt;/code&gt;的，就是说可以访问到&lt;code&gt;16K&lt;/code&gt;的内存空间。&lt;/li&gt;
&lt;li&gt;1974年4月，Intel 发布了第二款八位处理器&lt;code&gt;8080&lt;/code&gt;。它是8008是增强版，增加了几个累加器，使它可以访问&lt;code&gt;16位&lt;/code&gt;(8+8)的内存地址，即&lt;code&gt;64K&lt;/code&gt;范围内的地址空间。而且它也是公认的“第一款真正可用的微处理器”。8080的架构对8086产生了很大的影响，并且为 x86系列奠定了基础。&lt;/li&gt;
&lt;li&gt;1976年开始设计，1978年中旬Intel 发布了8086。标志了x86王朝的开始。它是一款&lt;code&gt;16位&lt;/code&gt;的微处理器，却被设计成可以访问&lt;code&gt;1MB&lt;/code&gt;的内存（即&lt;code&gt;20位&lt;/code&gt;的地址空间）&lt;/li&gt;
&lt;li&gt;1982年，Intel 的80286面世了。它是第一款采用保护模式的x86微处理器。地址总线增加到&lt;code&gt;24&lt;/code&gt;位使它可以访问到16M 的内存空间。&lt;/li&gt;
&lt;li&gt;1985年，Intel 发布了80386。一个拥有32位的微处理器。并且地址总数(address bus)也是32位的，寻址能力大幅提高到4G。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://leokongwq.github.io/tags/linux/"/>
    
      <category term="computer" scheme="https://leokongwq.github.io/tags/computer/"/>
    
  </entry>
  
  <entry>
    <title>计算机是如何启动的</title>
    <link href="https://leokongwq.github.io/2018/03/21/computer-booting.html"/>
    <id>https://leokongwq.github.io/2018/03/21/computer-booting.html</id>
    <published>2018-03-21T06:28:17.000Z</published>
    <updated>2018-03-21T07:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="external">计算机是如何启动的？</a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近在学习<code>Linux内核完全剖析0.12</code>。前两章提到了计算机操作系统是如何加载的。因此想要复习下计算机的整个启动过程。在找相关资料的过程中发现了<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰前辈</a>写的文章。转载一下。</p>
<a id="more"></a>
<p>从打开电源到开始操作，计算机的启动是一个非常复杂的过程。</p>
<p>我一直搞不清楚，这个过程到底是怎么回事，只看见屏幕快速滚动各种提示…… 这几天，我查了一些资料，试图搞懂它。下面就是我整理的笔记。</p>
<h2 id="boot的含义"><a href="#boot的含义" class="headerlink" title="boot的含义"></a>boot的含义</h2><p>先问一个问题，”启动”用英语怎么说？</p>
<p>回答是<code>boot</code>。可是，<code>boot</code>原来的意思是靴子，”启动”与靴子有什么关系呢？ 原来，这里的boot是bootstrap（鞋带）的缩写，它来自一句谚语：</p>
<blockquote>
<p>“pull oneself up by one’s bootstraps”</p>
</blockquote>
<p>字面意思是”拽着鞋带把自己拉起来”，这当然是不可能的事情。最早的时候，工程师们用它来比喻，计算机启动是一个很矛盾的过程：必须先运行程序，然后计算机才能启动，但是计算机不启动就无法运行程序！</p>
<p>早期真的是这样，必须想尽各种办法，把一小段程序装进内存，然后计算机才能正常运行。所以，工程师们把这个过程叫做”拉鞋带”，久而久之就简称为boot了。</p>
<p>计算机的整个启动过程分成四个阶段。</p>
<h3 id="第一阶段：BIOS"><a href="#第一阶段：BIOS" class="headerlink" title="第一阶段：BIOS"></a>第一阶段：BIOS</h3><p>上个世纪70年代初，”只读内存”（read-only memory，缩写为ROM）发明，开机程序被刷入ROM芯片，计算机通电后，第一件事就是读取它。</p>
<img src="/2018/03/21/computer-booting/bg2013021502.jpg" alt="bg2013021502.jpg" title="">
<p>这块芯片里的程序叫做”基本輸出輸入系統”（Basic Input/Output System），简称为<a href="http://en.wikipedia.org/wiki/BIOS" target="_blank" rel="external">BIOS</a>。</p>
<h4 id="硬件自检"><a href="#硬件自检" class="headerlink" title="硬件自检"></a>硬件自检</h4><p>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做<code>硬件自检</code>（Power-On Self-Test），缩写为POST。</p>
<p>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</p>
<img src="/2018/03/21/computer-booting/bg2013021503.png" alt="bg2013021503.png" title="">
<h4 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h4><p>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</p>
<p>这时，BIOS需要知道，”下一阶段的启动程序”具体存放在哪一个设备。也就是说，BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做<code>启动顺序</code>（Boot Sequence）。</p>
<p>打开BIOS的操作界面，里面有一项就是”设定启动顺序”。</p>
<img src="/2018/03/21/computer-booting/bg2013021504.jpg" alt="bg2013021504.jpg" title="">
<h3 id="第二阶段：主引导记录"><a href="#第二阶段：主引导记录" class="headerlink" title="第二阶段：主引导记录"></a>第二阶段：主引导记录</h3><p>BIOS按照”启动顺序”，把控制权转交给排在第一位的储存设备。</p>
<p>这时，计算机读取该设备的<code>第一个扇区</code>，也就是读取最前面的<code>512</code>个字节。如果这512个字节的最后两个字节是<code>0x55</code>和<code>0xAA</code>，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。</p>
<p>这最前面的512个字节，就叫做<code>主引导记录</code>（Master boot record，缩写为MBR）。</p>
<h4 id="主引导记录的结构"><a href="#主引导记录的结构" class="headerlink" title="主引导记录的结构"></a>主引导记录的结构</h4><p>“主引导记录”只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</p>
<p>主引导记录由三个部分组成：</p>
<ul>
<li>第1-446字节：调用操作系统的机器码。</li>
<li>第447-510字节：分区表（Partition table）。</li>
<li>第511-512字节：主引导记录签名（0x55和0xAA）。</li>
</ul>
<p>其中，第二部分”分区表”的作用，是将硬盘分成若干个区。</p>
<h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><p>硬盘分区有很多好处。考虑到每个区可以安装不同的操作系统，”主引导记录” 因此必须知道将控制权转交给哪个区。</p>
<p>分区表的长度只有<code>64</code>个字节，里面又分成<code>四项</code>，每项<code>16</code>个字节。所以，一个硬盘最多只能分四个一级分区，又叫做<code>主分区</code>。</p>
<p>每个主分区的16个字节，由6个部分组成：</p>
<ul>
<li>第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面<code>只能有一个</code>是激活的。</li>
<li>第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</li>
<li>第5个字节：主分区类型。</li>
<li>第6-8个字节：主分区最后一个扇区的物理位置。</li>
<li>第9-12字节：该主分区第一个扇区的逻辑地址。</li>
<li>第13-16字节：主分区的扇区总数。</li>
</ul>
<p>最后的四个字节（”主分区的扇区总数”），决定了这个主分区的长度。也就是说，一个主分区的扇区总数最多不超过2的32次方。</p>
<p>如果每个扇区为512个字节，就意味着单个分区最大不超过2TB。再考虑到扇区的逻辑地址也是32位，所以单个硬盘可利用的空间最大也不超过2TB。如果想使用更大的硬盘，只有2个方法：一是提高每个扇区的字节数，二是增加扇区总数。</p>
<h3 id="第三阶段：硬盘启动"><a href="#第三阶段：硬盘启动" class="headerlink" title="第三阶段：硬盘启动"></a>第三阶段：硬盘启动</h3><p>这时，计算机的控制权就要转交给硬盘的某个分区了，这里又分成三种情况。</p>
<h4 id="情况A：卷引导记录"><a href="#情况A：卷引导记录" class="headerlink" title="情况A：卷引导记录"></a>情况A：卷引导记录</h4><p>上一节提到，四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做<a href="http://en.wikipedia.org/wiki/Volume_Boot_Record" target="_blank" rel="external"><code>卷引导记录</code></a>（Volume boot record，缩写为<code>VBR</code>）。</p>
<p>“卷引导记录”的主要作用是，告诉计算机，操作系统在这个分区里的位置。然后，计算机就会加载操作系统了。</p>
<h4 id="情况B：扩展分区和逻辑分区"><a href="#情况B：扩展分区和逻辑分区" class="headerlink" title="情况B：扩展分区和逻辑分区"></a>情况B：扩展分区和逻辑分区</h4><p>随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成<code>扩展分区</code>（Extended partition）。</p>
<p>所谓<code>扩展分区</code>，就是指这个区里面又分成多个区。这种分区里面的分区，就叫做<code>逻辑分区</code>（logical partition）。</p>
<p>计算机先读取扩展分区的第一个扇区，叫做<a href="http://en.wikipedia.org/wiki/Extended_partition" target="_blank" rel="external">扩展引导记录</a>（Extended boot record，缩写为EBR）。它里面也包含一张64字节的分区表，但是最多只有两项（也就是两个逻辑分区）。</p>
<p>计算机接着读取第二个逻辑分区的第一个扇区，再从里面的分区表中找到第三个逻辑分区的位置，以此类推，直到某个逻辑分区的分区表只包含它自身为止（即只有一个分区项）。因此，扩展分区可以包含无数个逻辑分区。</p>
<p>但是，似乎很少通过这种方式启动操作系统。如果操作系统确实安装在扩展分区，一般采用下一种方式启动。</p>
<h4 id="情况C：启动管理器"><a href="#情况C：启动管理器" class="headerlink" title="情况C：启动管理器"></a>情况C：启动管理器</h4><p>在这种情况下，计算机读取”主引导记录”前面446字节的机器码之后，不再把控制权转交给某一个分区，而是运行事先安装的<a href="http://en.wikipedia.org/wiki/Boot_loader#Modern_boot_loaders" target="_blank" rel="external">启动管理器</a>（boot loader），由用户选择启动哪一个操作系统。</p>
<p>Linux环境中，目前最流行的启动管理器是<a href="http://en.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="external"><code>Grub</code></a>。</p>
<img src="/2018/03/21/computer-booting/bg2013021505.png" alt="bg2013021505.png" title="">
<h3 id="第四阶段：操作系统"><a href="#第四阶段：操作系统" class="headerlink" title="第四阶段：操作系统"></a>第四阶段：操作系统</h3><p>控制权转交给操作系统后，操作系统的内核首先被载入内存。</p>
<p>以Linux系统为例，先载入/boot目录下面的kernel。内核加载成功后，第一个运行的程序是/sbin/init。它根据配置文件（Debian系统是/etc/initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代。</p>
<p>然后，init线程加载系统的各个模块，比如窗口程序和网络程序，直至执行/bin/login程序，跳出登录界面，等待用户输入用户名和密码。</p>
<p>至此，全部启动过程完成。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://en.wikipedia.org/wiki/Booting#Modern_boot_loaders" target="_blank" rel="external">维基百科:引导程序</a></p>
<p><a href="http://www.ibm.com/developerworks/cn/linux/l-bootload.html" target="_blank" rel="external">引导加载程序之争：了解 LILO 和 GRUB</a></p>
<p><a href="https://wiki.deepin.org/index.php?title=%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E5%99%A8&amp;action=edit" target="_blank" rel="external">系统引导器</a></p>
<p><a href="https://zh.wikipedia.org/wiki/GNU_GRUB" target="_blank" rel="external">GNU GRUB</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/02/booting.html&quot;&gt;计算机是如何启动的？&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近在学习&lt;code&gt;Linux内核完全剖析0.12&lt;/code&gt;。前两章提到了计算机操作系统是如何加载的。因此想要复习下计算机的整个启动过程。在找相关资料的过程中发现了&lt;a href=&quot;http://www.ruanyifeng.com/&quot;&gt;阮一峰前辈&lt;/a&gt;写的文章。转载一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OS" scheme="https://leokongwq.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>spring扩展点及springboot自动配置总结</title>
    <link href="https://leokongwq.github.io/2018/03/06/spring-extension-point-autoconfig-summary.html"/>
    <id>https://leokongwq.github.io/2018/03/06/spring-extension-point-autoconfig-summary.html</id>
    <published>2018-03-06T14:57:35.000Z</published>
    <updated>2018-05-15T10:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring扩展点和自动配置"><a href="#spring扩展点和自动配置" class="headerlink" title="spring扩展点和自动配置"></a>spring扩展点和自动配置</h2><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;  </span>
<span class="line">  </span>
<span class="line">    <span class="comment">/** </span>
<span class="line">     * Modify the application context's internal bean factory after its standard </span>
<span class="line">     * initialization. All bean definitions will have been loaded, but no beans </span>
<span class="line">     * will have been instantiated yet. This allows for overriding or adding </span>
<span class="line">     * properties even to eager-initializing beans. </span>
<span class="line">     * <span class="doctag">@param</span> beanFactory the bean factory used by the application context </span>
<span class="line">     * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors </span>
<span class="line">     */</span>  </span>
<span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException</span>;  </span>
<span class="line">  </span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>通过该扩展点，我们修改，新增<code>BeanDefinition</code>。因为此时所有的<code>BeanDefinition</code>已经加载，但是没有Bean被创建。一般用在需要覆盖或替换Bean的属性时。</p>
<a id="more"></a>
<p>spring中，有内置的一些BeanFactoryPostProcessor实现类，常用的有：</p>
<ul>
<li>org.springframework.beans.factory.config.PropertyPlaceholderConfigurer</li>
<li>org.springframework.beans.factory.config.PropertyOverrideConfigurer</li>
<li>org.springframework.beans.factory.config.CustomEditorConfigurer：用来注册自定义的属性编辑器</li>
</ul>
<h3 id="BeanFactoryPostProcessor-1"><a href="#BeanFactoryPostProcessor-1" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean</span>
<span class="line"> * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</span>
<span class="line"> * or a custom init-method). The bean will already be populated with property values.</span>
<span class="line"> * The returned bean instance may be a wrapper around the original.</span>
<span class="line"> * <span class="doctag">@param</span> bean the new bean instance</span>
<span class="line"> * <span class="doctag">@param</span> beanName the name of the bean</span>
<span class="line"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</span>
<span class="line"> * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</span>
<span class="line"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span>
<span class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span>
<span class="line"> */</span></span>
<span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean</span>
<span class="line"> * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</span>
<span class="line"> * or a custom init-method). The bean will already be populated with property values.</span>
<span class="line"> * The returned bean instance may be a wrapper around the original.</span>
<span class="line"> * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean</span>
<span class="line"> * instance and the objects created by the FactoryBean (as of Spring 2.0). The</span>
<span class="line"> * post-processor can decide whether to apply to either the FactoryBean or created</span>
<span class="line"> * objects or both through corresponding &#123;<span class="doctag">@code</span> bean instanceof FactoryBean&#125; checks.</span>
<span class="line"> * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a</span>
<span class="line"> * &#123;<span class="doctag">@link</span> InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&#125; method,</span>
<span class="line"> * in contrast to all other BeanPostProcessor callbacks.</span>
<span class="line"> * <span class="doctag">@param</span> bean the new bean instance</span>
<span class="line"> * <span class="doctag">@param</span> beanName the name of the bean</span>
<span class="line"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</span>
<span class="line"> * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</span>
<span class="line"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span>
<span class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span>
<span class="line"> * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean</span>
<span class="line"> */</span></span>
<span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>该扩展点提供了两个方法：</p>
<ol>
<li>是在Bean新创建后，未初始化前调用的。例如在<code>InitializingBean</code>的<code>afterPropertiesSet</code>前，或则自定义的<code>init-method</code>前。</li>
<li>在Bean初始化后，调用方法<code>postProcessAfterInitialization</code>。</li>
</ol>
<p>spring中，有内置的一些BeanPostProcessor实现类，例如：</p>
<ul>
<li>org.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入</li>
<li>org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入</li>
<li>org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入</li>
<li>org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor：支持@PersistenceUnit和@PersistenceContext注解的注入</li>
<li>org.springframework.context.support.ApplicationContextAwareProcessor：用来为bean注入ApplicationContext等容器对象</li>
</ul>
<p>spring提供的这些Bean都可以通过<code>&lt;context:annotation-config/&gt;</code> 来自动进行配置。</p>
<p>不过我们一般都会配置包扫描：<code>&lt;context:component-scan base-package=”xx.yy.zz”/&gt;</code>，该配置已经包含了:<code>&lt;context:annotation-config/&gt;</code>。</p>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><blockquote>
<p>Indicates that a class declares one or more {@link Bean @Bean} methods and<br>  may be processed by the Spring container to generate bean definitions and<br>  service requests for those beans at runtime, for example:</p>
</blockquote>
<p><code>@Configuration</code>是spring3.0引入的新注解。该注解主要用来为spring容器提供<code>BeanDefinition</code>和在运行时提供其它Bean所需要的Bean。</p>
<p>举个例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Inject</span></span>
<span class="line">    <span class="keyword">private</span> DataSource dataSource;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Bean</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> MyBean <span class="title">myBean</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyBean(dataSource);</span>
<span class="line">    &#125;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Configuration</span></span>
<span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> </span>&#123;</span>
<span class="line">        <span class="meta">@Bean</span></span>
<span class="line">        <span class="function">DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmbeddedDatabaseBuilder().build();</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="springboot自动配置"><a href="#springboot自动配置" class="headerlink" title="springboot自动配置"></a>springboot自动配置</h2><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>要想使用springboot提供的自动配置功能，必须在你工程的启动主类上添加注解<code>@EnableAutoConfiguration</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="meta">@Inherited</span></span>
<span class="line"><span class="meta">@AutoConfigurationPackage</span></span>
<span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span>
<span class="line"></span>
<span class="line">	String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Exclude specific auto-configuration classes such that they will never be applied.</span>
<span class="line">	 * <span class="doctag">@return</span> the classes to exclude</span>
<span class="line">	 */</span></span>
<span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Exclude specific auto-configuration class names such that they will never be</span>
<span class="line">	 * applied.</span>
<span class="line">	 * <span class="doctag">@return</span> the class names to exclude</span>
<span class="line">	 * <span class="doctag">@since</span> 1.3.0</span>
<span class="line">	 */</span></span>
<span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这个注解的功能概况如下：</p>
<ol>
<li>自动配置基于应用的<code>classpath</code>以及你定义了什么Beans</li>
<li>可以通过设置注解的<code>excludeName</code>属性或者通过<code>spring.autoconfigure.exclude</code>配置项来指定不需要自动配置的项目。</li>
<li>自动配置的发生时机在用户定义的Beans被注册之后</li>
<li>最好将<code>@EnableAutoConfiguration</code>注解放在<code>root package</code>的类上，这样就能够搜索到所有子<code>packages</code>中的类了</li>
<li>自动配置类就是普通的Spring <code>@Configuration</code>类，通过<code>SpringFactoriesLoader</code>机制完成加载，实现上通常使用@Conditional(比如<code>@ConditionalOnClass</code>或者<code>@ConditionalOnMissingBean</code>)</li>
</ol>
<p>不过在较新的springboot版本，可以直接使用注解<code>@SpringBootApplication</code>，原因如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="meta">@Inherited</span></span>
<span class="line"><span class="meta">@SpringBootConfiguration</span></span>
<span class="line"><span class="meta">@EnableAutoConfiguration</span></span>
<span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class))</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code>已经包含了<code>@EnableAutoConfiguration</code>。</p>
<h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span> Chris Beams</span>
<span class="line"> * <span class="doctag">@author</span> Juergen Hoeller</span>
<span class="line"> * <span class="doctag">@since</span> 3.0</span>
<span class="line"> * <span class="doctag">@see</span> Configuration</span>
<span class="line"> * <span class="doctag">@see</span> ImportSelector</span>
<span class="line"> * <span class="doctag">@see</span> ImportResource</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * &#123;<span class="doctag">@link</span> Configuration&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;, &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;</span>
<span class="line">	 * or regular component classes to import.</span>
<span class="line">	 */</span></span>
<span class="line">	Class&lt;?&gt;[] value();</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>@Import</code>注解的功能如下：</p>
<ol>
<li>该注解的功能和spring xml配置文件中的<code>&lt;import/&gt;</code>标签相同。</li>
<li>可以用来导入的类有<code>@Configuration</code>,<code>@ImportSelector</code>,<code>@ImportBeanDefinitionRegistrar</code></li>
<li>要访问通过<code>@Import</code>导入的，定义在<code>@Configuration</code>中的类，应该通过<code>@Autowired</code>进行注入。</li>
</ol>
<h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * <span class="doctag">@author</span> Chris Beams</span>
<span class="line"> * <span class="doctag">@author</span> Juergen Hoeller</span>
<span class="line"> * <span class="doctag">@author</span> Sam Brannen</span>
<span class="line"> * <span class="doctag">@since</span> 3.0</span>
<span class="line"> * <span class="doctag">@see</span> Configuration</span>
<span class="line"> * <span class="doctag">@see</span> Import</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ImportResource &#123;</span>
<span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"locations"</span>)</span>
<span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line">    </span>
<span class="line">    <span class="comment">/**</span>
<span class="line">	 * Resource locations from which to import.</span>
<span class="line">	 * &lt;p&gt;Supports resource-loading prefixes such as &#123;<span class="doctag">@code</span> classpath:&#125;,</span>
<span class="line">	 * &#123;<span class="doctag">@code</span> file:&#125;, etc.</span>
<span class="line">	 * &lt;p&gt;Consult the Javadoc for &#123;<span class="doctag">@link</span> #reader&#125; for details on how resources</span>
<span class="line">	 * will be processed.</span>
<span class="line">	 * <span class="doctag">@since</span> 4.2</span>
<span class="line">	 * <span class="doctag">@see</span> #value</span>
<span class="line">	 * <span class="doctag">@see</span> #reader</span>
<span class="line">	 */</span></span>
<span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span>
<span class="line"> 	 String[] locations() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line"> 	 </span>
<span class="line"> 	 Class&lt;? extends BeanDefinitionReader&gt; reader() <span class="keyword">default</span> BeanDefinitionReader.class;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>用来导入资源一个或多个包含<code>bean definitions</code>的资源文件。如果资源文件以<code>.groovy</code>结尾，那么就使用<code>GroovyBeanDefinitionReader</code>，否则使用<code>XmlBeanDefinitionReader</code>进行解析。</p>
<h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="meta">@Inherited</span></span>
<span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar.class)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span>
<span class="line">    <span class="comment">/**</span>
<span class="line">	 * &#123;<span class="doctag">@link</span> Configuration&#125;, &#123;<span class="doctag">@link</span> ImportSelector&#125;, &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125;</span>
<span class="line">	 * or regular component classes to import.</span>
<span class="line">	 */</span></span>
<span class="line">	Class&lt;?&gt;[] value();</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>该注解类的作用就是告诉spring:打了该注解类所在的包下面的被注解类，需要被<code>AutoConfigurationPackages</code>类进行注册。具体的实现原理可以参考第四小节提到的Bean动态注册，关于<code>ImportBeanDefinitionRegistrar</code>的解释。</p>
<h4 id="Import-EnableAutoConfigurationImportSelector-class"><a href="#Import-EnableAutoConfigurationImportSelector-class" class="headerlink" title="@Import(EnableAutoConfigurationImportSelector.class)"></a>@Import(EnableAutoConfigurationImportSelector.class)</h4><p><code>@EnableAutoConfiguration</code>注解的另外一个作用就是引入了<code>EnableAutoConfigurationImportSelector</code></p>
<p>它的类图如下所示：</p>
<img src="/2018/03/06/spring-extension-point-autoconfig-summary/EnableAutoConfigurationImportSelector.png" alt="EnableAutoConfigurationImportSelector.png" title="">
<p>可以发现它除了实现几个Aware类接口外，最关键的就是实现了<code>DeferredImportSelector</code>(继承自<code>ImportSelector</code>)接口。</p>
<p>所以我们先来看看<code>ImportSelector</code>以及<code>DeferredImportSelector</code>接口的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 基于被引入的Configuration类的AnnotationMetadata信息选择并返回需要引入的类名列表</span>
<span class="line">     */</span></span>
<span class="line">    String[] selectImports(AnnotationMetadata importingClassMetadata);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这个接口的Javadoc比较长，还是捡重点说明一下：</p>
<ol>
<li>功能通过<code>selectImports</code>方法实现，用于筛选可以<code>@Import</code>进的<code>@Configuration</code>配置类。</li>
<li>实现了<code>ImportSelector</code>接口的类也可以实现一系列<code>Aware</code>接口，这些<code>Aware</code>接口中的相应方法会在<code>selectImports</code>方法之前被调用(这一点通过上面的类图也可以佐证，<code>EnableAutoConfigurationImportSelector</code>确实实现了四个Aware类型的接口)</li>
<li><code>ImportSelector</code>的实现和通常的<code>@Import</code>在处理方式上是一致的，然而还是可以在所有<code>@Configuration</code>类都被处理后再进行引入筛选(具体看下面即将介绍的<code>@DeferredImportSelector</code>)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line">* A variation of &#123;<span class="doctag">@link</span> ImportSelector&#125; that runs after all &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; beans</span>
<span class="line">* have been processed. This type of selector can be particularly useful when the selected</span>
<span class="line">* imports are &#123;<span class="doctag">@code</span> <span class="doctag">@Conditional</span>&#125;.</span>
<span class="line">/</span>
<span class="line">public interface DeferredImportSelector extends ImportSelector &#123;</span>
<span class="line">&#125;</span></span>
</pre></td></tr></table></figure>
<p>这个接口是一个标记接口，它本身没有定义任何方法。那么这个接口的含义是什么呢：</p>
<p>它是<code>ImportSelector</code>接口的一个变体，在所有的<code>@Configuration</code>被处理之后才会执行。在需要筛选的引入类型具备<code>@Conditional</code>注解的时候非常有用实现类同样也可以实现<code>Ordered</code>接口，来定义多个<code>DeferredImportSelector</code>的优先级别(当然了，也可以使用注解<code>@Order</code>)</p>
<p>下面来看看是如何实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span>
<span class="line">    <span class="comment">//可以通过配置`spring.boot.enableautoconfiguration`来关闭该功能，默认是true</span></span>
<span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span>
<span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">try</span> &#123;</span>
<span class="line">      <span class="comment">// Step1: 得到注解信息</span></span>
<span class="line">        AutoConfigurationMetadata autoConfigurationMetadata =   AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span>
<span class="line">        <span class="comment">// Step2: 得到注解中的所有属性信息</span></span>
<span class="line">        AnnotationAttributes attributes = getAttributes(annotationMetadata);</span>
<span class="line">        <span class="comment">// Step3: 得到候选配置列表</span></span>
<span class="line">        List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</span>
<span class="line">                attributes);</span>
<span class="line">        <span class="comment">// Step4: 去重</span></span>
<span class="line">        configurations = removeDuplicates(configurations);</span>
<span class="line">        <span class="comment">// Step5: 排序</span></span>
<span class="line">        configurations = sort(configurations, autoConfigurationMetadata);</span>
<span class="line">        <span class="comment">// Step6: 根据注解中的exclude信息去除不需要的</span></span>
<span class="line">        Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span>
<span class="line">        checkExcludedClasses(configurations, exclusions);</span>
<span class="line">        configurations.removeAll(exclusions);</span>
<span class="line">        configurations = filter(configurations, autoConfigurationMetadata);</span>
<span class="line">        <span class="comment">// Step7: 派发事件</span></span>
<span class="line">        fireAutoConfigurationImportEvents(configurations, exclusions);</span>
<span class="line">        <span class="keyword">return</span> configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>注解<code>@EnableAutoConfiguration</code>一般加在应用的启动主类上，并且提供了两个配置属性:<code>exclude</code>和<code>excludeName</code>来指定排除那些配置类。</p>
<p>所以上面代码中的<code>attributes</code>变量的值其实就是注解<code>@EnableAutoConfiguration</code>的配置属性</p>
<p>核心就在于上面的步骤3：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span>
<span class="line">        AnnotationAttributes attributes)</span> </span>&#123;</span>
<span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</span>
<span class="line">            getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span>
<span class="line">    Assert.notEmpty(configurations,</span>
<span class="line">            <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></span>
<span class="line">                    + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</span>
<span class="line">    <span class="keyword">return</span> configurations;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>它将实现委托给了<code>SpringFactoriesLoader</code>的<code>loadFactoryNames</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入的factoryClass：org.springframework.boot.autoconfigure.EnableAutoConfiguration</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span>
<span class="line">    String factoryClassName = factoryClass.getName();</span>
<span class="line">    <span class="keyword">try</span> &#123;</span>
<span class="line">        Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span>
<span class="line">                ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span>
<span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span>
<span class="line">        <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span>
<span class="line">            URL url = urls.nextElement();</span>
<span class="line">            Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span>
<span class="line">            String factoryClassNames = properties.getProperty(factoryClassName);</span>
<span class="line">            result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span>
<span class="line">        &#125;</span>
<span class="line">        <span class="keyword">return</span> result;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">catch</span> (IOException ex) &#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() +</span>
<span class="line">                <span class="string">"] factories from location ["</span> + FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">// 相关常量</span></span>
<span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span>
</pre></td></tr></table></figure>
<p>这段代码的意图很明确，它会从类路径中拿到所有名为<code>META-INF/spring.factories</code>的配置文件，然后按照<code>factoryClass</code>的名称取到对应的值。那么我们就来找一个<code>META-INF/spring.factories</code>配置文件看看.</p>
<h4 id="META-INF-spring-factories"><a href="#META-INF-spring-factories" class="headerlink" title="META-INF/spring.factories"></a>META-INF/spring.factories</h4><p>比如spring-boot-autoconfigure包：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"># Auto Configure</span>
<span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span>
<span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span>
<span class="line">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span>
<span class="line"># 省略了很多</span>
</pre></td></tr></table></figure>
<blockquote>
<p>如果需要禁用某些自动配置功能， 可以通过配置<code>@EnableAutoConfiguration</code>的<code>exclude</code>属性。</p>
</blockquote>
<p>上面的文件列举了非常多的自动配置候选项，挑一个AOP相关的<code>AopAutoConfiguration</code>看看究竟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果设置了spring.aop.auto=false，那么AOP不会被配置</span></span>
<span class="line"><span class="comment">// 需要检测到@EnableAspectJAutoProxy注解存在才会生效</span></span>
<span class="line"><span class="comment">// 默认使用JdkDynamicAutoProxyConfiguration，如果设置了spring.aop.proxy-target-class=true，那么使用CglibAutoProxyConfiguration</span></span>
<span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; EnableAspectJAutoProxy.class, Aspect.class, Advice.class &#125;)</span>
<span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"auto"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Configuration</span></span>
<span class="line">    <span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">false</span>)</span>
<span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"proxy-target-class"</span>, havingValue = <span class="string">"false"</span>, matchIfMissing = <span class="keyword">true</span>)</span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAutoProxyConfiguration</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line"></span>
<span class="line">    <span class="meta">@Configuration</span></span>
<span class="line">    <span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span>
<span class="line">    <span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"proxy-target-class"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">false</span>)</span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibAutoProxyConfiguration</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这个自动配置类的作用是判断是否存在配置项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">spring.aop.proxy-target-class=true</span>
</pre></td></tr></table></figure>
<p>如果存在并且值为<code>true</code>的话使用基于<code>CGLIB</code>字节码操作的动态代理方案，否则使用JDK自带的动态代理机制。</p>
<p>在这个配置类中，使用到了两个全新的注解：</p>
<ul>
<li>@ConditionalOnClass</li>
<li>@ConditionalOnProperty</li>
</ul>
<p>从这两个注解的名称，就大概能够猜出它们的功能了：</p>
<h3 id="ConditionalOnClass"><a href="#ConditionalOnClass" class="headerlink" title="@ConditionalOnClass"></a>@ConditionalOnClass</h3><p>当类路径上存在指定的类时，满足条件。</p>
<h3 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h3><p>当配置中存在指定的属性时，满足条件。</p>
<p>其实除了这两个注解之外，还有几个类似的，它们都在<code>org.springframework.boot.autoconfigure.condition</code>这个包下，在具体介绍实现之前，下面先来看看Spring Boot对于<code>@Conditional</code>的扩展。</p>
<h3 id="Spring-Boot对于-Conditional的扩展"><a href="#Spring-Boot对于-Conditional的扩展" class="headerlink" title="Spring Boot对于@Conditional的扩展"></a>Spring Boot对于@Conditional的扩展</h3><p>Spring Boot提供了一个实现了<code>Condition</code>接口的抽象类<code>SpringBootCondition</code>。</p>
<p>这个类的主要作用是打印一些用于诊断的日志，告诉用户哪些类型被自动配置了。</p>
<p>它实现<code>Condition</code>接口的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span>
<span class="line">        AnnotatedTypeMetadata metadata)</span> </span>&#123;</span>
<span class="line">    String classOrMethodName = getClassOrMethodName(metadata);</span>
<span class="line">    <span class="keyword">try</span> &#123;</span>
<span class="line">        ConditionOutcome outcome = getMatchOutcome(context, metadata);</span>
<span class="line">        logOutcome(classOrMethodName, outcome);</span>
<span class="line">        recordEvaluation(context, classOrMethodName, outcome);</span>
<span class="line">        <span class="keyword">return</span> outcome.isMatch();</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">catch</span> (NoClassDefFoundError ex) &#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span>
<span class="line">                <span class="string">"Could not evaluate condition on "</span> + classOrMethodName + <span class="string">" due to "</span></span>
<span class="line">                        + ex.getMessage() + <span class="string">" not "</span></span>
<span class="line">                        + <span class="string">"found. Make sure your own configuration does not rely on "</span></span>
<span class="line">                        + <span class="string">"that class. This can also happen if you are "</span></span>
<span class="line">                        + <span class="string">"@ComponentScanning a springframework package (e.g. if you "</span></span>
<span class="line">                        + <span class="string">"put a @ComponentScan in the default package by mistake)"</span>,</span>
<span class="line">                ex);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span>
<span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span>
<span class="line">                <span class="string">"Error processing condition on "</span> + getName(metadata), ex);</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * Determine the outcome of the match along with suitable log output.</span>
<span class="line"> * <span class="doctag">@param</span> context the condition context</span>
<span class="line"> * <span class="doctag">@param</span> metadata the annotation metadata</span>
<span class="line"> * <span class="doctag">@return</span> the condition outcome</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span>
<span class="line">        AnnotatedTypeMetadata metadata)</span></span>;</span>
</pre></td></tr></table></figure>
<p>SpringBootCondition已经提供了基本的实现，将内部的匹配细节定义成抽象方法getMatchOutcome，交给其子类去完成。</p>
<p>另外，还提供了两个可能会被子类使用到的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * 如果指定的conditions中有任意一个匹配，那么就返回true</span>
<span class="line"> * <span class="doctag">@param</span> context the context</span>
<span class="line"> * <span class="doctag">@param</span> metadata the annotation meta-data</span>
<span class="line"> * <span class="doctag">@param</span> conditions conditions to test</span>
<span class="line"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if any condition matches.</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">anyMatches</span><span class="params">(ConditionContext context,</span>
<span class="line">        AnnotatedTypeMetadata metadata, Condition... conditions)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">for</span> (Condition condition : conditions) &#123;</span>
<span class="line">        <span class="keyword">if</span> (matches(context, metadata, condition)) &#123;</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span>
<span class="line">        &#125;</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * 检查指定的condition是否匹配</span>
<span class="line"> * <span class="doctag">@param</span> context the context</span>
<span class="line"> * <span class="doctag">@param</span> metadata the annotation meta-data</span>
<span class="line"> * <span class="doctag">@param</span> condition condition to test</span>
<span class="line"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the condition matches.</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span>
<span class="line">        AnnotatedTypeMetadata metadata, Condition condition)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">if</span> (condition <span class="keyword">instanceof</span> SpringBootCondition) &#123;</span>
<span class="line">        <span class="keyword">return</span> ((SpringBootCondition) condition).getMatchOutcome(context, metadata)</span>
<span class="line">                .isMatch();</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">return</span> condition.matches(context, metadata);</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="org-springframework-boot-autoconfigure-condition包"><a href="#org-springframework-boot-autoconfigure-condition包" class="headerlink" title="org.springframework.boot.autoconfigure.condition包"></a>org.springframework.boot.autoconfigure.condition包</h3><p>除了上面已经遇到的<code>@ConditionalOnClass</code>和<code>@ConditionalOnProperty</code>，这个包中还定义了很多条件实现类，下面简单列举几个：</p>
<h3 id="ConditionalOnExpression-基于SpEL的条件判断"><a href="#ConditionalOnExpression-基于SpEL的条件判断" class="headerlink" title="@ConditionalOnExpression - 基于SpEL的条件判断"></a>@ConditionalOnExpression - 基于SpEL的条件判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * Configuration annotation for a conditional element that depends on the value of a SpEL</span>
<span class="line"> * expression.</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span> Dave Syer</span>
<span class="line"> */</span></span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="meta">@Conditional</span>(OnExpressionCondition.class)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnExpression &#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * The SpEL expression to evaluate. Expression should return &#123;<span class="doctag">@code</span> true&#125; if the</span>
<span class="line">     * condition passes or &#123;<span class="doctag">@code</span> false&#125; if it fails.</span>
<span class="line">     * <span class="doctag">@return</span> the SpEL expression</span>
<span class="line">     */</span></span>
<span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">true</span>"</span>;</span>
</pre></td></tr></table></figure>
<p>然后相应的实现类是<code>OnExpressionCondition</code>，它继承自<code>SpringBootCondition</code>。</p>
<h3 id="ConditionalOnMissingClass-基于类不存在与classpath的条件判断"><a href="#ConditionalOnMissingClass-基于类不存在与classpath的条件判断" class="headerlink" title="@ConditionalOnMissingClass - 基于类不存在与classpath的条件判断"></a>@ConditionalOnMissingClass - 基于类不存在与classpath的条件判断</h3><p>这一个条件实现正好和<code>@ConditionalOnClass</code>条件相反</p>
<p>下面列举所有由Spring Boot提供的条件注解：</p>
<ul>
<li>@ConditionalOnBean</li>
<li>@ConditionalOnClass</li>
<li>@ConditionalOnCloudPlatform</li>
<li>@ConditionalOnExpression</li>
<li>@ConditionalOnJava</li>
<li>@ConditionalOnJndi</li>
<li>@ConditionalOnMissingBean</li>
<li>@ConditionalOnMissingClass</li>
<li>@ConditionalOnNotWebApplication</li>
<li>@ConditionalOnProperty</li>
<li>@ConditionalOnResource</li>
<li>@ConditionalOnSingleCandidate</li>
<li>@ConditionalOnWebApplication</li>
</ul>
<p>一般的模式，就是一个条件注解对应一个继承自SpringBootCondition的具体实现类。</p>
<h2 id="动态注册Bean"><a href="#动态注册Bean" class="headerlink" title="动态注册Bean"></a>动态注册Bean</h2><p>在某些特殊的场景下，我们需要动态的向spring的容器注册Bean。spring框架本身提供了一些机制来帮助我们来实现这些特殊的需求。</p>
<h3 id="BeanDefinitionRegistry"><a href="#BeanDefinitionRegistry" class="headerlink" title="BeanDefinitionRegistry"></a>BeanDefinitionRegistry</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title">AliasRegistry</span> </span>&#123;</span>
<span class="line">    </span>
<span class="line">    <span class="comment">/**</span>
<span class="line">	 * Register a new bean definition with this registry.</span>
<span class="line">	 * Must support RootBeanDefinition and ChildBeanDefinition.</span>
<span class="line">	 * <span class="doctag">@param</span> beanName the name of the bean instance to register</span>
<span class="line">	 * <span class="doctag">@param</span> beanDefinition definition of the bean instance to register</span>
<span class="line">	 * <span class="doctag">@throws</span> BeanDefinitionStoreException if the BeanDefinition is invalid</span>
<span class="line">	 * or if there is already a BeanDefinition for the specified bean name</span>
<span class="line">	 * (and we are not allowed to override it)</span>
<span class="line">	 * <span class="doctag">@see</span> RootBeanDefinition</span>
<span class="line">	 * <span class="doctag">@see</span> ChildBeanDefinition</span>
<span class="line">	 */</span></span>
<span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span>
<span class="line">			<span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>BeanDefinitionRegistry 扩展点允许我们来动态的想spring容器注册<code>BeanDefinition</code>。</p>
<h3 id="SingletonBeanRegistry"><a href="#SingletonBeanRegistry" class="headerlink" title="SingletonBeanRegistry"></a>SingletonBeanRegistry</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span>
<span class="line">    <span class="comment">/**</span>
<span class="line">	 * Register the given existing object as singleton in the bean registry,</span>
<span class="line">	 * under the given bean name.</span>
<span class="line">	 * &lt;p&gt;The given instance is supposed to be fully initialized; the registry</span>
<span class="line">	 * will not perform any initialization callbacks (in particular, it won't</span>
<span class="line">	 * call InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125; method).</span>
<span class="line">	 * The given instance will not receive any destruction callbacks</span>
<span class="line">	 * (like DisposableBean's &#123;<span class="doctag">@code</span> destroy&#125; method) either.</span>
<span class="line">	 * &lt;p&gt;When running within a full BeanFactory: &lt;b&gt;Register a bean definition</span>
<span class="line">	 * instead of an existing instance if your bean is supposed to receive</span>
<span class="line">	 * initialization and/or destruction callbacks.&lt;/b&gt;</span>
<span class="line">	 * &lt;p&gt;Typically invoked during registry configuration, but can also be used</span>
<span class="line">	 * for runtime registration of singletons. As a consequence, a registry</span>
<span class="line">	 * implementation should synchronize singleton access; it will have to do</span>
<span class="line">	 * this anyway if it supports a BeanFactory's lazy initialization of singletons.</span>
<span class="line">	 * <span class="doctag">@param</span> beanName the name of the bean</span>
<span class="line">	 * <span class="doctag">@param</span> singletonObject the existing singleton object</span>
<span class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span>
<span class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.DisposableBean#destroy</span>
<span class="line">	 * <span class="doctag">@see</span> org.springframework.beans.factory.support.BeanDefinitionRegistry#registerBeanDefinition</span>
<span class="line">	 */</span></span>
<span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>SingletonBeanRegistry</code>允许我们来直接向Spring容器注册Singleton的Bean实例。</p>
<p>两者区别在于使用前者时，Spring容器会根据BeanDefinition实例化bean实例，而使用后者时，bean实例就是传递给registerSingleton方法的对象。</p>
<p>DefaultListableBeanFactory接口同时实现了这两个接口，在实践中通常会使用这个接口。</p>
<h4 id="在普通bean中进行动态注册"><a href="#在普通bean中进行动态注册" class="headerlink" title="在普通bean中进行动态注册"></a>在普通bean中进行动态注册</h4><p>可以在任何获得了<code>BeanDefinitionRegistry</code>或者<code>SingletonBeanRegistry</code>实例的地方进行动态注册。</p>
<p>但是如果bean不是在<code>BeanFactoryPostProcessor</code>中被注册，那么该bean则无法被<strong>BeanPostProcessor</strong>处理，即无法对其应用aop、Bean Validation等功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line">RestController</span>
<span class="line"><span class="meta">@Slf</span>4j</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonManagerRegisterController</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * The Application context.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    GenericApplicationContext applicationContext;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * The Bean factory.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    ConfigurableBeanFactory beanFactory;</span>
<span class="line"></span>
<span class="line">    <span class="comment">/**</span>
<span class="line">     * 动态注册bean，此处注册的bean没有AOP的支持</span>
<span class="line">     * curl http://localhost:8080/registerPersonManager</span>
<span class="line">     */</span></span>
<span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/registerPersonManager"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerPersonManager</span><span class="params">()</span> </span>&#123;</span>
<span class="line">        PersonDao personDao = applicationContext.getBean(PersonDao.class);</span>
<span class="line">        PersonManager personManager = <span class="keyword">new</span> PersonManager();</span>
<span class="line">        personManager.setPersonDao(personDao);</span>
<span class="line">        beanFactory.registerSingleton(<span class="string">"personManager3"</span>, personManager);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h4 id="在BeanFactoryPostProcessor中进行动态注册"><a href="#在BeanFactoryPostProcessor中进行动态注册" class="headerlink" title="在BeanFactoryPostProcessor中进行动态注册"></a>在<code>BeanFactoryPostProcessor</code>中进行动态注册</h4><p>在Spring容器的启动过程中，<code>BeanFactory</code>载入bean的定义后会立刻执行<code>BeanFactoryPostProcessor</code>，此时动态注册bean，则可以保证动态注册的bean被<code>BeanPostProcessor</code>处理，并且可以保证其的实例化和初始化总是先于依赖它的bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="meta">@Slf</span>4j</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span>
<span class="line">    </span>
<span class="line">    <span class="meta">@Override</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span>
<span class="line">        DefaultListableBeanFactory defaultListableBeanFactory</span>
<span class="line">                = (DefaultListableBeanFactory) beanFactory;</span>
<span class="line"></span>
<span class="line">        <span class="comment">//注册Bean定义，容器根据定义返回bean</span></span>
<span class="line">        log.info(<span class="string">"register personManager1&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span>
<span class="line">        BeanDefinitionBuilder beanDefinitionBuilder =</span>
<span class="line">                BeanDefinitionBuilder.genericBeanDefinition(PersonManager.class);</span>
<span class="line">        beanDefinitionBuilder.addPropertyReference(<span class="string">"personDao"</span>, <span class="string">"personDao"</span>);</span>
<span class="line">        BeanDefinition personManagerBeanDefinition = beanDefinitionBuilder.getRawBeanDefinition();</span>
<span class="line">        defaultListableBeanFactory.registerBeanDefinition(<span class="string">"personManager1"</span>, personManagerBeanDefinition);</span>
<span class="line"></span>
<span class="line">        <span class="comment">//注册bean实例</span></span>
<span class="line">        log.info(<span class="string">"register personManager2&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span>
<span class="line">        PersonDao personDao = beanFactory.getBean(PersonDao.class);</span>
<span class="line">        PersonManager personManager = <span class="keyword">new</span> PersonManager();</span>
<span class="line">        personManager.setPersonDao(personDao);</span>
<span class="line">        beanFactory.registerSingleton(<span class="string">"personManager2"</span>, personManager);</span>
<span class="line"></span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="BeanDefinitionRegistryPostProcessor"><a href="#BeanDefinitionRegistryPostProcessor" class="headerlink" title="BeanDefinitionRegistryPostProcessor"></a>BeanDefinitionRegistryPostProcessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistryPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Modify the application context's internal bean definition registry after its</span>
<span class="line">	 * standard initialization. All regular bean definitions will have been loaded,</span>
<span class="line">	 * but no beans will have been instantiated yet. This allows for adding further</span>
<span class="line">	 * bean definitions before the next post-processing phase kicks in.</span>
<span class="line">	 * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span>
<span class="line">	 * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>BeanDefinitionRegistryPostProcessor</code> 这个类也可以提供<code>BeanDefinition</code>注册的扩展点。</p>
<h3 id="ConfigurationClassPostProcessor"><a href="#ConfigurationClassPostProcessor" class="headerlink" title="ConfigurationClassPostProcessor"></a>ConfigurationClassPostProcessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * &#123;<span class="doctag">@link</span> BeanFactoryPostProcessor&#125; used for bootstrapping processing of</span>
<span class="line"> * &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; classes.</span>
<span class="line"> *</span>
<span class="line"> * &lt;p&gt;Registered by default when using &#123;<span class="doctag">@code</span> &lt;context:annotation-config/&gt;&#125; or</span>
<span class="line"> * &#123;<span class="doctag">@code</span> &lt;context:component-scan/&gt;&#125;. Otherwise, may be declared manually as</span>
<span class="line"> * with any other BeanFactoryPostProcessor.</span>
<span class="line"> *</span>
<span class="line"> * &lt;p&gt;This post processor is &#123;<span class="doctag">@link</span> Ordered#HIGHEST_PRECEDENCE&#125; as it is important</span>
<span class="line"> * that any &#123;<span class="doctag">@link</span> Bean&#125; methods declared in Configuration classes have their</span>
<span class="line"> * respective bean definitions registered before any other BeanFactoryPostProcessor</span>
<span class="line"> * executes.</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span> Chris Beams</span>
<span class="line"> * <span class="doctag">@author</span> Juergen Hoeller</span>
<span class="line"> * <span class="doctag">@author</span> Phillip Webb</span>
<span class="line"> * <span class="doctag">@since</span> 3.0</span>
<span class="line"> */</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationClassPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>,</span>
<span class="line">		<span class="title">PriorityOrdered</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span>
</pre></td></tr></table></figure>
<p>这个类的主要功能就是用来处理打了<code>@Configuration</code>注解的Java配置类。解析配置类，并注册<code>BeanDefinition</code>到<code>BeanDefinitionRegistry</code></p>
<p>最重要的方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line">* Derive further bean definitions from the configuration classes in the registry.</span>
<span class="line">*/</span></span>
<span class="line"><span class="meta">@Override</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span>
<span class="line">    <span class="keyword">int</span> registryId = System.identityHashCode(registry);</span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span>
<span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span>
<span class="line">    			<span class="string">"postProcessBeanDefinitionRegistry already called on this post-processor against "</span> + registry);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span>
<span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span>
<span class="line">    			<span class="string">"postProcessBeanFactory already called on this post-processor against "</span> + registry);</span>
<span class="line">    &#125;</span>
<span class="line">    <span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span>
<span class="line">    </span>
<span class="line">    processConfigBeanDefinitions(registry);</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">/**</span>
<span class="line"> * Build and validate a configuration model based on the registry of</span>
<span class="line"> * &#123;<span class="doctag">@link</span> Configuration&#125; classes.</span>
<span class="line"> */</span></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span>
<span class="line">    <span class="comment">//代码太多了。</span></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="ImportBeanDefinitionRegistrar"><a href="#ImportBeanDefinitionRegistrar" class="headerlink" title="ImportBeanDefinitionRegistrar"></a>ImportBeanDefinitionRegistrar</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line">* Interface to be implemented by types that register additional bean definitions when</span>
<span class="line">* processing @&#123;<span class="doctag">@link</span> Configuration&#125; classes. Useful when operating at the bean definition</span>
<span class="line">* level (as opposed to &#123;<span class="doctag">@code</span> <span class="doctag">@Bean</span>&#125; method/instance level) is desired or necessary.</span>
<span class="line">*/</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Register bean definitions as necessary based on the given annotation metadata of</span>
<span class="line">	 * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span>
<span class="line">	 * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</span>
<span class="line">	 * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</span>
<span class="line">	 * class processing.</span>
<span class="line">	 * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span>
<span class="line">	 * <span class="doctag">@param</span> registry current bean definition registry</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,     BeanDefinitionRegistry registry)</span></span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>Spring官方在动态注册bean时，大部分套路其实是使用ImportBeanDefinitionRegistrar接口。</p>
<p>所有实现了该接口的类的都会被<code>ConfigurationClassPostProcessor</code>处理，<code>ConfigurationClassPostProcessor</code>实现了<code>BeanFactoryPostProcessor</code>接口，所以<code>ImportBeanDefinitionRegistrar</code>中动态注册的bean是优先与依赖其的bean初始化的，也能被aop、validator等机制处理。</p>
<p>使用方法</p>
<p><code>ImportBeanDefinitionRegistrar</code>需要配合<code>@Configuration</code>和<code>@Import</code>注解，<code>@Configuration</code>定义Java格式的Spring配置文件，<code>@Import</code>注解导入实现了<code>ImportBeanDefinitionRegistrar</code>接口的类。</p>
<p>例子：</p>
<p>首先编写一个实现了接口<code>ImportBeanDefinitionRegistrar</code>的类，来实现我们自定义的Bean注册功能</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UranusConfigRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">  <span class="meta">@Override</span></span>
<span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span>
<span class="line">      System.out.println(registry.getClass());</span>
<span class="line">      System.out.println(importingClassMetadata.getClassName());</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>随后我们定义两个配置类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@Import</span>(UranusConfigRegistrar.class)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Configuration</span></span>
<span class="line"><span class="meta">@Import</span>(UranusConfigRegistrar.class)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>启动springboot应用，我们能再控制台看到如下的输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">beans</span>.<span class="title">factory</span>.<span class="title">support</span>.<span class="title">DefaultListableBeanFactory</span></span>
<span class="line"><span class="title">com</span>.<span class="title">leokongwq</span>.<span class="title">springcloud</span>.<span class="title">bookservice</span>.<span class="title">config</span>.<span class="title">DatabaseConfig</span></span>
<span class="line"></span>
<span class="line"><span class="title">class</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">beans</span>.<span class="title">factory</span>.<span class="title">support</span>.<span class="title">DefaultListableBeanFactory</span></span>
<span class="line"><span class="title">com</span>.<span class="title">leokongwq</span>.<span class="title">springcloud</span>.<span class="title">bookservice</span>.<span class="title">config</span>.<span class="title">WebConfig</span></span></span>
</pre></td></tr></table></figure>
<p>从输出我们可以知道，方法<code>registerBeanDefinitions</code>的参数<code>AnnotationMetadata</code>里面包含<code>@Configuration</code>配置类的注解原信息。<code>registry</code>参数其实就是spring容器。</p>
<p>通过<code>AnnotationMetadata</code>我们能获取到<code>@Configuration</code>配置类上的所有注解信息，包括配置类里面加了注解的方法配置信息。</p>
<p>通过该机制，我们可以在<code>@Configuration</code>配置类上添加配置原元数据注解，以此来实现动态注册Bean的功能。</p>
<p>例如:</p>
<p>配置注解类：<code>EnableRedisCache</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Import</span>(UranusConfigRegistrar.class)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRedisCache &#123;</span>
<span class="line"></span>
<span class="line">    <span class="function">String <span class="title">host</span><span class="params">()</span> <span class="keyword">default</span> "127.0.0.1"</span>;</span>
<span class="line"></span>
<span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 9527</span>;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>启用注解<code>EnableRedisCache</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="meta">@EnableRedisCache</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationBootstrap</span> </span>&#123;</span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">        SpringApplication.run(ApplicationBootstrap.class, args); </span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>启动应用，可以在控制台看到如下的输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">beans</span>.<span class="title">factory</span>.<span class="title">support</span>.<span class="title">DefaultListableBeanFactory</span></span>
<span class="line"><span class="title">com</span>.<span class="title">leokongwq</span>.<span class="title">springcloud</span>.<span class="title">bookservice</span>.<span class="title">config</span>.<span class="title">WebConfig</span></span>
<span class="line"><span class="title">host</span></span>=<span class="number">127.0</span>.0.1</span>
<span class="line">port=<span class="number">9527</span></span>
</pre></td></tr></table></figure>
<p>有了配置的元数据，我们就可以自由发挥，动态的生成一些Bean。</p>
<p>举一个springboot中的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span>
<span class="line"> * &#123;<span class="doctag">@link</span> ImportBeanDefinitionRegistrar&#125; used by &#123;<span class="doctag">@link</span> ServletComponentScan&#125;.</span>
<span class="line"> *</span>
<span class="line"> * <span class="doctag">@author</span> Andy Wilkinson</span>
<span class="line"> * <span class="doctag">@author</span> Stephane Nicoll</span>
<span class="line"> */</span></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServletComponentScanRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span>
<span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEAN_NAME = <span class="string">"servletComponentRegisteringPostProcessor"</span>;</span>
<span class="line"></span>
<span class="line">	<span class="meta">@Override</span></span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span>
<span class="line">			BeanDefinitionRegistry registry)</span> </span>&#123;</span>
<span class="line">		Set&lt;String&gt; packagesToScan = getPackagesToScan(importingClassMetadata);</span>
<span class="line">		<span class="keyword">if</span> (registry.containsBeanDefinition(BEAN_NAME)) &#123;</span>
<span class="line">			updatePostProcessor(registry, packagesToScan);</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">else</span> &#123;</span>
<span class="line">			addPostProcessor(registry, packagesToScan);</span>
<span class="line">		&#125;</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span>
<span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span>
<span class="line"><span class="meta">@Documented</span></span>
<span class="line"><span class="meta">@Import</span>(ServletComponentScanRegistrar.class)</span>
<span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ServletComponentScan &#123;</span>
<span class="line">    <span class="comment">/**</span>
<span class="line">	 * Alias for the &#123;<span class="doctag">@link</span> #basePackages()&#125; attribute. Allows for more concise annotation</span>
<span class="line">	 * declarations e.g.: &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>("org.my.pkg")&#125; instead of</span>
<span class="line">	 * &#123;<span class="doctag">@code</span> <span class="doctag">@ServletComponentScan</span>(basePackages="org.my.pkg")&#125;.</span>
<span class="line">	 * <span class="doctag">@return</span> the base packages to scan</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"basePackages"</span>)</span>
<span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Base packages to scan for annotated servlet components. &#123;<span class="doctag">@link</span> #value()&#125; is an</span>
<span class="line">	 * alias for (and mutually exclusive with) this attribute.</span>
<span class="line">	 * &lt;p&gt;</span>
<span class="line">	 * Use &#123;<span class="doctag">@link</span> #basePackageClasses()&#125; for a type-safe alternative to String-based</span>
<span class="line">	 * package names.</span>
<span class="line">	 * <span class="doctag">@return</span> the base packages to scan</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span>
<span class="line">	String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line"></span>
<span class="line">	<span class="comment">/**</span>
<span class="line">	 * Type-safe alternative to &#123;<span class="doctag">@link</span> #basePackages()&#125; for specifying the packages to</span>
<span class="line">	 * scan for annotated servlet components. The package of each class specified will be</span>
<span class="line">	 * scanned.</span>
<span class="line">	 * <span class="doctag">@return</span> classes from the base packages to scan</span>
<span class="line">	 */</span></span>
<span class="line">	Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p><code>ServletComponentScanRegistrar</code>实现了接口：<code>ImportBeanDefinitionRegistrar</code>。 同时注解<code>@ServletComponentScan</code>上也打了注解<code>@Import(ServletComponentScanRegistrar.class)</code>。</p>
<p>这样我们就可以在使用注解<code>ServletComponentScan</code>时，指定<code>basePackages</code>和<code>basePackageClasses</code>属性来配置Servlet规范里面的组件。Filter，Listener， Servlet等。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
</pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span>
<span class="line"><span class="meta">@ServletComponentScan</span>(basePackages = <span class="string">"com.leokongwq.springcloud.bookservice.web"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceApplication</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span>
<span class="line">		SpringApplication.run(BookServiceApplication.class, args);</span>
<span class="line">	&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h2 id="SpringFactoriesLoader-机制"><a href="#SpringFactoriesLoader-机制" class="headerlink" title="SpringFactoriesLoader 机制"></a>SpringFactoriesLoader 机制</h2><p>SpringFactoriesLoader 的主要目的是在Spring框架内部完成工厂的加载机制。</p>
<p>主要的方法有2个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span>
<span class="line">		Assert.notNull(factoryClass, <span class="string">"'factoryClass' must not be null"</span>);</span>
<span class="line">		ClassLoader classLoaderToUse = classLoader;</span>
<span class="line">		<span class="keyword">if</span> (classLoaderToUse == <span class="keyword">null</span>) &#123;</span>
<span class="line">			classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span>
<span class="line">		&#125;</span>
<span class="line">		List&lt;String&gt; factoryNames = loadFactoryNames(factoryClass, classLoaderToUse);</span>
<span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span>
<span class="line">			logger.trace(<span class="string">"Loaded ["</span> + factoryClass.getName() + <span class="string">"] names: "</span> + factoryNames);</span>
<span class="line">		&#125;</span>
<span class="line">		List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;(factoryNames.size());</span>
<span class="line">		<span class="keyword">for</span> (String factoryName : factoryNames) &#123;</span>
<span class="line">			result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse));</span>
<span class="line">		&#125;</span>
<span class="line">		AnnotationAwareOrderComparator.sort(result);</span>
<span class="line">		<span class="keyword">return</span> result;</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span>
<span class="line">		String factoryClassName = factoryClass.getName();</span>
<span class="line">		<span class="keyword">try</span> &#123;</span>
<span class="line">			Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span>
<span class="line">					ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span>
<span class="line">			List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span>
<span class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span>
<span class="line">				URL url = urls.nextElement();</span>
<span class="line">				Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span>
<span class="line">				String factoryClassNames = properties.getProperty(factoryClassName);</span>
<span class="line">				result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span>
<span class="line">			&#125;</span>
<span class="line">			<span class="keyword">return</span> result;</span>
<span class="line">		&#125;</span>
<span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span>
<span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() +</span>
<span class="line">					<span class="string">"] factories from location ["</span> + FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</span>
<span class="line">		&#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>这两个方法都是从classpath的指定文件中获取需要加载的类。这个文件就是classpath下面的：<code>META-INF/spring.factories</code>。在签名的小节已经看到过这个文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring扩展点和自动配置&quot;&gt;&lt;a href=&quot;#spring扩展点和自动配置&quot; class=&quot;headerlink&quot; title=&quot;spring扩展点和自动配置&quot;&gt;&lt;/a&gt;spring扩展点和自动配置&lt;/h2&gt;&lt;h3 id=&quot;BeanFactoryPostProcessor&quot;&gt;&lt;a href=&quot;#BeanFactoryPostProcessor&quot; class=&quot;headerlink&quot; title=&quot;BeanFactoryPostProcessor&quot;&gt;&lt;/a&gt;BeanFactoryPostProcessor&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BeanFactoryPostProcessor&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/** &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * Modify the application context&#39;s internal bean factory after its standard &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * initialization. All bean definitions will have been loaded, but no beans &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * will have been instantiated yet. This allows for overriding or adding &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * properties even to eager-initializing beans. &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; beanFactory the bean factory used by the application context &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; org.springframework.beans.BeansException in case of errors &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;  &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;postProcessBeanFactory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ConfigurableListableBeanFactory beanFactory)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; BeansException&lt;/span&gt;;  &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过该扩展点，我们修改，新增&lt;code&gt;BeanDefinition&lt;/code&gt;。因为此时所有的&lt;code&gt;BeanDefinition&lt;/code&gt;已经加载，但是没有Bean被创建。一般用在需要覆盖或替换Bean的属性时。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="spring" scheme="https://leokongwq.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>基于Openresy的图片服务</title>
    <link href="https://leokongwq.github.io/2018/02/12/openresy-lua-image-server.html"/>
    <id>https://leokongwq.github.io/2018/02/12/openresy-lua-image-server.html</id>
    <published>2018-02-12T06:43:12.000Z</published>
    <updated>2018-02-12T07:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有个项目的需要是：用户通过给好友分享带有二维码的图片，好友扫码或在微信中识别二维码来领取分享的礼物。要实现这个需要，能想到的解决方案有两个：</p>
<a id="more"></a>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>客户端实现。背景图片存在客户端，客户端动态生成二维码，并完成图片的合成（包括给背景图添加二维码，文字水印，用户头像等信息）。</p>
<p>优点：图片和合成处理分布在每个用户的手机上，图片合成的计算压力进行了分散。用户体验更好。服务端只需要存储合成后的图片，并进行图片的加速访问。</p>
<p>缺点：这个方案的可行的前提是客户端当前需要具备这样的能力，而且需要需要访问用户手机的相册（也可以不访问）。现实问题是：1.马上开发上线，开发，审核，推广，用户下载都需要时间。2.用户版本不一致，不能保证覆盖面。</p>
<!-- more -->
<p>由于以上的问题，才有了方案二。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>服务端实现。背景图片存在服务端，服务端通过图片库来完成图片的合成（二维码，水印等）。</p>
<p>优点：不依赖客户端。更好的动态控制能力</p>
<p>缺点：图片处理的压力全部在服务端。</p>
<h4 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h4><p>一开始的方案是通过Java开发一个图片服务，通过Java库<a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a>来生成二维码。<a href="https://github.com/coobird/thumbnailator" target="_blank" rel="external">Thumbnails</a> 来进行图片的合成，水印等功能。</p>
<p>马上开发并进行压测后发现效率一般。决定这个方案作为备选方案，抗不住就加机器。</p>
<h4 id="Openresty-Lua-ImageMagic"><a href="#Openresty-Lua-ImageMagic" class="headerlink" title="Openresty + Lua + ImageMagic"></a>Openresty + Lua + ImageMagic</h4><p>Openresty，Lua，ImageMagic 的作用就不解释了。下面直接上配置和代码。</p>
<p>Openresty 配置</p>
<figure class="highlight nginx"><figcaption><span>main block</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维码文件名缓存</span></span>
<span class="line"><span class="attribute">lua_shared_dict</span> qr_cache <span class="number">10m</span>;</span>
<span class="line"><span class="comment"># 合成后的图片缓存，生产环境可以调大</span></span>
<span class="line"><span class="attribute">lua_shared_dict</span> share_img_file_cache <span class="number">10m</span>;</span>
</pre></td></tr></table></figure>
<figure class="highlight nginx"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
</pre></td><td class="code"><pre><span class="line"></span>
<span class="line"><span class="section">server</span> &#123;</span>
<span class="line">    <span class="attribute">listen</span>    <span class="number">80</span>;</span>
<span class="line">    <span class="attribute">server_name</span> localhost;</span>
<span class="line">    </span>
<span class="line">    <span class="attribute">access_log</span>  /data/logs/nginx/image.access.log  main;</span>
<span class="line">    </span>
<span class="line">    <span class="attribute">location</span> /images &#123;</span>
<span class="line">       <span class="attribute">set</span> <span class="variable">$image_root</span> <span class="string">"/data/static"</span>;</span>
<span class="line">       <span class="attribute">set</span> <span class="variable">$file</span> <span class="string">"<span class="variable">$image_root</span><span class="variable">$uri</span>"</span>;</span>
<span class="line">       <span class="attribute">set</span> <span class="variable">$convert_bin</span> <span class="string">"/usr/local/bin/convert"</span>;</span>
<span class="line">       <span class="attribute">rewrite_by_lua_file</span> <span class="string">"/Users/leo/workspace/lua/nginx-imagemagick.lua"</span>;</span>
<span class="line">    &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>Lua合成图片代码</p>
<figure class="highlight lua"><figcaption><span>nginx-imagemagick.lua</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
<span class="line">120</span>
<span class="line">121</span>
<span class="line">122</span>
<span class="line">123</span>
<span class="line">124</span>
<span class="line">125</span>
<span class="line">126</span>
<span class="line">127</span>
<span class="line">128</span>
<span class="line">129</span>
<span class="line">130</span>
<span class="line">131</span>
<span class="line">132</span>
<span class="line">133</span>
<span class="line">134</span>
<span class="line">135</span>
<span class="line">136</span>
<span class="line">137</span>
<span class="line">138</span>
<span class="line">139</span>
<span class="line">140</span>
<span class="line">141</span>
<span class="line">142</span>
<span class="line">143</span>
<span class="line">144</span>
<span class="line">145</span>
<span class="line">146</span>
<span class="line">147</span>
<span class="line">148</span>
<span class="line">149</span>
<span class="line">150</span>
<span class="line">151</span>
<span class="line">152</span>
<span class="line">153</span>
<span class="line">154</span>
<span class="line">155</span>
<span class="line">156</span>
<span class="line">157</span>
<span class="line">158</span>
<span class="line">159</span>
<span class="line">160</span>
<span class="line">161</span>
<span class="line">162</span>
<span class="line">163</span>
<span class="line">164</span>
<span class="line">165</span>
<span class="line">166</span>
<span class="line">167</span>
<span class="line">168</span>
<span class="line">169</span>
<span class="line">170</span>
<span class="line">171</span>
<span class="line">172</span>
<span class="line">173</span>
<span class="line">174</span>
<span class="line">175</span>
<span class="line">176</span>
<span class="line">177</span>
<span class="line">178</span>
<span class="line">179</span>
<span class="line">180</span>
<span class="line">181</span>
<span class="line">182</span>
<span class="line">183</span>
<span class="line">184</span>
<span class="line">185</span>
<span class="line">186</span>
<span class="line">187</span>
<span class="line">188</span>
<span class="line">189</span>
<span class="line">190</span>
<span class="line">191</span>
<span class="line">192</span>
<span class="line">193</span>
<span class="line">194</span>
<span class="line">195</span>
<span class="line">196</span>
<span class="line">197</span>
<span class="line">198</span>
<span class="line">199</span>
<span class="line">200</span>
<span class="line">201</span>
<span class="line">202</span>
<span class="line">203</span>
<span class="line">204</span>
<span class="line">205</span>
<span class="line">206</span>
<span class="line">207</span>
<span class="line">208</span>
<span class="line">209</span>
<span class="line">210</span>
<span class="line">211</span>
<span class="line">212</span>
<span class="line">213</span>
<span class="line">214</span>
<span class="line">215</span>
<span class="line">216</span>
<span class="line">217</span>
<span class="line">218</span>
<span class="line">219</span>
<span class="line">220</span>
<span class="line">221</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> qr = <span class="built_in">require</span>(<span class="string">"qrencode"</span>)</span>
<span class="line"><span class="keyword">local</span> qr_cache = ngx.shared.qr_cache;</span>
<span class="line"><span class="keyword">local</span> share_img_file_cache = ngx.shared.share_img_file_cache</span>
<span class="line"><span class="keyword">local</span> imgages_root_dir = ngx.var.image_root .. <span class="string">"/images/"</span></span>
<span class="line"><span class="keyword">local</span> img_file_suffix = <span class="string">".png"</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- config</span></span>
<span class="line"><span class="keyword">local</span> image_sizes = &#123; <span class="string">"640x640"</span>, <span class="string">"320x320"</span>, <span class="string">"124x124"</span>, <span class="string">"140x140"</span>, <span class="string">"64x64"</span>, <span class="string">"60x60"</span>, <span class="string">"32x32"</span>, <span class="string">"0x0"</span> &#125;</span>
<span class="line"></span>
<span class="line"><span class="comment">-- 字符串分隔方法</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string:split</span><span class="params">(sep)</span></span></span>
<span class="line">	<span class="keyword">local</span> sep, fields = sep <span class="keyword">or</span> <span class="string">":"</span>, &#123;&#125;</span>
<span class="line">	<span class="keyword">local</span> pattern = <span class="built_in">string</span>.format(<span class="string">"([^%s]+)"</span>, sep)</span>
<span class="line">	self:gsub(pattern, <span class="function"><span class="keyword">function</span> <span class="params">(c)</span></span> fields[#fields + <span class="number">1</span>] = c <span class="keyword">end</span>)</span>
<span class="line">	<span class="keyword">return</span> fields</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- parse uri</span></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseUri</span><span class="params">(uri)</span></span></span>
<span class="line"></span>
<span class="line">	<span class="keyword">local</span> _, _, name, ext, size = <span class="built_in">string</span>.find(uri, <span class="string">"(.+)(%..+)!(%d+x%d+)"</span>)</span>
<span class="line"></span>
<span class="line">	<span class="comment">--ngx.header.content_type = "text/plain";</span></span>
<span class="line"></span>
<span class="line">	<span class="comment">--ngx.say(name,size);</span></span>
<span class="line"></span>
<span class="line">	<span class="keyword">if</span> name <span class="keyword">and</span> size <span class="keyword">and</span> ext <span class="keyword">then</span></span>
<span class="line">		<span class="keyword">return</span> ngx.var.image_root .. name .. ext, size</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">		<span class="keyword">return</span> <span class="string">""</span>, <span class="string">""</span></span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileExists</span><span class="params">(name)</span></span></span>
<span class="line">	<span class="keyword">local</span> f, msg = <span class="built_in">io</span>.open(name, <span class="string">"r"</span>)</span>
<span class="line">	<span class="keyword">if</span> f ~= <span class="keyword">nil</span> <span class="keyword">then</span></span>
<span class="line">		<span class="built_in">io</span>.close(f)</span>
<span class="line">		<span class="keyword">return</span> <span class="keyword">true</span></span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">		ngx.log(ngx.ERR, msg)</span>
<span class="line">		<span class="keyword">return</span> <span class="keyword">false</span></span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeExists</span><span class="params">(size)</span></span></span>
<span class="line">	<span class="keyword">for</span> _, value <span class="keyword">in</span> <span class="built_in">pairs</span>(image_sizes) <span class="keyword">do</span></span>
<span class="line">		<span class="keyword">if</span> value == size <span class="keyword">then</span></span>
<span class="line">			<span class="keyword">return</span> <span class="keyword">true</span></span>
<span class="line">		<span class="keyword">end</span></span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line">	<span class="keyword">return</span> <span class="keyword">false</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 返回图片</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">response_image</span><span class="params">(img_file_path)</span></span></span>
<span class="line">	ngx.header.content_type = <span class="string">"image/jpg"</span>;</span>
<span class="line"></span>
<span class="line">	<span class="keyword">local</span> f = <span class="built_in">io</span>.open(img_file_path, <span class="string">"rb"</span>)</span>
<span class="line">	<span class="keyword">local</span> content = f:read(<span class="string">"*all"</span>)</span>
<span class="line">	ngx.<span class="built_in">print</span>(content)</span>
<span class="line">	f:close()</span>
<span class="line">	<span class="keyword">return</span> ngx.exit(ngx.OK)</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 返回图片, 是二进制</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">response_image_bin</span><span class="params">(img_bin)</span></span></span>
<span class="line">	ngx.header.content_type = <span class="string">"image/jpg"</span>;</span>
<span class="line">	ngx.<span class="built_in">print</span>(img_bin)</span>
<span class="line">	<span class="comment">-- ngx.flush()</span></span>
<span class="line">	<span class="keyword">return</span> ngx.exit(ngx.HTTP_OK)</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 缓存生成的图片</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cache_img_bin</span><span class="params">(cache_key, img_file_path)</span></span></span>
<span class="line">	<span class="keyword">local</span> f = <span class="built_in">io</span>.open(img_file_path, <span class="string">"rb"</span>)</span>
<span class="line">	<span class="keyword">local</span> content = f:read(<span class="string">"*all"</span>)</span>
<span class="line">	share_img_file_cache[cache_key] = content</span>
<span class="line">	f:close()</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 图片大小转化</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resize_imgage</span><span class="params">(image_file, width_height)</span></span></span>
<span class="line">	<span class="keyword">local</span> src_image_path = imgages_root_dir .. image_file</span>
<span class="line">	<span class="keyword">local</span> target_image_path = imgages_root_dir .. image_file:split(<span class="string">"."</span>)[<span class="number">1</span>] .. <span class="string">"_"</span> .. img_file_suffix</span>
<span class="line">	<span class="keyword">local</span> command = <span class="built_in">table</span>.concat(</span>
<span class="line">		&#123;</span>
<span class="line">			ngx.var.convert_bin,</span>
<span class="line">			<span class="string">"-resize"</span>,</span>
<span class="line">			width_height,</span>
<span class="line">			src_image_path,</span>
<span class="line">			target_image_path</span>
<span class="line">		&#125;,</span>
<span class="line">		<span class="string">" "</span></span>
<span class="line">	)</span>
<span class="line">	<span class="comment">-- 进行图片处理</span></span>
<span class="line">	<span class="built_in">os</span>.execute(command)</span>
<span class="line">	<span class="keyword">return</span> target_image_path</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 生成二维码图片 - 二进制流</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_qr_code_bin</span><span class="params">(content)</span></span></span>
<span class="line">	<span class="keyword">local</span> qr_code_bin = qr &#123;</span>
<span class="line">		text=content,</span>
<span class="line">		level=<span class="string">"L"</span>,</span>
<span class="line">		kanji=<span class="keyword">false</span>,</span>
<span class="line">		ansi=<span class="keyword">false</span>,</span>
<span class="line">		size=<span class="number">4</span>,</span>
<span class="line">		margin=<span class="number">2</span>,</span>
<span class="line">		symversion=<span class="number">0</span>,</span>
<span class="line">		dpi=<span class="number">78</span>,</span>
<span class="line">		casesensitive=<span class="keyword">true</span>,</span>
<span class="line">		foreground=<span class="string">"000000"</span>,</span>
<span class="line">		background=<span class="string">"FFFFFF"</span></span>
<span class="line">	&#125;</span>
<span class="line">	<span class="keyword">return</span> qr_code_bin</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 生成二维码图片文件</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gen_qr_code_file</span><span class="params">(qr_file_name, qr_code_bin)</span></span></span>
<span class="line">	<span class="keyword">local</span> full_qr_file_path = imgages_root_dir .. qr_file_name</span>
<span class="line">	file = <span class="built_in">io</span>.open(full_qr_file_path, <span class="string">"wb"</span>)</span>
<span class="line">	<span class="built_in">io</span>.output(file)</span>
<span class="line">	<span class="built_in">io</span>.write(qr_code_bin)</span>
<span class="line">	<span class="built_in">io</span>.close(file)</span>
<span class="line">	<span class="comment">-- 缩放到固定大小</span></span>
<span class="line">	<span class="comment">-- resize_imgage(qr_file_name, "120x120")</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 返回指定内容的二维码文件</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_qr_file</span><span class="params">(content)</span></span></span>
<span class="line">	<span class="keyword">local</span> qr_md5 = ngx.md5(content)</span>
<span class="line"></span>
<span class="line">	<span class="keyword">if</span> qr_cache[qr_md5] ~= <span class="keyword">nil</span></span>
<span class="line">	<span class="keyword">then</span></span>
<span class="line">		<span class="keyword">return</span> qr_cache[qr_md5]</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">		<span class="keyword">local</span> qr_file_name = qr_md5 .. img_file_suffix</span>
<span class="line">		<span class="keyword">local</span> qr_code_bin = gen_qr_code_bin(content)</span>
<span class="line">		gen_qr_code_file(qr_file_name, qr_code_bin)</span>
<span class="line"></span>
<span class="line">		qr_cache[qr_md5] = qr_file_name</span>
<span class="line">		<span class="keyword">return</span> qr_file_name</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 获取生成二维码的内容</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_qr_code_content</span><span class="params">()</span></span></span>
<span class="line">	<span class="comment">-- 解析 body 参数之前一定要先读取 body</span></span>
<span class="line">	<span class="comment">--	ngx.req.read_body()</span></span>
<span class="line">	<span class="comment">--	local arg = ngx.req.get_post_args()</span></span>
<span class="line">	<span class="comment">--	for k,v in pairs(arg) do</span></span>
<span class="line">	<span class="comment">--		ngx.say("[POST] key:", k, " v:", v)</span></span>
<span class="line">	<span class="comment">--	end</span></span>
<span class="line"></span>
<span class="line">	<span class="keyword">local</span> args = ngx.req.get_uri_args()</span>
<span class="line">	<span class="keyword">local</span> text = args[<span class="string">'url'</span>]</span>
<span class="line">	<span class="keyword">return</span> text</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">--图片合成</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose_img</span><span class="params">(bg_img, fg_img, result_img)</span></span></span>
<span class="line">	<span class="keyword">local</span> command = <span class="built_in">table</span>.concat(</span>
<span class="line">		&#123;</span>
<span class="line">			ngx.var.convert_bin,</span>
<span class="line">			bg_img,</span>
<span class="line">			<span class="string">"+profile '*'"</span>,</span>
<span class="line">			<span class="string">"-quality 75%"</span>,</span>
<span class="line">			<span class="string">"-strip"</span>,</span>
<span class="line">			<span class="string">"-gravity northwest"</span>,</span>
<span class="line">			<span class="string">"-compose over "</span> .. fg_img,</span>
<span class="line">			<span class="string">"-geometry +500+525"</span>,</span>
<span class="line">			<span class="string">"-composite -compress BZip"</span>,</span>
<span class="line">			result_img</span>
<span class="line">		&#125;,</span>
<span class="line">		<span class="string">" "</span></span>
<span class="line">	)</span>
<span class="line">	<span class="comment">-- ngx.log(ngx.ERR, command)</span></span>
<span class="line">	<span class="comment">-- 进行图片处理</span></span>
<span class="line">	<span class="built_in">os</span>.execute(command)</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 图片添加二维码，文字水印</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose_img</span><span class="params">()</span></span></span>
<span class="line">	<span class="keyword">local</span> text = get_qr_code_content()</span>
<span class="line">	<span class="keyword">if</span> text == <span class="keyword">nil</span> <span class="keyword">or</span> text == <span class="string">""</span> <span class="keyword">then</span></span>
<span class="line">		ngx.header.content_type = <span class="string">"text/plain"</span></span>
<span class="line">		ngx.say(<span class="string">'need a text param'</span>)</span>
<span class="line">		<span class="keyword">return</span> ngx.exit(ngx.OK)</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line">	<span class="comment">--ngx.log(ngx.ERR, text)</span></span>
<span class="line"></span>
<span class="line">	<span class="keyword">local</span> sub_uris = ngx.var.uri:split(<span class="string">"/"</span>)</span>
<span class="line">	<span class="keyword">local</span> file_name = sub_uris[<span class="built_in">table</span>.getn(sub_uris)]</span>
<span class="line"></span>
<span class="line">	ori_filename = ngx.var.image_root .. ngx.var.uri</span>
<span class="line">	<span class="keyword">if</span> fileExists(ori_filename) == <span class="keyword">false</span> <span class="keyword">then</span></span>
<span class="line">		<span class="keyword">return</span> ngx.exit(<span class="number">404</span>)</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"></span>
<span class="line">	ngx.header.content_type = <span class="string">"image/png"</span></span>
<span class="line"></span>
<span class="line">	<span class="comment">-- 生成二维码</span></span>
<span class="line">	<span class="keyword">local</span> qr_code_file = imgages_root_dir .. get_qr_file(text)</span>
<span class="line">	<span class="keyword">local</span> result_img = ngx.md5(text) .. <span class="string">"_res_"</span> .. img_file_suffix</span>
<span class="line">	<span class="keyword">local</span> result_file = imgages_root_dir .. result_img</span>
<span class="line"></span>
<span class="line">	<span class="keyword">if</span> share_img_file_cache[result_img] ~= <span class="keyword">nil</span></span>
<span class="line">	<span class="keyword">then</span></span>
<span class="line">			<span class="comment">-- ngx.log(ngx.ERR, "from cache")</span></span>
<span class="line">			<span class="keyword">return</span> response_image_bin(share_img_file_cache[result_img])</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"></span>
<span class="line">	<span class="comment">-- ngx.exit(ngx.OK)</span></span>
<span class="line">	compose_img(ori_filename, qr_code_file, result_file)</span>
<span class="line">	cache_img_bin(result_img, result_file)</span>
<span class="line"></span>
<span class="line">	response_image(result_file)</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line">compose_img()</span>
</pre></td></tr></table></figure>
<h3 id="方案二的优化和扩展"><a href="#方案二的优化和扩展" class="headerlink" title="方案二的优化和扩展"></a>方案二的优化和扩展</h3><p>1.生成图片的缓存可以通过在openresty前面添加专门的缓存服务器(Openresty，varnish)。<br>2.生成的分析图片可以通过CDN进行分发，这样用户访问的速度更快。<br>3.合成图片的大小可以进一步压缩。目前合成的图片偏大。<br>4.通过这个demo，我们可以进一步丰富功能，只要是ImageMagic支持的功能，理论上都可以实现。</p>
<h3 id="环境的安装配置"><a href="#环境的安装配置" class="headerlink" title="环境的安装配置"></a>环境的安装配置</h3><h4 id="Openresy安装"><a href="#Openresy安装" class="headerlink" title="Openresy安装"></a>Openresy安装</h4><p>请参考:<a href="http://openresty.org/en/installation.html" target="_blank" rel="external">http://openresty.org/en/installation.html</a></p>
<h4 id="二维码生成库libqrencode安装"><a href="#二维码生成库libqrencode安装" class="headerlink" title="二维码生成库libqrencode安装"></a>二维码生成库libqrencode安装</h4><p>ubuntu： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">sudo apt-get install libqrencode-dev libpng12-dev</span>
</pre></td></tr></table></figure>
<p>CentOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
</pre></td><td class="code"><pre><span class="line">yum install libpng-devel</span>
<span class="line">wget http://ftp.riken.jp/Linux/centos/7/os/x86_64/Packages/qrencode-devel-3.4.1-3.el7.x86_64.rpm</span>
<span class="line">rpm -ivh qrencode-devel-3.4.1-3.el7.x86_64.rpm</span>
</pre></td></tr></table></figure>
<p>MacOS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">brew install libqrencode</span>
</pre></td></tr></table></figure>
<p>安装Lua扩展库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line">git clone https://github.com/vincascm/qrencode</span>
<span class="line">make &amp;&amp; make install</span>
</pre></td></tr></table></figure>
<p><code>make test</code>如果能成功，控制台会显示一个二维码。</p>
<p>下面是一个生成二维码的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
</pre></td><td class="code"><pre><span class="line">server &#123;</span>
<span class="line"></span>
<span class="line">   listen 8080;</span>
<span class="line">   server_name img.papa.com.cn;</span>
<span class="line"></span>
<span class="line">   location / &#123;</span>
<span class="line">        default_type image/png;</span>
<span class="line">        content_by_lua_block &#123;</span>
<span class="line">              local qr = require(&quot;qrencode&quot;)</span>
<span class="line">              local args = ngx.req.get_uri_args()</span>
<span class="line">              local text = args.text</span>
<span class="line"></span>
<span class="line">              if text == nil or text== &quot;&quot; then</span>
<span class="line">                      ngx.say(&apos;need a text param&apos;)</span>
<span class="line">                      ngx.exit(404)</span>
<span class="line">              end</span>
<span class="line"></span>
<span class="line">              ngx.say(qr &#123;</span>
<span class="line">                      text=text,</span>
<span class="line">                      level=&quot;L&quot;,</span>
<span class="line">                      kanji=false,</span>
<span class="line">                      ansi=false,</span>
<span class="line">                      size=4,</span>
<span class="line">                      margin=2,</span>
<span class="line">                      symversion=0,</span>
<span class="line">                      dpi=78,</span>
<span class="line">                      casesensitive=true,</span>
<span class="line">                      foreground=&quot;000000&quot;,</span>
<span class="line">                      background=&quot;FFFFFF&quot;</span>
<span class="line">              &#125;)</span>
<span class="line">           &#125;</span>
<span class="line">           add_header Expires &quot;Fri, 01 Jan 1980 00:00:00 GMT&quot;;    </span>
<span class="line">           add_header Pragma &quot;no-cache&quot;;    </span>
<span class="line">           add_header Cache-Control &quot;no-cache, max-age=0, must-revalidate&quot;;</span>
<span class="line">           #add_header Content-Type image/png;</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在配置真个环境的过程中，有一下几点需要注意：</p>
<p>1.lua的版本最好使用5.1，否则会有各种问题。<br>2.二维码生成的配置中<code>ansi=false</code>，否则在浏览器不能显示。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/vincascm/qrencode" target="_blank" rel="external">https://github.com/vincascm/qrencode</a></p>
<p><a href="http://blog.csdn.net/orangleliu/article/details/64912578" target="_blank" rel="external">基于 OpenResty 的二维码生成方案</a></p>
<p><a href="https://www.jianshu.com/p/62dc0b601e91" target="_blank" rel="external">Lua包管理工具Luarocks详解</a></p>
<p><a href="http://www.hopesoft.org/blog/?p=1188" target="_blank" rel="external">OpenResty(Nginx)+Lua+GraphicsMagick实现缩略图功能</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;有个项目的需要是：用户通过给好友分享带有二维码的图片，好友扫码或在微信中识别二维码来领取分享的礼物。要实现这个需要，能想到的解决方案有两个：&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://leokongwq.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Openresy" scheme="https://leokongwq.github.io/tags/Openresy/"/>
    
      <category term="Nginx" scheme="https://leokongwq.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件系统调用算法</title>
    <link href="https://leokongwq.github.io/2018/02/06/linux-file-system-schedule.html"/>
    <id>https://leokongwq.github.io/2018/02/06/linux-file-system-schedule.html</id>
    <published>2018-02-06T12:41:43.000Z</published>
    <updated>2018-02-08T13:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自：<a href="https://www.ibm.com/developerworks/cn/linux/l-lo-io-scheduler-optimize-performance/index.html" target="_blank" rel="external">调整 Linux I/O 调度器优化系统性能</a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>查看RocketMQ文档的过程中，提到了通过修改IO调度算法来提高RocketMQ的性能。网上找了一些文章，感觉IBM这个文章不错。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前言<br>Linux I/O 调度器是Linux内核中的一个组成部分，用户可以通过调整这个调度器来优化系统性能。本文首先介绍Linux I/O 调度器的结构，然后介绍如何根据不同的存储器来设置Linux I/O 调度器从而达到优化系统性能。</p>
<a id="more"></a>
<h3 id="Linux-I-O-系统简介"><a href="#Linux-I-O-系统简介" class="headerlink" title="Linux I/O 系统简介"></a>Linux I/O 系统简介</h3><p>Linux I/O调度器（Linux I/O Scheduler）是LinuxI/O体系的一个组件，它介于通用块层和块设备驱动程序之间。如图 1 所示。</p>
<p>图1 Linux I/O调度器介于通用块层和块设备驱动程序之间</p>
<img src="/2018/02/06/linux-file-system-schedule/image001.png" alt="image001.png" title="">
<p>当Linux内核组件要读写一些数据时，并不是请求一发出，内核便立即执行该请求，而是将其推迟执行。当传输一个新数据块时，内核需要检查它能否通过。Linux IO调度程序是介于通用块层和块设备驱动程序之间，所以它接收来自通用块层的请求，试图合并请求，并找到最合适的请求下发到块设备驱动程序中。之后块设备驱动程序会调用一个函数来响应这个请求。</p>
<p>Linux整体I/O体系可以分为七层，它们分别是：</p>
<ol>
<li>VFS虚拟文件系统：内核要跟多种文件系统打交道，内核抽象了这VFS，专门用来适配各种文件系统，并对外提供统一操作接口。</li>
<li>磁盘缓存：磁盘缓存是一种将磁盘上的一些数据保留着RAM中的软件机制，这使得对这部分数据的访问可以得到更快的响应。磁盘缓存在Linux中有三种类型：Dentry cache ，Page cache ， Buffer cache。</li>
<li>映射层：内核从块设备上读取数据，这样内核就必须确定数据在物理设备上的位置，这由映射层（Mapping Layer）来完成。</li>
<li>通用块层：由于绝大多数情况的I/O操作是跟块设备打交道，所以Linux在此提供了一个类似vfs层的块设备操作抽象层。下层对接各种不同属性的块设备，对上提供统一的Block IO请求标准。</li>
<li>I/O调度层：大多数的块设备都是磁盘设备，所以有必要根据这类设备的特点以及应用特点来设置一些不同的调度器。</li>
<li>块设备驱动：块设备驱动对外提供高级的设备操作接口。</li>
<li>物理硬盘：这层就是具体的物理设备。</li>
</ol>
<h3 id="调度算法有哪些？"><a href="#调度算法有哪些？" class="headerlink" title="调度算法有哪些？"></a>调度算法有哪些？</h3><p>Linux 从2.4内核开始支持I/O调度器,到目前为止有5种类型：Linux 2.4内核的 Linus Elevator、Linux 2.6内核的 Deadline、 Anticipatory、 CFQ、 Noop，其中Anticipatory从Linux 2.6.33版本后被删除了。目前主流的Linux发行版本使用Deadline、 CFQ、 Noop三种I/O调度器。下面依次简单介绍：</p>
<h4 id="1-Linus-Elevator"><a href="#1-Linus-Elevator" class="headerlink" title="1 Linus Elevator"></a>1 Linus Elevator</h4><p>在2.4 内核中它是第一种I/O调度器。它的主要作用是为每个设备维护一个查询请求，当内核收到一个新请求时，如果能合并就合并。如果不能合并，就会尝试排序。如果既不能合并，也没有合适的位置插入，就放到请求队列的最后。</p>
<h4 id="2-NOOP"><a href="#2-NOOP" class="headerlink" title="2 NOOP"></a>2 NOOP</h4><p>NOOP全称<code>No Operation</code>,中文名称电梯式调度器，该算法实现了最简单的FIFO队列，所有I/O请求大致按照先来后到的顺序进行操作。NOOP实现了一个简单的FIFO队列,它像电梯的工作主法一样对I/O请求进行组织。它是基于先入先出（FIFO）队列概念的 Linux 内核里最简单的I/O 调度器。此调度程序最适合于固态硬盘。NOOP的工作流程如图4 所示。</p>
<p>图4 NOOP的工作流程</p>

<h4 id="3-CFQ"><a href="#3-CFQ" class="headerlink" title="3 CFQ"></a>3 CFQ</h4><p>CFQ全称Completely Fair Scheduler ，中文名称完全公平调度器，它是现在许多 Linux 发行版的默认调度器，CFQ是内核默认选择的I/O调度器。它将由进程提交的同步请求放到多个进程队列中，然后为每个队列分配时间片以访问磁盘。对于通用的服务器是最好的选择,CFQ均匀地分布对I/O带宽的访问。CFQ为每个进程和线程,单独创建一个队列来管理该进程所产生的请求,以此来保证每个进程都能被很好的分配到I/O带宽，I/O调度器每次执行一个进程的4次请求。该算法的特点是按照I/O请求的地址进行排序，而不是按照先来后到的顺序来进行响应。简单来说就是给所有同步进程分配时间片，然后才排队访问磁盘，CFQ的工作流程如图 3 所示 。</p>
<p>图3 CFQ的工作流程</p>

<p>Anticipatory的中文含义是”预料的，预想的”，顾名思义有个I/O发生的时候，如果又有进程请求I/O操作，则将产生一个默认的6毫秒猜测时间，猜测下一个进程请求I/O是要干什么的。这个I/O调度器对读操作优化服务时间，在提供一个I/O的时候进行短时间等待，使进程能够提交到另外的I/O。Anticipatory算法从Linux 2.6.33版本后被删除了，因为使用CFQ通过配置也能达到Anticipatory的效果。</p>
<h4 id="4-DeadLine"><a href="#4-DeadLine" class="headerlink" title="4 DeadLine"></a>4 DeadLine</h4><p>Deadline翻译成中文是截止时间调度器，是对Linus Elevator的一种改进，它避免有些请求太长时间不能被处理。另外可以区分对待读操作和写操作。DEADLINE额外分别为读I/O和写I/O提供了FIFO队列。Deadline的工作流程如图 2 所示。</p>
<p>图2 Deadline的工作流程</p>
<img src="/2018/02/06/linux-file-system-schedule/image002.jpg" alt="image002.jpg" title="">
<h4 id="5-ANTICIPATORY"><a href="#5-ANTICIPATORY" class="headerlink" title="5 ANTICIPATORY"></a>5 ANTICIPATORY</h4><p>CFQ和DEADLINE考虑的焦点在于满足零散IO请求上。对于连续的IO请求，比如顺序读，并没有做优化。为了满足随机IO和顺序IO混合的场景，Linux还支持ANTICIPATORY调度算法。ANTICIPATORY的在DEADLINE的基础上，为每个读IO都设置了6ms的等待时间窗口。如果在这6ms内OS收到了相邻位置的读IO请求，就可以立即满足。</p>
<p>本质上与Deadline一样，但在最后一次读操作后，要等待6ms，才能继续进行对其它I/O请求进行调度。可以从应用程序中预订一个新的读请求，改进读操作的执行，但以一些写操作为代价。它会在每个6ms中插入新的I/O操作，而会将一些小写入流合并成一个大写入流，用写入延时换取最大的写入吞吐量。AS适合于写入较多的环境，比如文件服务器，但对对数据库环境表现很差。</p>
<h3 id="I-O调度器的选择"><a href="#I-O调度器的选择" class="headerlink" title="I/O调度器的选择"></a>I/O调度器的选择</h3><p>目前主流Linux发行版本使用三种I/O调度器：DeadLine、CFQ、NOOP，通常来说Deadline适用于大多数环境,特别是写入较多的文件服务器，从原理上看，DeadLine是一种以提高机械硬盘吞吐量为思考出发点的调度算法，尽量保证在有I/O请求达到最终期限的时候进行调度，非常适合业务比较单一并且I/O压力比较重的业务，比如Web服务器，数据库应用等。CFQ 为所有进程分配等量的带宽,适用于有大量进程的多用户系统，CFQ是一种比较通用的调度算法，它是一种以进程为出发点考虑的调度算法，保证大家尽量公平,为所有进程分配等量的带宽,适合于桌面多任务及多媒体应用。NOOP 对于闪存设备和嵌入式系统是最好的选择。对于固态硬盘来说使用NOOP是最好的，DeadLine次之，而CFQ效率最低。</p>
<p>查看Linux系统的 I/O调度器<br>查看Linux系统的I/O调度器一般分成两个部分，一个是查看Linux系统整体使用的I/O调度器，另一个是查看某磁盘使用的I/O调度器。</p>
<p>查看当前系统支持的I/O调度器，使用如下命令：</p>
<p>清单 1. 查看当前系统支持的I/O调度器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
</pre></td><td class="code"><pre><span class="line"># dmesg | grep -i scheduler</span>
<span class="line">[    1.508820] io scheduler noop registered</span>
<span class="line">[    1.508827] io scheduler deadline registered</span>
<span class="line">[    1.508850] io scheduler cfq registered (default)</span>
</pre></td></tr></table></figure>
<p>清单1的代码显示cfq是目前的I/O调度器。</p>
<p>查看某块硬盘的IO调度算法I/O调度器，使用如下命令：</p>
<p>清单2. 查看一个硬盘使用的I/O调度器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
</pre></td><td class="code"><pre><span class="line"># cat /sys/block/sda/queue/scheduler</span>
<span class="line">noop deadline [cfq]</span>
</pre></td></tr></table></figure>
<p>清单2显示当前使用的调度器是cfq，就是括号括起来的那一个。</p>
<h3 id="修改Linux系统的-I-O调度器"><a href="#修改Linux系统的-I-O调度器" class="headerlink" title="修改Linux系统的 I/O调度器"></a>修改Linux系统的 I/O调度器</h3><p>修改Linux系统的 I/O调度器有三种方法，分别是使用shell命令、使用grubby命令或者修改grub配置文件。下面依次介绍：</p>
<h4 id="使用shell命令"><a href="#使用shell命令" class="headerlink" title="使用shell命令"></a>使用shell命令</h4><p>Linux下更改的I/O调度器很简单。不需要更新内核，可以使用shell命令修改：</p>
<p>清单3. 查使用shell命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line">#echo noop &gt; /sys/block/sdb/queue/scheduler</span>
</pre></td></tr></table></figure>
<p>清单3的命令把noop设置为一个磁盘的I/O调度器，你可以随时更改而无需重启计算机。</p>
<h4 id="永久修改默认的I-O调度器"><a href="#永久修改默认的I-O调度器" class="headerlink" title="永久修改默认的I/O调度器"></a>永久修改默认的I/O调度器</h4><p>使用shell命令修改I/O调度器，只是临时修改，系统重启后，修改的调度器就会失效，要想修改默认的调度器，有两种方法使用grubby命令或者直接编辑grub配置文件。</p>
<p>使用grubby命令</p>
<p>例如需要把I/O调度器从cfq调整成 DeadLine ，命令如下：</p>
<p>清单4.使用grubby命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
</pre></td><td class="code"><pre><span class="line"># grubby --grub --update-kernel=ALL --args=&quot;elevator=deadline&quot;</span>
</pre></td></tr></table></figure>
<p>清单4的命令，通过设置内核加载参数, 这样当机器重启的时候，系统自动把所有设备的 I/O调度器变成 DeadLine 。</p>
<h4 id="使用编辑器修改配置文件"><a href="#使用编辑器修改配置文件" class="headerlink" title="使用编辑器修改配置文件"></a>使用编辑器修改配置文件</h4><p>也可以直接编辑grub的配置文件 ，通过修改grub配置文件，系统自动把所有设备的 I/O调度器变成cfq。操作过程如下：</p>
<p>清单5 使用vi编辑器修改grub配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line">#vi cat /etc/default/grub</span>
<span class="line">#修改第五行，在行尾添加#</span>
<span class="line">elevator= cfq</span>
<span class="line"> </span>
<span class="line">然后保存文件，重新编译配置文件，</span>
<span class="line">#grub2-mkconfig -o /boot/grub2/grub.cfg</span>
</pre></td></tr></table></figure>
<p>重新启动计算机系统即可。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Linux I/O调度器是 Linux 内核中的一个组成部分，用户可以通过根据不同的存储器来设置 Linux I/O 调度器从而达到优化系统性能。 一般来说 NOOP 调度器最适合于固态硬盘，DeadLine 调度器适用于写入较多的文件服务器，比如Web服务器，数据库应用等，而CFQ 调度器适合于桌面多任务及媒体应用。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://access.redhat.com/solutions/109223" target="_blank" rel="external">红帽子知识库文章：How to use the Noop I/O Scheduler</a></p>
<p><a href="http://product.china-pub.com/36767" target="_blank" rel="external">深入理解Linux内核(第三版) 原名: Understanding the Linux Kernel</a></p>
<p><a href="http://www.361way.com/linux-iosched/4800.html" target="_blank" rel="external">RH442之linux IO调度（电梯算法）</a></p>
<p><a href="http://www.cnblogs.com/cobbliu/p/5389556.html" target="_blank" rel="external">Linux IO Scheduler（Linux IO 调度器）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转自：&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-lo-io-scheduler-optimize-performance/index.html&quot;&gt;调整 Linux I/O 调度器优化系统性能&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;查看RocketMQ文档的过程中，提到了通过修改IO调度算法来提高RocketMQ的性能。网上找了一些文章，感觉IBM这个文章不错。&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前言&lt;br&gt;Linux I/O 调度器是Linux内核中的一个组成部分，用户可以通过调整这个调度器来优化系统性能。本文首先介绍Linux I/O 调度器的结构，然后介绍如何根据不同的存储器来设置Linux I/O 调度器从而达到优化系统性能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://leokongwq.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>基于openresty的后端应用健康检查-动态上下线</title>
    <link href="https://leokongwq.github.io/2018/01/31/openresty-health-check-dynamic-up-down.html"/>
    <id>https://leokongwq.github.io/2018/01/31/openresty-health-check-dynamic-up-down.html</id>
    <published>2018-01-31T12:18:25.000Z</published>
    <updated>2018-02-01T01:49:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为了保证在应用发布期间不间断用户的请求，我们需要实现后端服务的动态上下线。同时为了在OPS管理台能看到某个应用各个Server结点的健康状态，我们需要后端节点的健康检查功能。基于openresty，这些功能都可以实现。</p>
<a id="more"></a>
<h3 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h3><p>实现健康检查，可以通过<code>lua-resty-upstream-healthcheck</code>来实现。</p>
<p>具体配置如下：</p>
<figure class="highlight"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
</pre></td><td class="code"><pre><span class="line">## 指定共享内存</span>
<span class="line">lua_shared_dict healthcheck 1m;</span>
<span class="line"></span>
<span class="line">## 在worker初始化过程中，启动定时器，进行后端结点的检查</span>
<span class="line">init_worker_by_lua_block &#123;</span>
<span class="line">   local hc = require "resty.upstream.healthcheck"</span>
<span class="line">   local ok, err = hc.spawn_checker &#123;</span>
<span class="line">       -- shm 表示共享内存区的名称，</span>
<span class="line">       shm = "healthcheck",</span>
<span class="line">       -- type 表示健康检查的类型， HTTP or TCP （目前只支持http）</span>
<span class="line">       type = "http",    </span>
<span class="line">       -- upstream 指定 upstream 配置的名称   </span>
<span class="line">       upstream = "tomcat",</span>
<span class="line">       -- 如果是http类型，指定健康检查发送的请求的URL</span>
<span class="line">       http_req = "GET /health.txt HTTP/1.0\r\nHost: tomcat\r\n\r\n",</span>
<span class="line">       -- 请求间隔时间，默认是 1 秒。最小值为 2毫秒</span>
<span class="line">       interval = 2000,</span>
<span class="line">       -- 请求的超时时间。 默认值为：1000 毫秒</span>
<span class="line">       timeout = 5000,</span>
<span class="line">       -- 失败多少次后，将节点标记为down。 默认值为 5</span>
<span class="line">       fall = 3, </span>
<span class="line">       -- 成功多少次后，将节点标记为up。默认值为 2</span>
<span class="line">       rise = 2,</span>
<span class="line">       -- 返回的http状态码，表示应用正常</span>
<span class="line">       valid_statuses = &#123;200, 302&#125;,</span>
<span class="line">       -- 并发度， 默认值为 1</span>
<span class="line">       concurrency = 1,</span>
<span class="line">   &#125;</span>
<span class="line"> </span>
<span class="line">   if not ok then</span>
<span class="line">       ngx.log(ngx.ERR, "=======&gt; failed to spawn health checker: ", err)</span>
<span class="line">       return</span>
<span class="line">   end</span>
<span class="line">&#125;</span>
<span class="line"></span>
<span class="line"># 配置监控检查访问页面</span>
<span class="line">location /server/status &#123;</span>
<span class="line">  access_log off;</span>
<span class="line">  default_type text/plain;</span>
<span class="line">  content_by_lua_block &#123;</span>
<span class="line">      local hc = require "resty.upstream.healthcheck"</span>
<span class="line">      ngx.say("Nginx Worker PID: ", ngx.worker.pid())</span>
<span class="line">      ngx.print(hc.status_page())</span>
<span class="line">  &#125;</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="节点上下线"><a href="#节点上下线" class="headerlink" title="节点上下线"></a>节点上下线</h3><p>该功能利用了<code>lua-upstream-nginx-module</code>模块来实现，提供REST分割API来获取upstream的信息，上下线指定upstream下的server。具体看下面的代码：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
</pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 upstream管理地址</span></span>
<span class="line"><span class="attribute">location</span> /upstreams &#123;</span>
<span class="line">  <span class="attribute">default_type</span> text/plain;</span>
<span class="line">  <span class="attribute">content_by_lua_file</span> /Users/leo/workspace/lua/upstream.lua;</span>
<span class="line"></span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<p>upstreams http API lua 代码:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span>
<span class="line"><span class="keyword">local</span> hc = <span class="built_in">require</span> <span class="string">"resty.upstream.healthcheck"</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">local</span> concat = <span class="built_in">table</span>.concat</span>
<span class="line"><span class="keyword">local</span> upstream = <span class="built_in">require</span> <span class="string">"ngx.upstream"</span></span>
<span class="line"><span class="keyword">local</span> get_servers = upstream.get_servers</span>
<span class="line"><span class="keyword">local</span> get_upstreams = upstream.get_upstreams</span>
<span class="line"><span class="keyword">local</span> get_primary_peers = upstream.get_primary_peers</span>
<span class="line"><span class="keyword">local</span> get_backup_peers = upstream.get_backup_peers</span>
<span class="line"><span class="keyword">local</span> set_peer_down = upstream.set_peer_down</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 字符串分隔方法</span></span>
<span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string:split</span><span class="params">(sep)</span></span>  </span>
<span class="line">	<span class="keyword">local</span> sep, fields = sep <span class="keyword">or</span> <span class="string">":"</span>, &#123;&#125;  </span>
<span class="line">	<span class="keyword">local</span> pattern = <span class="built_in">string</span>.format(<span class="string">"([^%s]+)"</span>, sep)  </span>
<span class="line">	self:gsub(pattern, <span class="function"><span class="keyword">function</span> <span class="params">(c)</span></span> fields[#fields + <span class="number">1</span>] = c <span class="keyword">end</span>)  </span>
<span class="line">	<span class="keyword">return</span> fields  </span>
<span class="line"><span class="keyword">end</span> </span>
<span class="line"></span>
<span class="line"><span class="comment">-- get all upstream config block </span></span>
<span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_all_upstream</span><span class="params">()</span></span></span>
<span class="line">	<span class="keyword">local</span> us = get_upstreams()</span>
<span class="line">	<span class="keyword">local</span> upstreams = &#123;&#125;</span>
<span class="line">	</span>
<span class="line">	<span class="keyword">for</span> _, u <span class="keyword">in</span> <span class="built_in">ipairs</span>(us) <span class="keyword">do</span></span>
<span class="line">		<span class="keyword">local</span> srvs = get_servers(u)</span>
<span class="line">		upstreams[u] = srvs</span>
<span class="line">	<span class="keyword">end</span>		</span>
<span class="line">	</span>
<span class="line">	<span class="keyword">return</span> upstreams	</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 获取某个upstream下的所有Server</span></span>
<span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_servers_by_upstream_name</span><span class="params">(upstream_name)</span></span></span>
<span class="line">	<span class="keyword">local</span> up = get_all_upstream()[upstream_name]</span>
<span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> up <span class="keyword">then</span></span>
<span class="line">		<span class="keyword">return</span> &#123;&#125;</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"></span>
<span class="line">	<span class="keyword">return</span> up	</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 获取所有的 peer</span></span>
<span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_all_peers</span><span class="params">(upstream_name)</span></span></span>
<span class="line">	<span class="keyword">local</span> primary_peers = get_primary_peers(upstream_name)</span>
<span class="line"><span class="comment">--	local backup_peers = get_backup_peers(upstream_name)</span></span>
<span class="line"><span class="comment">--	</span></span>
<span class="line"><span class="comment">--	local primary_cnt = table.getn(primary_peers)</span></span>
<span class="line"><span class="comment">--	local backup_cnt = table.getn(backup_peers)</span></span>
<span class="line"><span class="comment">--		</span></span>
<span class="line"><span class="comment">--	local total = table.getn(primary_peers) + table.getn(backup_peers)</span></span>
<span class="line"><span class="comment">--	local all_peers = &#123;&#125;</span></span>
<span class="line"><span class="comment">--	</span></span>
<span class="line"><span class="comment">--	for i = primary_cnt + 1, total do</span></span>
<span class="line"><span class="comment">--		backup_peers[i - primary_cnt]["backup"] = true</span></span>
<span class="line"><span class="comment">--		table.insert(primary_peers, i, backup_peers[i - primary_cnt])</span></span>
<span class="line"><span class="comment">--	end</span></span>
<span class="line"><span class="comment">--	</span></span>
<span class="line">	<span class="keyword">return</span> primary_peers</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 操作Server节点上下线</span></span>
<span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">op_server</span><span class="params">(upstream_name, server_name, op)</span></span></span>
<span class="line">	<span class="comment">-- ngx.say(cjson.encode(get_all_peers(upstream_name)))</span></span>
<span class="line">	<span class="keyword">local</span> all_peers = get_all_peers(upstream_name)</span>
<span class="line">	<span class="keyword">for</span> i, peer <span class="keyword">in</span> <span class="built_in">ipairs</span>(all_peers) <span class="keyword">do</span> </span>
<span class="line">		<span class="keyword">if</span> peer[<span class="string">"name"</span>] == server_name <span class="keyword">then</span></span>
<span class="line">			target_peer = peer</span>
<span class="line">			<span class="keyword">break</span></span>
<span class="line">		<span class="keyword">end</span></span>
<span class="line">	<span class="keyword">end</span> </span>
<span class="line">	</span>
<span class="line">	<span class="keyword">if</span> target_peer == <span class="keyword">nil</span> <span class="keyword">then</span></span>
<span class="line">		ngx.say(cjson.encode(&#123;code = <span class="string">"E00001"</span>, msg = <span class="string">"error peer name"</span>&#125;))	</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">		<span class="keyword">if</span> op == <span class="string">"down"</span> <span class="keyword">then</span></span>
<span class="line">			down_value = <span class="keyword">true</span></span>
<span class="line">		<span class="keyword">else</span></span>
<span class="line">			down_value = <span class="keyword">false</span></span>
<span class="line">		<span class="keyword">end</span></span>
<span class="line">		</span>
<span class="line">		<span class="keyword">local</span> is_back_up = target_peer[<span class="string">"backup"</span>] <span class="keyword">or</span> <span class="keyword">false</span></span>
<span class="line">		set_peer_down(upstream_name, is_back_up, target_peer[<span class="string">"id"</span>], down_value)		</span>
<span class="line">		ngx.say(cjson.encode(&#123;code = <span class="string">"A00000"</span>, msg = <span class="string">"Success"</span>&#125;))	</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="keyword">local</span> http_method = ngx.req.get_method()</span>
<span class="line"><span class="keyword">local</span> sub_uris = ngx.var.uri:split(<span class="string">"/"</span>)</span>
<span class="line"></span>
<span class="line"><span class="comment">-- 节点上下线</span></span>
<span class="line"><span class="keyword">if</span> <span class="built_in">table</span>.getn(sub_uris) == <span class="number">4</span> <span class="keyword">then</span></span>
<span class="line">	op_server(sub_uris[<span class="number">2</span>], sub_uris[<span class="number">3</span>], sub_uris[<span class="number">4</span>])</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 获取master or backup nodes</span></span>
<span class="line"><span class="keyword">if</span> <span class="built_in">table</span>.getn(sub_uris) == <span class="number">3</span> <span class="keyword">then</span></span>
<span class="line">	<span class="keyword">if</span> sub_uris[<span class="number">3</span>] == <span class="string">"primary"</span> <span class="keyword">then</span></span>
<span class="line">		ngx.say(cjson.encode(get_primary_peers(sub_uris[<span class="number">2</span>])))</span>
<span class="line">	<span class="keyword">else</span></span>
<span class="line">		ngx.say(cjson.encode(get_backup_peers(sub_uris[<span class="number">2</span>])))</span>
<span class="line">	<span class="keyword">end</span></span>
<span class="line">	ngx.exit(ngx.HTTP_OK)</span>
<span class="line"><span class="keyword">end</span></span>
<span class="line"></span>
<span class="line"><span class="comment">-- 获取所有upstream or 指定名称的upstream</span></span>
<span class="line"><span class="keyword">if</span> sub_uris[<span class="number">2</span>] <span class="keyword">then</span></span>
<span class="line">	ngx.say(cjson.encode(get_all_peers(sub_uris[<span class="number">2</span>])))	</span>
<span class="line"><span class="keyword">else</span></span>
<span class="line">	ngx.say(cjson.encode(get_all_upstream()))</span>
<span class="line"><span class="keyword">end</span></span>
</pre></td></tr></table></figure>
<p>提供的API有：</p>
<h4 id="获取所有的upstream的信息"><a href="#获取所有的upstream的信息" class="headerlink" title="获取所有的upstream的信息"></a>获取所有的upstream的信息</h4><p><a href="http://localhost/upstreams" target="_blank" rel="external">http://localhost/upstreams</a> </p>
<h4 id="获取指定upstream的信息"><a href="#获取指定upstream的信息" class="headerlink" title="获取指定upstream的信息"></a>获取指定upstream的信息</h4><p><a href="http://localhost/upstreams/{upstream_name}" target="_blank" rel="external">http://localhost/upstreams/{upstream_name}</a></p>
<h4 id="获取指定upstream下指定server-name的节点信息"><a href="#获取指定upstream下指定server-name的节点信息" class="headerlink" title="获取指定upstream下指定server_name的节点信息"></a>获取指定upstream下指定server_name的节点信息</h4><p><a href="http://localhost/upstreams/{upstream_name}/{server_name}" target="_blank" rel="external">http://localhost/upstreams/{upstream_name}/{server_name}</a></p>
<h4 id="指定upstream下指定server-name节点上下线"><a href="#指定upstream下指定server-name节点上下线" class="headerlink" title="指定upstream下指定server_name节点上下线"></a>指定upstream下指定server_name节点上下线</h4><p><a href="http://localhost/upstreams/{upstream_name}/{server_name}/down" target="_blank" rel="external">http://localhost/upstreams/{upstream_name}/{server_name}/down</a></p>
<p><a href="http://localhost/upstreams/{upstream_name}/{server_name}/up" target="_blank" rel="external">http://localhost/upstreams/{upstream_name}/{server_name}/up</a></p>
<p>有了这些个API，就有了在OPS控制台远程控制节点上下线的能力。通过和发布系统的配合，在节点发布时，先进行下线操作，指定时间间隔（处理完目前的请求，无流量后进行发布）后再发布。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>能不能实现节点平滑的上下线， 一定要用测试结果说话。 下面是一段<a href="http://gatling.io" target="_blank" rel="external">gatling</a>的压测脚本。</p>
<p>以<code>50req/s</code>的速率发送请求，持续时间为30秒。如果整个压测过程中，在动态下线某个节点后，没有出现失败的请求，那就可以说明平滑的上下线是成功的。</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> qiyueorder</span>
<span class="line"></span>
<span class="line"><span class="keyword">import</span> io.gatling.core.<span class="type">Predef</span>._</span>
<span class="line"><span class="keyword">import</span> io.gatling.http.<span class="type">Predef</span>._</span>
<span class="line"><span class="keyword">import</span> scala.concurrent.duration._</span>
<span class="line"></span>
<span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessLimit</span> <span class="keyword">extends</span> <span class="title">Simulation</span> </span>&#123;</span>
<span class="line"></span>
<span class="line">	<span class="keyword">val</span> httpConf = http</span>
<span class="line">		.baseURL(<span class="string">"http://i.vip.iqiyi.com/"</span>)</span>
<span class="line">		.acceptHeader(<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>)</span>
<span class="line">		.doNotTrackHeader(<span class="string">"1"</span>)</span>
<span class="line">		.acceptLanguageHeader(<span class="string">"zh-CN,en;q=0.5"</span>)</span>
<span class="line">		.acceptEncodingHeader(<span class="string">"gzip, deflate"</span>)</span>
<span class="line">		.userAgentHeader(<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:16.0) Gecko/20100101 Firefox/16.0"</span>)</span>
<span class="line"></span>
<span class="line">	 <span class="keyword">val</span> uri = <span class="string">"/pay/h5/paytype.action"</span></span>
<span class="line">	 <span class="keyword">val</span> scn = scenario(<span class="string">"qiyue-api限流组件压测"</span>).exec(http(<span class="string">"queryOrderStat"</span>).get(uri))</span>
<span class="line"></span>
<span class="line">	setUp(</span>
<span class="line">		scn.inject(constantUsersPerSec(<span class="number">50</span>) during(<span class="number">30</span> seconds))</span>
<span class="line">		<span class="comment">//scn.inject(atOnceUsers(50))</span></span>
<span class="line">	).protocols(httpConf)</span>
<span class="line">&#125;</span>
</pre></td></tr></table></figure>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/cubicdaiya/ngx_dynamic_upstream" target="_blank" rel="external">https://github.com/cubicdaiya/ngx_dynamic_upstream</a><br><a href="https://github.com/openresty/lua-upstream-nginx-module" target="_blank" rel="external">https://github.com/openresty/lua-upstream-nginx-module</a><br><a href="https://github.com/openresty/lua-resty-upstream-healthcheck" target="_blank" rel="external">https://github.com/openresty/lua-resty-upstream-healthcheck</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;为了保证在应用发布期间不间断用户的请求，我们需要实现后端服务的动态上下线。同时为了在OPS管理台能看到某个应用各个Server结点的健康状态，我们需要后端节点的健康检查功能。基于openresty，这些功能都可以实现。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://leokongwq.github.io/categories/web/"/>
    
    
      <category term="openresty" scheme="https://leokongwq.github.io/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>TCP状态转化总结</title>
    <link href="https://leokongwq.github.io/2018/01/30/tcp-state-transfer-diagram.html"/>
    <id>https://leokongwq.github.io/2018/01/30/tcp-state-transfer-diagram.html</id>
    <published>2018-01-30T14:30:24.000Z</published>
    <updated>2018-02-06T05:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章转载自：<a href="http://blog.csdn.net/wenqian1991/article/details/39667131" target="_blank" rel="external">TCP的三次握手和四次挥手</a></p>
<h3 id="TCP连接建立过程——三次握手"><a href="#TCP连接建立过程——三次握手" class="headerlink" title="TCP连接建立过程——三次握手"></a>TCP连接建立过程——三次握手</h3><ul>
<li>第一次握手：客户端发送位码为 SYN = 1（SYN 标志位置位），随机产生初始序列号 Seq = J 的数据包到服务器。服务器由 SYN = 1（置位）知道，客户端要求建立联机。</li>
<li>第二次握手：服务器收到请求后要确认联机信息，向客户端发送确认号Ack = （客户端的Seq +1，J+1），SYN = 1，ACK = 1（SYN，ACK 标志位置位），随机产生的序列号 Seq = K 的数据包。</li>
<li>第三次握手：客户端收到后检查 Ack 是否正确，即第一次发送的 Seq +1（J+1），以及位码ACK是否为1。若正确，客户端会再发送 Ack = （服务器端的Seq+1，K+1），ACK = 1，以及序号Seq为服务器确认号J 的确认包。服务器收到后确认之前发送的 Seq（K+1） 值与 ACK= 1 （ACK置位）则连接建立成功。</li>
</ul>
<a id="more"></a>
<p>经过了这三步之后，客户端与服务器端就成功建立起一个 TCP连接。这三个步骤统称为三次握手。</p>
<p>（上面Seq表示序列号，Ack表示确认号，SYN和ACK以及FIN等都是标志位。ACK 被设置为 1表示确认号字段是有效的，如果 ACK为 0，则该段不包含确认信息。SYN 被用于建立连接过程，在连接请求中，SYN = 1 和 ACK = 0 表示该段没有捎带确认字段。连接应答会捎带一个确认，所以应答时会有 SYN= 1 和 ACK= 1。另外发送ACK无需任何代价，所以我们会看到一旦一个连接建立起来，ACK标志总是被置为1）</p>
<img src="/2018/01/30/tcp-state-transfer-diagram/20141003170103720.bmp" alt="20141003170103720.bmp" title="">
<p>从上图可以看出，当客户端调用connect 时，触发了连接请求，向服务器发送了 SYN J包，这时 connect 进入阻塞状态；服务器监听到连接请求，即收到 SYN J包，调用 accept函数接收请求向客户端发送 SYN K，ACK J+1，这时 accept 进入阻塞状态，客户端收到服务器的 SYN K，ACK J+1之后，这时 connect 返回，并对 SYN K 进行确认，服务器收到 ACK K+1时，accept返回，至此三次握手完毕，连接建立。可以得知：<strong>客户端的 connect在三次握手的第二次返回，而服务器端的 accept在三次握手的第三次返回。</strong></p>
<h3 id="为什么是三次握手："><a href="#为什么是三次握手：" class="headerlink" title="为什么是三次握手："></a>为什么是三次握手：</h3><p>有讲到“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。<br>这样说明“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<p>下面用抓包工具 Wireshark 实际分析下三次握手的过程，这里是登陆一个网址，然后Wireshark 过滤http 找到与浏览器打开该网站相关的数据包。</p>
<p>连接的是 HTTP 服务器，可以看到其端口号正是80，客户端的端口号则是随机的。红色框框标记的则是三次握手过程，下面具体来看</p>
<img src="/2018/01/30/tcp-state-transfer-diagram/20141015150458984.bmp" alt="20141015150458984.bmp" title="">
<h4 id="第一次握手数据包："><a href="#第一次握手数据包：" class="headerlink" title="第一次握手数据包："></a>第一次握手数据包：</h4><img src="/2018/01/30/tcp-state-transfer-diagram/first_shake_hand.bmp" alt="first_shake_hand.bmp" title="">
<p>客户端发送一个TCP，标志位SYN置位，序列号为4225926656（默认是相对序列号，可以在Wireshark中protocol preference 设置Absolute Number，显示真正的序列号）。表示客户端请求建立连接。</p>
<h4 id="第二次握手数据包："><a href="#第二次握手数据包：" class="headerlink" title="第二次握手数据包："></a>第二次握手数据包：</h4><img src="/2018/01/30/tcp-state-transfer-diagram/secend-hand-shake.bmp" alt="secend-hand-shake.bmp" title="">
<p>看源端口和目的端口。服务器发回确认包，标志位SYN和ACK置位，将确认序号Ack设置为客户的ISN（初始序号）+1，为4225926657，同时发送序列号为3022381253。</p>
<h4 id="第三次握手数据包"><a href="#第三次握手数据包" class="headerlink" title="第三次握手数据包"></a>第三次握手数据包</h4><img src="/2018/01/30/tcp-state-transfer-diagram/third-hand-shake.bmp" alt="third-hand-shake.bmp" title="">
<p>客户端再次发送确认包，其中ACK置位，确认序号Ack设置为服务器发过来的序号Seq+1，为3022381254，并发送序号=服务器发过来的确认号。</p>
<p>对于建连接的三次握手，主要是初始化Seq的值。通信的双方要互相通知对方自己的初始化的Seq（ISN），这个号（上面的K，J）作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，TCP会用这个序号来拼接数据。</p>
<h3 id="TCP连接终止过程——四次挥手"><a href="#TCP连接终止过程——四次挥手" class="headerlink" title="TCP连接终止过程——四次挥手"></a>TCP连接终止过程——四次挥手</h3><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭，也就是发送方和接收方都需要Fin和Ack。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接，收到一个FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p>
<p>这里我们假定客户端主动关闭（实际上谁先执行主动关闭没本质区别，通话结束了，谁先挂断没啥区别）</p>
<p>客户端发送一个FIN Seq = M（FIN置位，序号为M）包，用来关闭客户端到服务器端的数据传送。<br>服务器端收到这个FIN，它发回一个ACK，确认序号Ack 为收到的序号M+1。<br>服务器端关闭与客户端的连接，发送一个FIN Seq = N 给客户端。<br>客户端发回ACK 报文确认，确认序号Ack 为收到的序号N+1。</p>
<img src="/2018/01/30/tcp-state-transfer-diagram/tcp_close_state_transfer.bmp" alt="tcp_close_state_transfer.bmp" title="">
<p>对于四次挥手，其实仔细看是两次，因为TCP是全双工的，必须双方都关闭才可以，单方会有两次，共有四次。终止的时候，有一方是被动的，所以看上去就成了四次挥手。</p>
<p>前面有说道，一旦连接建立起来，ACK标志位总是被置为1。所以我们在下图可以看到TCP建立连接之后，ACK总是被置为1的。</p>
<img src="/2018/01/30/tcp-state-transfer-diagram/tcp_close_four_wireshark.bmp" alt="tcp_close_four_wireshark.bmp" title="">
<p>关闭连接过程主要看FIN标志位是否置位，ACK在连接建立成功之后都是置为1的。</p>
<p>上面Wireshark抓包是服务器端先执行主动关闭。</p>
<p>第一次挥手：服务器端发起主动关闭，FIN置位，Seq = 3022381791；</p>
<p>第二次挥手：客户端收到FIN后，发回ACK，Ack = Seq + 1 = 3022381792；至此服务器端的连接关闭了，接下来还需要关闭客户端的。</p>
<p>第三次挥手：客户端发送FIN，Seq = 4225929031；</p>
<p>第四次挥手：服务器端收到FIN后，发回ACK，Ack = Seq + 1 = 4225929032.这样客户端的连接也关闭了。至此全双工的TCP连接关闭。</p>
<p>另外通过下面的截图可以发现：数据传输中的 Sequence Number 的增加是和传输字节数相关的。</p>
<img src="/2018/01/30/tcp-state-transfer-diagram/20141015152915479.bmp" alt="20141015152915479.bmp" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转载自：&lt;a href=&quot;http://blog.csdn.net/wenqian1991/article/details/39667131&quot;&gt;TCP的三次握手和四次挥手&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TCP连接建立过程——三次握手&quot;&gt;&lt;a href=&quot;#TCP连接建立过程——三次握手&quot; class=&quot;headerlink&quot; title=&quot;TCP连接建立过程——三次握手&quot;&gt;&lt;/a&gt;TCP连接建立过程——三次握手&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一次握手：客户端发送位码为 SYN = 1（SYN 标志位置位），随机产生初始序列号 Seq = J 的数据包到服务器。服务器由 SYN = 1（置位）知道，客户端要求建立联机。&lt;/li&gt;
&lt;li&gt;第二次握手：服务器收到请求后要确认联机信息，向客户端发送确认号Ack = （客户端的Seq +1，J+1），SYN = 1，ACK = 1（SYN，ACK 标志位置位），随机产生的序列号 Seq = K 的数据包。&lt;/li&gt;
&lt;li&gt;第三次握手：客户端收到后检查 Ack 是否正确，即第一次发送的 Seq +1（J+1），以及位码ACK是否为1。若正确，客户端会再发送 Ack = （服务器端的Seq+1，K+1），ACK = 1，以及序号Seq为服务器确认号J 的确认包。服务器收到后确认之前发送的 Seq（K+1） 值与 ACK= 1 （ACK置位）则连接建立成功。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="网络编程" scheme="https://leokongwq.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="TCP" scheme="https://leokongwq.github.io/tags/TCP/"/>
    
  </entry>
  
</feed>
